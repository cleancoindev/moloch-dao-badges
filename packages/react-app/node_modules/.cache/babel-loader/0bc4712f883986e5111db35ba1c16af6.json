{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nexport function isCrowdsaleWallet(json) {\n  let data = null;\n\n  try {\n    data = JSON.parse(json);\n  } catch (error) {\n    return false;\n  }\n\n  return data.encseed && data.ethaddr;\n}\nexport function isKeystoreWallet(json) {\n  let data = null;\n\n  try {\n    data = JSON.parse(json);\n  } catch (error) {\n    return false;\n  }\n\n  if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n    return false;\n  } // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n\n\n  return true;\n} //export function isJsonWallet(json: string): boolean {\n//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n//}\n\nexport function getJsonWalletAddress(json) {\n  if (isCrowdsaleWallet(json)) {\n    try {\n      return getAddress(JSON.parse(json).ethaddr);\n    } catch (error) {\n      return null;\n    }\n  }\n\n  if (isKeystoreWallet(json)) {\n    try {\n      return getAddress(JSON.parse(json).address);\n    } catch (error) {\n      return null;\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/@ethersproject/json-wallets/lib.esm/inspect.js"],"names":["getAddress","isCrowdsaleWallet","json","data","JSON","parse","error","encseed","ethaddr","isKeystoreWallet","version","parseInt","getJsonWalletAddress","address"],"mappings":"AAAA;;AACA,SAASA,UAAT,QAA2B,wBAA3B;AACA,OAAO,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AACpC,MAAIC,IAAI,GAAG,IAAX;;AACA,MAAI;AACAA,IAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAP;AACH,GAFD,CAGA,OAAOI,KAAP,EAAc;AACV,WAAO,KAAP;AACH;;AACD,SAAQH,IAAI,CAACI,OAAL,IAAgBJ,IAAI,CAACK,OAA7B;AACH;AACD,OAAO,SAASC,gBAAT,CAA0BP,IAA1B,EAAgC;AACnC,MAAIC,IAAI,GAAG,IAAX;;AACA,MAAI;AACAA,IAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAP;AACH,GAFD,CAGA,OAAOI,KAAP,EAAc;AACV,WAAO,KAAP;AACH;;AACD,MAAI,CAACH,IAAI,CAACO,OAAN,IAAiBC,QAAQ,CAACR,IAAI,CAACO,OAAN,CAAR,KAA2BP,IAAI,CAACO,OAAjD,IAA4DC,QAAQ,CAACR,IAAI,CAACO,OAAN,CAAR,KAA2B,CAA3F,EAA8F;AAC1F,WAAO,KAAP;AACH,GAVkC,CAWnC;;;AACA,SAAO,IAAP;AACH,C,CACD;AACA;AACA;;AACA,OAAO,SAASE,oBAAT,CAA8BV,IAA9B,EAAoC;AACvC,MAAID,iBAAiB,CAACC,IAAD,CAArB,EAA6B;AACzB,QAAI;AACA,aAAOF,UAAU,CAACI,IAAI,CAACC,KAAL,CAAWH,IAAX,EAAiBM,OAAlB,CAAjB;AACH,KAFD,CAGA,OAAOF,KAAP,EAAc;AACV,aAAO,IAAP;AACH;AACJ;;AACD,MAAIG,gBAAgB,CAACP,IAAD,CAApB,EAA4B;AACxB,QAAI;AACA,aAAOF,UAAU,CAACI,IAAI,CAACC,KAAL,CAAWH,IAAX,EAAiBW,OAAlB,CAAjB;AACH,KAFD,CAGA,OAAOP,KAAP,EAAc;AACV,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nexport function isCrowdsaleWallet(json) {\n    let data = null;\n    try {\n        data = JSON.parse(json);\n    }\n    catch (error) {\n        return false;\n    }\n    return (data.encseed && data.ethaddr);\n}\nexport function isKeystoreWallet(json) {\n    let data = null;\n    try {\n        data = JSON.parse(json);\n    }\n    catch (error) {\n        return false;\n    }\n    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n        return false;\n    }\n    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n    return true;\n}\n//export function isJsonWallet(json: string): boolean {\n//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n//}\nexport function getJsonWalletAddress(json) {\n    if (isCrowdsaleWallet(json)) {\n        try {\n            return getAddress(JSON.parse(json).ethaddr);\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    if (isKeystoreWallet(json)) {\n        try {\n            return getAddress(JSON.parse(json).address);\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    return null;\n}\n"]},"metadata":{},"sourceType":"module"}