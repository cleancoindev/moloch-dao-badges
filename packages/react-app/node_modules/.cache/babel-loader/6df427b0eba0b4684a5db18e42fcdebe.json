{"ast":null,"code":"'use strict';\n\nconst protons = require('protons');\n\nconst Block = require('ipfs-block');\n\nconst CID = require('cids');\n\nconst {\n  getName\n} = require('multicodec');\n\nconst vd = require('varint-decoder');\n\nconst multihashing = require('multihashing-async');\n\nconst {\n  isMapEqual\n} = require('../../utils');\n\nconst pbm = protons(require('./message.proto'));\n\nconst Entry = require('./entry');\n\nclass BitswapMessage {\n  constructor(full) {\n    this.full = full;\n    this.wantlist = new Map();\n    this.blocks = new Map();\n  }\n\n  get empty() {\n    return this.blocks.size === 0 && this.wantlist.size === 0;\n  }\n\n  addEntry(cid, priority, cancel) {\n    const cidStr = cid.toString('base58btc');\n    const entry = this.wantlist.get(cidStr);\n\n    if (entry) {\n      entry.priority = priority;\n      entry.cancel = Boolean(cancel);\n    } else {\n      this.wantlist.set(cidStr, new Entry(cid, priority, cancel));\n    }\n  }\n\n  addBlock(block) {\n    const cidStr = block.cid.toString('base58btc');\n    this.blocks.set(cidStr, block);\n  }\n\n  cancel(cid) {\n    const cidStr = cid.toString('base58btc');\n    this.wantlist.delete(cidStr);\n    this.addEntry(cid, 0, true);\n  }\n  /*\n   * Serializes to Bitswap Message protobuf of\n   * version 1.0.0\n   */\n\n\n  serializeToBitswap100() {\n    const msg = {\n      wantlist: {\n        entries: Array.from(this.wantlist.values()).map(entry => {\n          return {\n            block: entry.cid.buffer,\n            // cid\n            priority: Number(entry.priority),\n            cancel: Boolean(entry.cancel)\n          };\n        })\n      },\n      blocks: Array.from(this.blocks.values()).map(block => block.data)\n    };\n\n    if (this.full) {\n      msg.wantlist.full = true;\n    }\n\n    return pbm.Message.encode(msg);\n  }\n  /*\n   * Serializes to Bitswap Message protobuf of\n   * version 1.1.0\n   */\n\n\n  serializeToBitswap110() {\n    const msg = {\n      wantlist: {\n        entries: Array.from(this.wantlist.values()).map(entry => {\n          return {\n            block: entry.cid.buffer,\n            // cid\n            priority: Number(entry.priority),\n            cancel: Boolean(entry.cancel)\n          };\n        })\n      },\n      payload: []\n    };\n\n    if (this.full) {\n      msg.wantlist.full = true;\n    }\n\n    this.blocks.forEach(block => {\n      msg.payload.push({\n        prefix: block.cid.prefix,\n        data: block.data\n      });\n    });\n    return pbm.Message.encode(msg);\n  }\n\n  equals(other) {\n    if (this.full !== other.full || !isMapEqual(this.wantlist, other.wantlist) || !isMapEqual(this.blocks, other.blocks)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  get [Symbol.toStringTag]() {\n    const list = Array.from(this.wantlist.keys());\n    const blocks = Array.from(this.blocks.keys());\n    return `BitswapMessage <full: ${this.full}, list: ${list}, blocks: ${blocks}>`;\n  }\n\n}\n\nBitswapMessage.deserialize = async raw => {\n  const decoded = pbm.Message.decode(raw);\n  const isFull = decoded.wantlist && decoded.wantlist.full || false;\n  const msg = new BitswapMessage(isFull);\n\n  if (decoded.wantlist) {\n    decoded.wantlist.entries.forEach(entry => {\n      // note: entry.block is the CID here\n      const cid = new CID(entry.block);\n      msg.addEntry(cid, entry.priority, entry.cancel);\n    });\n  } // Bitswap 1.0.0\n  // decoded.blocks are just the byte arrays\n\n\n  if (decoded.blocks.length > 0) {\n    await Promise.all(decoded.blocks.map(async b => {\n      const hash = await multihashing(b, 'sha2-256');\n      const cid = new CID(hash);\n      msg.addBlock(new Block(b, cid));\n    }));\n    return msg;\n  } // Bitswap 1.1.0\n\n\n  if (decoded.payload.length > 0) {\n    await Promise.all(decoded.payload.map(async p => {\n      if (!p.prefix || !p.data) {\n        return;\n      }\n\n      const values = vd(p.prefix);\n      const cidVersion = values[0];\n      const multicodec = values[1];\n      const hashAlg = values[2]; // const hashLen = values[3] // We haven't need to use this so far\n\n      const hash = await multihashing(p.data, hashAlg);\n      const cid = new CID(cidVersion, getName(multicodec), hash);\n      msg.addBlock(new Block(p.data, cid));\n    }));\n    return msg;\n  }\n\n  return msg;\n};\n\nBitswapMessage.Entry = Entry;\nmodule.exports = BitswapMessage;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs-bitswap/src/types/message/index.js"],"names":["protons","require","Block","CID","getName","vd","multihashing","isMapEqual","pbm","Entry","BitswapMessage","constructor","full","wantlist","Map","blocks","empty","size","addEntry","cid","priority","cancel","cidStr","toString","entry","get","Boolean","set","addBlock","block","delete","serializeToBitswap100","msg","entries","Array","from","values","map","buffer","Number","data","Message","encode","serializeToBitswap110","payload","forEach","push","prefix","equals","other","Symbol","toStringTag","list","keys","deserialize","raw","decoded","decode","isFull","length","Promise","all","b","hash","p","cidVersion","multicodec","hashAlg","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst protons = require('protons')\nconst Block = require('ipfs-block')\nconst CID = require('cids')\nconst { getName } = require('multicodec')\nconst vd = require('varint-decoder')\nconst multihashing = require('multihashing-async')\nconst { isMapEqual } = require('../../utils')\nconst pbm = protons(require('./message.proto'))\nconst Entry = require('./entry')\n\nclass BitswapMessage {\n  constructor (full) {\n    this.full = full\n    this.wantlist = new Map()\n    this.blocks = new Map()\n  }\n\n  get empty () {\n    return this.blocks.size === 0 &&\n           this.wantlist.size === 0\n  }\n\n  addEntry (cid, priority, cancel) {\n    const cidStr = cid.toString('base58btc')\n\n    const entry = this.wantlist.get(cidStr)\n\n    if (entry) {\n      entry.priority = priority\n      entry.cancel = Boolean(cancel)\n    } else {\n      this.wantlist.set(cidStr, new Entry(cid, priority, cancel))\n    }\n  }\n\n  addBlock (block) {\n    const cidStr = block.cid.toString('base58btc')\n    this.blocks.set(cidStr, block)\n  }\n\n  cancel (cid) {\n    const cidStr = cid.toString('base58btc')\n    this.wantlist.delete(cidStr)\n    this.addEntry(cid, 0, true)\n  }\n\n  /*\n   * Serializes to Bitswap Message protobuf of\n   * version 1.0.0\n   */\n  serializeToBitswap100 () {\n    const msg = {\n      wantlist: {\n        entries: Array.from(this.wantlist.values()).map((entry) => {\n          return {\n            block: entry.cid.buffer, // cid\n            priority: Number(entry.priority),\n            cancel: Boolean(entry.cancel)\n          }\n        })\n      },\n      blocks: Array.from(this.blocks.values())\n        .map((block) => block.data)\n    }\n\n    if (this.full) {\n      msg.wantlist.full = true\n    }\n\n    return pbm.Message.encode(msg)\n  }\n\n  /*\n   * Serializes to Bitswap Message protobuf of\n   * version 1.1.0\n   */\n  serializeToBitswap110 () {\n    const msg = {\n      wantlist: {\n        entries: Array.from(this.wantlist.values()).map((entry) => {\n          return {\n            block: entry.cid.buffer, // cid\n            priority: Number(entry.priority),\n            cancel: Boolean(entry.cancel)\n          }\n        })\n      },\n      payload: []\n    }\n\n    if (this.full) {\n      msg.wantlist.full = true\n    }\n\n    this.blocks.forEach((block) => {\n      msg.payload.push({\n        prefix: block.cid.prefix,\n        data: block.data\n      })\n    })\n\n    return pbm.Message.encode(msg)\n  }\n\n  equals (other) {\n    if (this.full !== other.full ||\n        !isMapEqual(this.wantlist, other.wantlist) ||\n        !isMapEqual(this.blocks, other.blocks)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  get [Symbol.toStringTag] () {\n    const list = Array.from(this.wantlist.keys())\n    const blocks = Array.from(this.blocks.keys())\n    return `BitswapMessage <full: ${this.full}, list: ${list}, blocks: ${blocks}>`\n  }\n}\n\nBitswapMessage.deserialize = async (raw) => {\n  const decoded = pbm.Message.decode(raw)\n\n  const isFull = (decoded.wantlist && decoded.wantlist.full) || false\n  const msg = new BitswapMessage(isFull)\n\n  if (decoded.wantlist) {\n    decoded.wantlist.entries.forEach((entry) => {\n      // note: entry.block is the CID here\n      const cid = new CID(entry.block)\n      msg.addEntry(cid, entry.priority, entry.cancel)\n    })\n  }\n\n  // Bitswap 1.0.0\n  // decoded.blocks are just the byte arrays\n  if (decoded.blocks.length > 0) {\n    await Promise.all(decoded.blocks.map(async (b) => {\n      const hash = await multihashing(b, 'sha2-256')\n      const cid = new CID(hash)\n      msg.addBlock(new Block(b, cid))\n    }))\n    return msg\n  }\n\n  // Bitswap 1.1.0\n  if (decoded.payload.length > 0) {\n    await Promise.all(decoded.payload.map(async (p) => {\n      if (!p.prefix || !p.data) {\n        return\n      }\n      const values = vd(p.prefix)\n      const cidVersion = values[0]\n      const multicodec = values[1]\n      const hashAlg = values[2]\n      // const hashLen = values[3] // We haven't need to use this so far\n      const hash = await multihashing(p.data, hashAlg)\n      const cid = new CID(cidVersion, getName(multicodec), hash)\n      msg.addBlock(new Block(p.data, cid))\n    }))\n    return msg\n  }\n\n  return msg\n}\n\nBitswapMessage.Entry = Entry\nmodule.exports = BitswapMessage\n"]},"metadata":{},"sourceType":"script"}