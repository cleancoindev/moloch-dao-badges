{"ast":null,"code":"'use strict';\n\nconst {\n  URL\n} = require('iso-url');\n\nconst nodeify = require('promise-nodeify');\n\nconst {\n  default: ky\n} = require('ky-universal');\n\nmodule.exports = ipfs => {\n  const addFromURL = async (url, opts) => {\n    opts = opts || {};\n    const res = await ky.get(url);\n    const path = decodeURIComponent(new URL(res.url).pathname.split('/').pop());\n    const content = Buffer.from((await res.arrayBuffer()));\n    return ipfs.add({\n      content,\n      path\n    }, opts);\n  };\n\n  return (name, opts, cb) => {\n    if (typeof opts === 'function') {\n      cb = opts;\n      opts = {};\n    }\n\n    return nodeify(addFromURL(name, opts), cb);\n  };\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs/src/core/components/files-regular/add-from-url.js"],"names":["URL","require","nodeify","default","ky","module","exports","ipfs","addFromURL","url","opts","res","get","path","decodeURIComponent","pathname","split","pop","content","Buffer","from","arrayBuffer","add","name","cb"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAUC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA,OAAO,EAAEC;AAAX,IAAkBH,OAAO,CAAC,cAAD,CAA/B;;AAEAI,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,QAAMC,UAAU,GAAG,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AACtCA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,UAAMC,GAAG,GAAG,MAAMP,EAAE,CAACQ,GAAH,CAAOH,GAAP,CAAlB;AACA,UAAMI,IAAI,GAAGC,kBAAkB,CAAC,IAAId,GAAJ,CAAQW,GAAG,CAACF,GAAZ,EAAiBM,QAAjB,CAA0BC,KAA1B,CAAgC,GAAhC,EAAqCC,GAArC,EAAD,CAA/B;AACA,UAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,EAAY,MAAMT,GAAG,CAACU,WAAJ,EAAlB,EAAhB;AACA,WAAOd,IAAI,CAACe,GAAL,CAAS;AAAEJ,MAAAA,OAAF;AAAWL,MAAAA;AAAX,KAAT,EAA4BH,IAA5B,CAAP;AACD,GAND;;AAQA,SAAO,CAACa,IAAD,EAAOb,IAAP,EAAac,EAAb,KAAoB;AACzB,QAAI,OAAOd,IAAP,KAAgB,UAApB,EAAgC;AAC9Bc,MAAAA,EAAE,GAAGd,IAAL;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACD,WAAOR,OAAO,CAACM,UAAU,CAACe,IAAD,EAAOb,IAAP,CAAX,EAAyBc,EAAzB,CAAd;AACD,GAND;AAOD,CAhBD","sourcesContent":["'use strict'\n\nconst { URL } = require('iso-url')\nconst nodeify = require('promise-nodeify')\nconst { default: ky } = require('ky-universal')\n\nmodule.exports = (ipfs) => {\n  const addFromURL = async (url, opts) => {\n    opts = opts || {}\n    const res = await ky.get(url)\n    const path = decodeURIComponent(new URL(res.url).pathname.split('/').pop())\n    const content = Buffer.from(await res.arrayBuffer())\n    return ipfs.add({ content, path }, opts)\n  }\n\n  return (name, opts, cb) => {\n    if (typeof opts === 'function') {\n      cb = opts\n      opts = {}\n    }\n    return nodeify(addFromURL(name, opts), cb)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}