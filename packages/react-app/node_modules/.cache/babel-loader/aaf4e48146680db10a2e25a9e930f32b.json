{"ast":null,"code":"'use strict';\n\nconst repoVersion = require('ipfs-repo').repoVersion;\n\nconst callbackify = require('callbackify');\n\nmodule.exports = function repo(self) {\n  return {\n    init: callbackify(async (bits, empty) => {// 1. check if repo already exists\n    }),\n\n    /**\n     * If the repo has been initialized, report the current version.\n     * Otherwise report the version that would be initialized.\n     *\n     * @param {function(Error, Number)} [callback]\n     * @returns {undefined}\n     */\n    version: callbackify(async () => {\n      try {\n        await self._repo._checkInitialized();\n      } catch (err) {\n        // TODO: (dryajov) This is really hacky, there must be a better way\n        const match = [/Key not found in database \\[\\/version\\]/, /ENOENT/, /repo is not initialized yet/].some(m => {\n          return m.test(err.message);\n        });\n\n        if (match) {\n          // this repo has not been initialized\n          return repoVersion;\n        }\n\n        throw err;\n      }\n\n      return self._repo.version.get();\n    }),\n    gc: require('./pin/gc')(self),\n    stat: callbackify.variadic(async options => {\n      options = options || {};\n      const stats = await self._repo.stat(options);\n      return {\n        numObjects: stats.numObjects,\n        repoSize: stats.repoSize,\n        repoPath: stats.repoPath,\n        version: stats.version.toString(),\n        storageMax: stats.storageMax\n      };\n    }),\n    path: () => self._repo.path\n  };\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs/src/core/components/repo.js"],"names":["repoVersion","require","callbackify","module","exports","repo","self","init","bits","empty","version","_repo","_checkInitialized","err","match","some","m","test","message","get","gc","stat","variadic","options","stats","numObjects","repoSize","repoPath","toString","storageMax","path"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBD,WAAzC;;AACA,MAAME,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAeC,IAAf,EAAqB;AACpC,SAAO;AACLC,IAAAA,IAAI,EAAEL,WAAW,CAAC,OAAOM,IAAP,EAAaC,KAAb,KAAuB,CACvC;AACD,KAFgB,CADZ;;AAKL;;;;;;;AAOAC,IAAAA,OAAO,EAAER,WAAW,CAAC,YAAY;AAC/B,UAAI;AACF,cAAMI,IAAI,CAACK,KAAL,CAAWC,iBAAX,EAAN;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZ;AACA,cAAMC,KAAK,GAAG,CACZ,yCADY,EAEZ,QAFY,EAGZ,6BAHY,EAIZC,IAJY,CAINC,CAAD,IAAO;AACZ,iBAAOA,CAAC,CAACC,IAAF,CAAOJ,GAAG,CAACK,OAAX,CAAP;AACD,SANa,CAAd;;AAOA,YAAIJ,KAAJ,EAAW;AACT;AACA,iBAAOd,WAAP;AACD;;AACD,cAAMa,GAAN;AACD;;AAED,aAAOP,IAAI,CAACK,KAAL,CAAWD,OAAX,CAAmBS,GAAnB,EAAP;AACD,KApBmB,CAZf;AAkCLC,IAAAA,EAAE,EAAEnB,OAAO,CAAC,UAAD,CAAP,CAAoBK,IAApB,CAlCC;AAoCLe,IAAAA,IAAI,EAAEnB,WAAW,CAACoB,QAAZ,CAAqB,MAAOC,OAAP,IAAmB;AAC5CA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,YAAMC,KAAK,GAAG,MAAMlB,IAAI,CAACK,KAAL,CAAWU,IAAX,CAAgBE,OAAhB,CAApB;AAEA,aAAO;AACLE,QAAAA,UAAU,EAAED,KAAK,CAACC,UADb;AAELC,QAAAA,QAAQ,EAAEF,KAAK,CAACE,QAFX;AAGLC,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAHX;AAILjB,QAAAA,OAAO,EAAEc,KAAK,CAACd,OAAN,CAAckB,QAAd,EAJJ;AAKLC,QAAAA,UAAU,EAAEL,KAAK,CAACK;AALb,OAAP;AAOD,KAZK,CApCD;AAkDLC,IAAAA,IAAI,EAAE,MAAMxB,IAAI,CAACK,KAAL,CAAWmB;AAlDlB,GAAP;AAoDD,CArDD","sourcesContent":["'use strict'\n\nconst repoVersion = require('ipfs-repo').repoVersion\nconst callbackify = require('callbackify')\n\nmodule.exports = function repo (self) {\n  return {\n    init: callbackify(async (bits, empty) => {\n      // 1. check if repo already exists\n    }),\n\n    /**\n     * If the repo has been initialized, report the current version.\n     * Otherwise report the version that would be initialized.\n     *\n     * @param {function(Error, Number)} [callback]\n     * @returns {undefined}\n     */\n    version: callbackify(async () => {\n      try {\n        await self._repo._checkInitialized()\n      } catch (err) {\n        // TODO: (dryajov) This is really hacky, there must be a better way\n        const match = [\n          /Key not found in database \\[\\/version\\]/,\n          /ENOENT/,\n          /repo is not initialized yet/\n        ].some((m) => {\n          return m.test(err.message)\n        })\n        if (match) {\n          // this repo has not been initialized\n          return repoVersion\n        }\n        throw err\n      }\n\n      return self._repo.version.get()\n    }),\n\n    gc: require('./pin/gc')(self),\n\n    stat: callbackify.variadic(async (options) => {\n      options = options || {}\n\n      const stats = await self._repo.stat(options)\n\n      return {\n        numObjects: stats.numObjects,\n        repoSize: stats.repoSize,\n        repoPath: stats.repoPath,\n        version: stats.version.toString(),\n        storageMax: stats.storageMax\n      }\n    }),\n\n    path: () => self._repo.path\n  }\n}\n"]},"metadata":{},"sourceType":"script"}