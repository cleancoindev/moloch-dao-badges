{"ast":null,"code":"'use strict';\n\nconst base32 = require('base32.js');\n\nconst {\n  Key\n} = require('interface-datastore');\n\nconst CID = require('cids');\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} cid\n * @returns {Key}\n */\n\n\nexports.cidToKey = cid => {\n  const enc = new base32.Encoder();\n  return new Key('/' + enc.write(cid.buffer).finalize(), false);\n};\n/**\n * Transform a datastore Key instance to a CID\n *\n * @param {Key} key\n * @returns {CID}\n */\n\n\nexports.keyToCid = key => {\n  // Block key is of the form /<base32 encoded string>\n  const decoder = new base32.Decoder();\n  const buff = decoder.write(key.toString().slice(1)).finalize();\n  return new CID(Buffer.from(buff));\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipfs/node_modules/ipfs-repo/src/blockstore-utils.js"],"names":["base32","require","Key","CID","exports","cidToKey","cid","enc","Encoder","write","buffer","finalize","keyToCid","key","decoder","Decoder","buff","toString","slice","Buffer","from"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAUD,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,MAAD,CAAnB;AAEA;;;;;;;;AAMAG,OAAO,CAACC,QAAR,GAAmBC,GAAG,IAAI;AACxB,QAAMC,GAAG,GAAG,IAAIP,MAAM,CAACQ,OAAX,EAAZ;AACA,SAAO,IAAIN,GAAJ,CAAQ,MAAMK,GAAG,CAACE,KAAJ,CAAUH,GAAG,CAACI,MAAd,EAAsBC,QAAtB,EAAd,EAAgD,KAAhD,CAAP;AACD,CAHD;AAKA;;;;;;;;AAMAP,OAAO,CAACQ,QAAR,GAAmBC,GAAG,IAAI;AACxB;AACA,QAAMC,OAAO,GAAG,IAAId,MAAM,CAACe,OAAX,EAAhB;AACA,QAAMC,IAAI,GAAGF,OAAO,CAACL,KAAR,CAAcI,GAAG,CAACI,QAAJ,GAAeC,KAAf,CAAqB,CAArB,CAAd,EAAuCP,QAAvC,EAAb;AACA,SAAO,IAAIR,GAAJ,CAAQgB,MAAM,CAACC,IAAP,CAAYJ,IAAZ,CAAR,CAAP;AACD,CALD","sourcesContent":["'use strict'\n\nconst base32 = require('base32.js')\nconst { Key } = require('interface-datastore')\nconst CID = require('cids')\n\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} cid\n * @returns {Key}\n */\nexports.cidToKey = cid => {\n  const enc = new base32.Encoder()\n  return new Key('/' + enc.write(cid.buffer).finalize(), false)\n}\n\n/**\n * Transform a datastore Key instance to a CID\n *\n * @param {Key} key\n * @returns {CID}\n */\nexports.keyToCid = key => {\n  // Block key is of the form /<base32 encoded string>\n  const decoder = new base32.Decoder()\n  const buff = decoder.write(key.toString().slice(1)).finalize()\n  return new CID(Buffer.from(buff))\n}\n"]},"metadata":{},"sourceType":"script"}