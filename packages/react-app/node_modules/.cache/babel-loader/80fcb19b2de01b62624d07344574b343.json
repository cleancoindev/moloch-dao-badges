{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst allowedTransactionKeys = [\"chainId\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"nonce\", \"to\", \"value\"]; // Sub-Class Notes:\n//  - A Signer MUST always make sure, that if present, the \"from\" field\n//    matches the Signer, before sending or signing a transaction\n//  - A Signer SHOULD always wrap private information (such as a private\n//    key or mnemonic) in a function, so that console.log does not leak\n//    the data\n\nexport class Signer {\n  ///////////////////\n  // Sub-classes MUST call super\n  constructor() {\n    logger.checkAbstract(new.target, Signer);\n    defineReadOnly(this, \"_isSigner\", true);\n  } ///////////////////\n  // Sub-classes MAY override these\n\n\n  getBalance(blockTag) {\n    this._checkProvider(\"getBalance\");\n\n    return this.provider.getBalance(this.getAddress(), blockTag);\n  }\n\n  getTransactionCount(blockTag) {\n    this._checkProvider(\"getTransactionCount\");\n\n    return this.provider.getTransactionCount(this.getAddress(), blockTag);\n  } // Populates \"from\" if unspecified, and estimates the gas for the transation\n\n\n  estimateGas(transaction) {\n    this._checkProvider(\"estimateGas\");\n\n    return resolveProperties(this.checkTransaction(transaction)).then(tx => {\n      return this.provider.estimateGas(tx);\n    });\n  } // Populates \"from\" if unspecified, and calls with the transation\n\n\n  call(transaction, blockTag) {\n    this._checkProvider(\"call\");\n\n    return resolveProperties(this.checkTransaction(transaction)).then(tx => {\n      return this.provider.call(tx);\n    });\n  } // Populates all fields in a transaction, signs it and sends it to the network\n\n\n  sendTransaction(transaction) {\n    this._checkProvider(\"sendTransaction\");\n\n    return this.populateTransaction(transaction).then(tx => {\n      return this.signTransaction(tx).then(signedTx => {\n        return this.provider.sendTransaction(signedTx);\n      });\n    });\n  }\n\n  getChainId() {\n    this._checkProvider(\"getChainId\");\n\n    return this.provider.getNetwork().then(network => network.chainId);\n  }\n\n  getGasPrice() {\n    this._checkProvider(\"getGasPrice\");\n\n    return this.provider.getGasPrice();\n  }\n\n  resolveName(name) {\n    this._checkProvider(\"resolveName\");\n\n    return this.provider.resolveName(name);\n  } // Checks a transaction does not contain invalid keys and if\n  // no \"from\" is provided, populates it.\n  // - does NOT require a provider\n  // - adds \"from\" is not present\n  // - returns a COPY (safe to mutate the result)\n  // By default called from: (overriding these prevents it)\n  //   - call\n  //   - estimateGas\n  //   - populateTransaction (and therefor sendTransaction)\n\n\n  checkTransaction(transaction) {\n    for (const key in transaction) {\n      if (allowedTransactionKeys.indexOf(key) === -1) {\n        logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n      }\n    }\n\n    const tx = shallowCopy(transaction);\n\n    if (tx.from == null) {\n      tx.from = this.getAddress();\n    } else {\n      // Make sure any provided address matches this signer\n      tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then(result => {\n        if (result[0] !== result[1]) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n\n        return result[0];\n      });\n    }\n\n    return tx;\n  } // Populates ALL keys for a transaction and checks that \"from\" matches\n  // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n  // By default called from: (overriding these prevents it)\n  //   - sendTransaction\n\n\n  populateTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n\n      if (tx.to != null) {\n        tx.to = Promise.resolve(tx.to).then(to => this.resolveName(to));\n      }\n\n      if (tx.gasPrice == null) {\n        tx.gasPrice = this.getGasPrice();\n      }\n\n      if (tx.nonce == null) {\n        tx.nonce = this.getTransactionCount(\"pending\");\n      }\n\n      if (tx.gasLimit == null) {\n        tx.gasLimit = this.estimateGas(tx).catch(error => {\n          return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            tx: tx\n          });\n        });\n      }\n\n      if (tx.chainId == null) {\n        tx.chainId = this.getChainId();\n      } else {\n        tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(results => {\n          if (results[1] !== 0 && results[0] !== results[1]) {\n            logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n          }\n\n          return results[0];\n        });\n      }\n\n      return yield resolveProperties(tx);\n    });\n  } ///////////////////\n  // Sub-classes SHOULD leave these alone\n\n\n  _checkProvider(operation) {\n    if (!this.provider) {\n      logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: operation || \"_checkProvider\"\n      });\n    }\n  }\n\n  static isSigner(value) {\n    return !!(value && value._isSigner);\n  }\n\n}\nexport class VoidSigner extends Signer {\n  constructor(address, provider) {\n    logger.checkNew(new.target, VoidSigner);\n    super();\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"provider\", provider || null);\n  }\n\n  getAddress() {\n    return Promise.resolve(this.address);\n  }\n\n  _fail(message, operation) {\n    return Promise.resolve().then(() => {\n      logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: operation\n      });\n    });\n  }\n\n  signMessage(message) {\n    return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n  }\n\n  signTransaction(transaction) {\n    return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n  }\n\n  connect(provider) {\n    return new VoidSigner(this.address, provider);\n  }\n\n}","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/@ethersproject/abstract-signer/lib.esm/index.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","defineReadOnly","resolveProperties","shallowCopy","Logger","version","logger","allowedTransactionKeys","Signer","constructor","checkAbstract","new","target","getBalance","blockTag","_checkProvider","provider","getAddress","getTransactionCount","estimateGas","transaction","checkTransaction","tx","call","sendTransaction","populateTransaction","signTransaction","signedTx","getChainId","getNetwork","network","chainId","getGasPrice","resolveName","name","key","indexOf","throwArgumentError","from","all","to","gasPrice","nonce","gasLimit","catch","error","throwError","errors","UNPREDICTABLE_GAS_LIMIT","results","operation","UNSUPPORTED_OPERATION","isSigner","_isSigner","VoidSigner","address","checkNew","_fail","message","signMessage","connect"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst allowedTransactionKeys = [\n    \"chainId\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"nonce\", \"to\", \"value\"\n];\n// Sub-Class Notes:\n//  - A Signer MUST always make sure, that if present, the \"from\" field\n//    matches the Signer, before sending or signing a transaction\n//  - A Signer SHOULD always wrap private information (such as a private\n//    key or mnemonic) in a function, so that console.log does not leak\n//    the data\nexport class Signer {\n    ///////////////////\n    // Sub-classes MUST call super\n    constructor() {\n        logger.checkAbstract(new.target, Signer);\n        defineReadOnly(this, \"_isSigner\", true);\n    }\n    ///////////////////\n    // Sub-classes MAY override these\n    getBalance(blockTag) {\n        this._checkProvider(\"getBalance\");\n        return this.provider.getBalance(this.getAddress(), blockTag);\n    }\n    getTransactionCount(blockTag) {\n        this._checkProvider(\"getTransactionCount\");\n        return this.provider.getTransactionCount(this.getAddress(), blockTag);\n    }\n    // Populates \"from\" if unspecified, and estimates the gas for the transation\n    estimateGas(transaction) {\n        this._checkProvider(\"estimateGas\");\n        return resolveProperties(this.checkTransaction(transaction)).then((tx) => {\n            return this.provider.estimateGas(tx);\n        });\n    }\n    // Populates \"from\" if unspecified, and calls with the transation\n    call(transaction, blockTag) {\n        this._checkProvider(\"call\");\n        return resolveProperties(this.checkTransaction(transaction)).then((tx) => {\n            return this.provider.call(tx);\n        });\n    }\n    // Populates all fields in a transaction, signs it and sends it to the network\n    sendTransaction(transaction) {\n        this._checkProvider(\"sendTransaction\");\n        return this.populateTransaction(transaction).then((tx) => {\n            return this.signTransaction(tx).then((signedTx) => {\n                return this.provider.sendTransaction(signedTx);\n            });\n        });\n    }\n    getChainId() {\n        this._checkProvider(\"getChainId\");\n        return this.provider.getNetwork().then((network) => network.chainId);\n    }\n    getGasPrice() {\n        this._checkProvider(\"getGasPrice\");\n        return this.provider.getGasPrice();\n    }\n    resolveName(name) {\n        this._checkProvider(\"resolveName\");\n        return this.provider.resolveName(name);\n    }\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n    checkTransaction(transaction) {\n        for (const key in transaction) {\n            if (allowedTransactionKeys.indexOf(key) === -1) {\n                logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n            }\n        }\n        const tx = shallowCopy(transaction);\n        if (tx.from == null) {\n            tx.from = this.getAddress();\n        }\n        else {\n            // Make sure any provided address matches this signer\n            tx.from = Promise.all([\n                Promise.resolve(tx.from),\n                this.getAddress()\n            ]).then((result) => {\n                if (result[0] !== result[1]) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n                return result[0];\n            });\n        }\n        return tx;\n    }\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    populateTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            if (tx.to != null) {\n                tx.to = Promise.resolve(tx.to).then((to) => this.resolveName(to));\n            }\n            if (tx.gasPrice == null) {\n                tx.gasPrice = this.getGasPrice();\n            }\n            if (tx.nonce == null) {\n                tx.nonce = this.getTransactionCount(\"pending\");\n            }\n            if (tx.gasLimit == null) {\n                tx.gasLimit = this.estimateGas(tx).catch((error) => {\n                    return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                        tx: tx\n                    });\n                });\n            }\n            if (tx.chainId == null) {\n                tx.chainId = this.getChainId();\n            }\n            else {\n                tx.chainId = Promise.all([\n                    Promise.resolve(tx.chainId),\n                    this.getChainId()\n                ]).then((results) => {\n                    if (results[1] !== 0 && results[0] !== results[1]) {\n                        logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                    }\n                    return results[0];\n                });\n            }\n            return yield resolveProperties(tx);\n        });\n    }\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n    _checkProvider(operation) {\n        if (!this.provider) {\n            logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: (operation || \"_checkProvider\")\n            });\n        }\n    }\n    static isSigner(value) {\n        return !!(value && value._isSigner);\n    }\n}\nexport class VoidSigner extends Signer {\n    constructor(address, provider) {\n        logger.checkNew(new.target, VoidSigner);\n        super();\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    _fail(message, operation) {\n        return Promise.resolve().then(() => {\n            logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });\n        });\n    }\n    signMessage(message) {\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n    signTransaction(transaction) {\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n    connect(provider) {\n        return new VoidSigner(this.address, provider);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}