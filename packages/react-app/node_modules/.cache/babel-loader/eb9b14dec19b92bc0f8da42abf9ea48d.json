{"ast":null,"code":"'use strict';\n\nconst pull = require('pull-stream/pull');\n\nconst handshake = require('pull-handshake');\n\nconst constants = require('./constants');\n\nconst PROTOCOL = constants.PROTOCOL;\nconst PING_LENGTH = constants.PING_LENGTH;\n\nconst debug = require('debug');\n\nconst log = debug('libp2p-ping');\nlog.error = debug('libp2p-ping:error');\n\nfunction mount(swarm) {\n  swarm.handle(PROTOCOL, (protocol, conn) => {\n    const stream = handshake({\n      timeout: 0\n    });\n    const shake = stream.handshake; // receive and echo back\n\n    function next() {\n      shake.read(PING_LENGTH, (err, buf) => {\n        if (err === true) {\n          // stream closed\n          return;\n        }\n\n        if (err) {\n          return log.error(err);\n        }\n\n        shake.write(buf);\n        return next();\n      });\n    }\n\n    pull(conn, stream, conn);\n    next();\n  });\n}\n\nfunction unmount(swarm) {\n  swarm.unhandle(PROTOCOL);\n}\n\nexports = module.exports;\nexports.mount = mount;\nexports.unmount = unmount;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/libp2p/src/ping/handler.js"],"names":["pull","require","handshake","constants","PROTOCOL","PING_LENGTH","debug","log","error","mount","swarm","handle","protocol","conn","stream","timeout","shake","next","read","err","buf","write","unmount","unhandle","exports","module"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,gBAAD,CAAzB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMG,QAAQ,GAAGD,SAAS,CAACC,QAA3B;AACA,MAAMC,WAAW,GAAGF,SAAS,CAACE,WAA9B;;AAEA,MAAMC,KAAK,GAAGL,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMM,GAAG,GAAGD,KAAK,CAAC,aAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,mBAAD,CAAjB;;AAEA,SAASG,KAAT,CAAgBC,KAAhB,EAAuB;AACrBA,EAAAA,KAAK,CAACC,MAAN,CAAaP,QAAb,EAAuB,CAACQ,QAAD,EAAWC,IAAX,KAAoB;AACzC,UAAMC,MAAM,GAAGZ,SAAS,CAAC;AAAEa,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAxB;AACA,UAAMC,KAAK,GAAGF,MAAM,CAACZ,SAArB,CAFyC,CAIzC;;AACA,aAASe,IAAT,GAAiB;AACfD,MAAAA,KAAK,CAACE,IAAN,CAAWb,WAAX,EAAwB,CAACc,GAAD,EAAMC,GAAN,KAAc;AACpC,YAAID,GAAG,KAAK,IAAZ,EAAkB;AAChB;AACA;AACD;;AACD,YAAIA,GAAJ,EAAS;AACP,iBAAOZ,GAAG,CAACC,KAAJ,CAAUW,GAAV,CAAP;AACD;;AAEDH,QAAAA,KAAK,CAACK,KAAN,CAAYD,GAAZ;AACA,eAAOH,IAAI,EAAX;AACD,OAXD;AAYD;;AAEDjB,IAAAA,IAAI,CACFa,IADE,EAEFC,MAFE,EAGFD,IAHE,CAAJ;AAMAI,IAAAA,IAAI;AACL,GA3BD;AA4BD;;AAED,SAASK,OAAT,CAAkBZ,KAAlB,EAAyB;AACvBA,EAAAA,KAAK,CAACa,QAAN,CAAenB,QAAf;AACD;;AAEDoB,OAAO,GAAGC,MAAM,CAACD,OAAjB;AACAA,OAAO,CAACf,KAAR,GAAgBA,KAAhB;AACAe,OAAO,CAACF,OAAR,GAAkBA,OAAlB","sourcesContent":["'use strict'\n\nconst pull = require('pull-stream/pull')\nconst handshake = require('pull-handshake')\nconst constants = require('./constants')\nconst PROTOCOL = constants.PROTOCOL\nconst PING_LENGTH = constants.PING_LENGTH\n\nconst debug = require('debug')\nconst log = debug('libp2p-ping')\nlog.error = debug('libp2p-ping:error')\n\nfunction mount (swarm) {\n  swarm.handle(PROTOCOL, (protocol, conn) => {\n    const stream = handshake({ timeout: 0 })\n    const shake = stream.handshake\n\n    // receive and echo back\n    function next () {\n      shake.read(PING_LENGTH, (err, buf) => {\n        if (err === true) {\n          // stream closed\n          return\n        }\n        if (err) {\n          return log.error(err)\n        }\n\n        shake.write(buf)\n        return next()\n      })\n    }\n\n    pull(\n      conn,\n      stream,\n      conn\n    )\n\n    next()\n  })\n}\n\nfunction unmount (swarm) {\n  swarm.unhandle(PROTOCOL)\n}\n\nexports = module.exports\nexports.mount = mount\nexports.unmount = unmount\n"]},"metadata":{},"sourceType":"script"}