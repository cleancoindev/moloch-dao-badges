{"ast":null,"code":"\"use strict\";\n\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider } from \"./base-provider\";\nimport { AlchemyProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network, options) {\n  if (network == null) {\n    network = \"homestead\";\n  }\n\n  const n = getNetwork(network);\n\n  if (!n || !n._defaultProvider) {\n    logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n      operation: \"getDefaultProvider\",\n      network: network\n    });\n  }\n\n  return n._defaultProvider({\n    FallbackProvider,\n    AlchemyProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    JsonRpcProvider,\n    NodesmithProvider,\n    Web3Provider,\n    IpcProvider\n  }, options);\n} ////////////////////////\n// Exports\n\n\nexport { // Abstract Providers (or Abstract-ish)\nProvider, BaseProvider ///////////////////////\n// Concreate Providers\n, FallbackProvider, AlchemyProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, JsonRpcProvider, NodesmithProvider, Web3Provider, WebSocketProvider, IpcProvider ///////////////////////\n// Signer\n, JsonRpcSigner ///////////////////////\n// Functions\n, getDefaultProvider, getNetwork ///////////////////////\n// Objects\n, Formatter };","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/@ethersproject/providers/lib.esm/index.js"],"names":["Provider","getNetwork","BaseProvider","AlchemyProvider","CloudflareProvider","EtherscanProvider","FallbackProvider","IpcProvider","InfuraProvider","JsonRpcProvider","JsonRpcSigner","NodesmithProvider","Web3Provider","WebSocketProvider","Formatter","Logger","version","logger","getDefaultProvider","network","options","n","_defaultProvider","throwError","errors","NETWORK_ERROR","operation"],"mappings":"AAAA;;AACA,SAASA,QAAT,QAAyB,kCAAzB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,qBAA/C;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf,C,CACA;AACA;;AACA,SAASE,kBAAT,CAA4BC,OAA5B,EAAqCC,OAArC,EAA8C;AAC1C,MAAID,OAAO,IAAI,IAAf,EAAqB;AACjBA,IAAAA,OAAO,GAAG,WAAV;AACH;;AACD,QAAME,CAAC,GAAGpB,UAAU,CAACkB,OAAD,CAApB;;AACA,MAAI,CAACE,CAAD,IAAM,CAACA,CAAC,CAACC,gBAAb,EAA+B;AAC3BL,IAAAA,MAAM,CAACM,UAAP,CAAkB,wCAAlB,EAA4DR,MAAM,CAACS,MAAP,CAAcC,aAA1E,EAAyF;AACrFC,MAAAA,SAAS,EAAE,oBAD0E;AAErFP,MAAAA,OAAO,EAAEA;AAF4E,KAAzF;AAIH;;AACD,SAAOE,CAAC,CAACC,gBAAF,CAAmB;AACtBhB,IAAAA,gBADsB;AAEtBH,IAAAA,eAFsB;AAGtBC,IAAAA,kBAHsB;AAItBC,IAAAA,iBAJsB;AAKtBG,IAAAA,cALsB;AAMtBC,IAAAA,eANsB;AAOtBE,IAAAA,iBAPsB;AAQtBC,IAAAA,YARsB;AAStBL,IAAAA;AATsB,GAAnB,EAUJa,OAVI,CAAP;AAWH,C,CACD;AACA;;;AACA,SACA;AACApB,QAFA,EAEUE,YAFV,CAGA;AACA;AAJA,EAKAI,gBALA,EAKkBH,eALlB,EAKmCC,kBALnC,EAKuDC,iBALvD,EAK0EG,cAL1E,EAK0FC,eAL1F,EAK2GE,iBAL3G,EAK8HC,YAL9H,EAK4IC,iBAL5I,EAK+JN,WAL/J,CAMA;AACA;AAPA,EAQAG,aARA,CASA;AACA;AAVA,EAWAQ,kBAXA,EAWoBjB,UAXpB,CAYA;AACA;AAbA,EAcAa,SAdA","sourcesContent":["\"use strict\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider } from \"./base-provider\";\nimport { AlchemyProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n////////////////////////\n// Helper Functions\nfunction getDefaultProvider(network, options) {\n    if (network == null) {\n        network = \"homestead\";\n    }\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n    return n._defaultProvider({\n        FallbackProvider,\n        AlchemyProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        Web3Provider,\n        IpcProvider,\n    }, options);\n}\n////////////////////////\n// Exports\nexport { \n// Abstract Providers (or Abstract-ish)\nProvider, BaseProvider, \n///////////////////////\n// Concreate Providers\nFallbackProvider, AlchemyProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, JsonRpcProvider, NodesmithProvider, Web3Provider, WebSocketProvider, IpcProvider, \n///////////////////////\n// Signer\nJsonRpcSigner, \n///////////////////////\n// Functions\ngetDefaultProvider, getNetwork, \n///////////////////////\n// Objects\nFormatter };\n"]},"metadata":{},"sourceType":"module"}