{"ast":null,"code":"'use strict';\n\nconst errors = require('../errors');\n\nconst repoInit = require('./init');\n\nconst Datastore = require('datastore-fs');\n\nconst Key = require('interface-datastore').Key;\n\nconst versionKey = new Key('version');\nexports.getVersion = getVersion;\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {string} path\n * @returns {Promise<int>}\n */\n\nasync function getVersion(path) {\n  if (!(await repoInit.isRepoInitialized(path))) {\n    throw new errors.NotInitializedRepoError(`Repo in path ${path} is not initialized!`);\n  }\n\n  const store = new Datastore(path, {\n    extension: '',\n    createIfMissing: false\n  });\n  await store.open();\n  const version = parseInt((await store.get(versionKey)));\n  await store.close();\n  return version;\n}\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {string} path\n * @param {int} version\n * @returns {Promise<void>}\n */\n\n\nasync function setVersion(path, version) {\n  const store = new Datastore(path, {\n    extension: '',\n    createIfMissing: false\n  });\n  await store.open();\n  await store.put(versionKey, Buffer.from(String(version)));\n  await store.close();\n}\n\nexports.setVersion = setVersion;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipfs-repo-migrations/src/repo/version.js"],"names":["errors","require","repoInit","Datastore","Key","versionKey","exports","getVersion","path","isRepoInitialized","NotInitializedRepoError","store","extension","createIfMissing","open","version","parseInt","get","close","setVersion","put","Buffer","from","String"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAzB;;AAEA,MAAMG,GAAG,GAAGH,OAAO,CAAC,qBAAD,CAAP,CAA+BG,GAA3C;;AAEA,MAAMC,UAAU,GAAG,IAAID,GAAJ,CAAQ,SAAR,CAAnB;AAEAE,OAAO,CAACC,UAAR,GAAqBA,UAArB;AAEA;;;;;;;;;AAQA,eAAeA,UAAf,CAA2BC,IAA3B,EAAiC;AAC/B,MAAI,EAAE,MAAMN,QAAQ,CAACO,iBAAT,CAA2BD,IAA3B,CAAR,CAAJ,EAA+C;AAC7C,UAAM,IAAIR,MAAM,CAACU,uBAAX,CAAoC,gBAAeF,IAAK,sBAAxD,CAAN;AACD;;AAED,QAAMG,KAAK,GAAG,IAAIR,SAAJ,CAAcK,IAAd,EAAoB;AAAEI,IAAAA,SAAS,EAAE,EAAb;AAAiBC,IAAAA,eAAe,EAAE;AAAlC,GAApB,CAAd;AACA,QAAMF,KAAK,CAACG,IAAN,EAAN;AAEA,QAAMC,OAAO,GAAGC,QAAQ,EAAC,MAAML,KAAK,CAACM,GAAN,CAAUZ,UAAV,CAAP,EAAxB;AACA,QAAMM,KAAK,CAACO,KAAN,EAAN;AAEA,SAAOH,OAAP;AACD;AAED;;;;;;;;;AAOA,eAAeI,UAAf,CAA2BX,IAA3B,EAAiCO,OAAjC,EAA0C;AACxC,QAAMJ,KAAK,GAAG,IAAIR,SAAJ,CAAcK,IAAd,EAAoB;AAAEI,IAAAA,SAAS,EAAE,EAAb;AAAiBC,IAAAA,eAAe,EAAE;AAAlC,GAApB,CAAd;AACA,QAAMF,KAAK,CAACG,IAAN,EAAN;AACA,QAAMH,KAAK,CAACS,GAAN,CAAUf,UAAV,EAAsBgB,MAAM,CAACC,IAAP,CAAYC,MAAM,CAACR,OAAD,CAAlB,CAAtB,CAAN;AACA,QAAMJ,KAAK,CAACO,KAAN,EAAN;AACD;;AAEDZ,OAAO,CAACa,UAAR,GAAqBA,UAArB","sourcesContent":["'use strict'\n\nconst errors = require('../errors')\nconst repoInit = require('./init')\nconst Datastore = require('datastore-fs')\n\nconst Key = require('interface-datastore').Key\n\nconst versionKey = new Key('version')\n\nexports.getVersion = getVersion\n\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {string} path\n * @returns {Promise<int>}\n */\nasync function getVersion (path) {\n  if (!(await repoInit.isRepoInitialized(path))) {\n    throw new errors.NotInitializedRepoError(`Repo in path ${path} is not initialized!`)\n  }\n\n  const store = new Datastore(path, { extension: '', createIfMissing: false })\n  await store.open()\n\n  const version = parseInt(await store.get(versionKey))\n  await store.close()\n\n  return version\n}\n\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {string} path\n * @param {int} version\n * @returns {Promise<void>}\n */\nasync function setVersion (path, version) {\n  const store = new Datastore(path, { extension: '', createIfMissing: false })\n  await store.open()\n  await store.put(versionKey, Buffer.from(String(version)))\n  await store.close()\n}\n\nexports.setVersion = setVersion\n"]},"metadata":{},"sourceType":"script"}