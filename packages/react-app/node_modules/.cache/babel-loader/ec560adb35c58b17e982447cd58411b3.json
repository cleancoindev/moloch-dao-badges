{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\"; // This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return defaultApiKey;\n    }\n\n    if (apiKey && typeof apiKey !== \"string\") {\n      logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n    }\n\n    return apiKey;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network.name) {\n      case \"homestead\":\n        host = \"eth-mainnet.alchemyapi.io/jsonrpc/\";\n        break;\n\n      case \"ropsten\":\n        host = \"eth-ropsten.alchemyapi.io/jsonrpc/\";\n        break;\n\n      case \"rinkeby\":\n        host = \"eth-rinkeby.alchemyapi.io/jsonrpc/\";\n        break;\n\n      case \"kovan\":\n        host = \"eth-kovan.alchemyapi.io/jsonrpc/\";\n        break;\n\n      default:\n        logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n    }\n\n    return \"https:/\" + \"/\" + host + apiKey;\n  }\n\n}","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js"],"names":["Logger","version","logger","UrlJsonRpcProvider","defaultApiKey","AlchemyProvider","getApiKey","apiKey","throwArgumentError","getUrl","network","host","name","arguments"],"mappings":"AAAA;;AACA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AACA,SAASE,kBAAT,QAAmC,yBAAnC,C,CACA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG,kCAAtB;AACA,OAAO,MAAMC,eAAN,SAA8BF,kBAA9B,CAAiD;AACpD,SAAOG,SAAP,CAAiBC,MAAjB,EAAyB;AACrB,QAAIA,MAAM,IAAI,IAAd,EAAoB;AAChB,aAAOH,aAAP;AACH;;AACD,QAAIG,MAAM,IAAI,OAAQA,MAAR,KAAoB,QAAlC,EAA4C;AACxCL,MAAAA,MAAM,CAACM,kBAAP,CAA0B,gBAA1B,EAA4C,QAA5C,EAAsDD,MAAtD;AACH;;AACD,WAAOA,MAAP;AACH;;AACD,SAAOE,MAAP,CAAcC,OAAd,EAAuBH,MAAvB,EAA+B;AAC3B,QAAII,IAAI,GAAG,IAAX;;AACA,YAAQD,OAAO,CAACE,IAAhB;AACI,WAAK,WAAL;AACID,QAAAA,IAAI,GAAG,oCAAP;AACA;;AACJ,WAAK,SAAL;AACIA,QAAAA,IAAI,GAAG,oCAAP;AACA;;AACJ,WAAK,SAAL;AACIA,QAAAA,IAAI,GAAG,oCAAP;AACA;;AACJ,WAAK,OAAL;AACIA,QAAAA,IAAI,GAAG,kCAAP;AACA;;AACJ;AACIT,QAAAA,MAAM,CAACM,kBAAP,CAA0B,qBAA1B,EAAiD,SAAjD,EAA4DK,SAAS,CAAC,CAAD,CAArE;AAdR;;AAgBA,WAAQ,YAAY,GAAZ,GAAkBF,IAAlB,GAAyBJ,MAAjC;AACH;;AA7BmD","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        if (apiKey == null) {\n            return defaultApiKey;\n        }\n        if (apiKey && typeof (apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/jsonrpc/\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.alchemyapi.io/jsonrpc/\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.alchemyapi.io/jsonrpc/\";\n                break;\n            case \"kovan\":\n                host = \"eth-kovan.alchemyapi.io/jsonrpc/\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return (\"https:/\" + \"/\" + host + apiKey);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}