{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar hash = __importStar(require(\"hash.js\"));\n\nvar bytes_1 = require(\"@ethersproject/bytes\");\n\nvar logger_1 = require(\"@ethersproject/logger\");\n\nvar _version_1 = require(\"./_version\");\n\nvar logger = new logger_1.Logger(_version_1.version);\nvar SupportedAlgorithm;\n\n(function (SupportedAlgorithm) {\n  SupportedAlgorithm[\"sha256\"] = \"sha256\";\n  SupportedAlgorithm[\"sha512\"] = \"sha512\";\n})(SupportedAlgorithm = exports.SupportedAlgorithm || (exports.SupportedAlgorithm = {}));\n\n;\n\nfunction ripemd160(data) {\n  return \"0x\" + hash.ripemd160().update(bytes_1.arrayify(data)).digest(\"hex\");\n}\n\nexports.ripemd160 = ripemd160;\n\nfunction sha256(data) {\n  return \"0x\" + hash.sha256().update(bytes_1.arrayify(data)).digest(\"hex\");\n}\n\nexports.sha256 = sha256;\n\nfunction sha512(data) {\n  return \"0x\" + hash.sha512().update(bytes_1.arrayify(data)).digest(\"hex\");\n}\n\nexports.sha512 = sha512;\n\nfunction computeHmac(algorithm, key, data) {\n  if (!SupportedAlgorithm[algorithm]) {\n    logger.throwError(\"unsupported algorithm \" + algorithm, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"hmac\",\n      algorithm: algorithm\n    });\n  }\n\n  return \"0x\" + hash.hmac(hash[algorithm], bytes_1.arrayify(key)).update(bytes_1.arrayify(data)).digest(\"hex\");\n}\n\nexports.computeHmac = computeHmac;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/@ethersproject/sha2/lib/browser.js"],"names":["__importStar","mod","__esModule","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","hash","require","bytes_1","logger_1","_version_1","logger","Logger","version","SupportedAlgorithm","ripemd160","data","update","arrayify","digest","sha256","sha512","computeHmac","algorithm","key","throwError","errors","UNSUPPORTED_OPERATION","operation","hmac"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar hash = __importStar(require(\"hash.js\"));\nvar bytes_1 = require(\"@ethersproject/bytes\");\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nvar logger = new logger_1.Logger(_version_1.version);\nvar SupportedAlgorithm;\n(function (SupportedAlgorithm) {\n    SupportedAlgorithm[\"sha256\"] = \"sha256\";\n    SupportedAlgorithm[\"sha512\"] = \"sha512\";\n})(SupportedAlgorithm = exports.SupportedAlgorithm || (exports.SupportedAlgorithm = {}));\n;\nfunction ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(bytes_1.arrayify(data)).digest(\"hex\"));\n}\nexports.ripemd160 = ripemd160;\nfunction sha256(data) {\n    return \"0x\" + (hash.sha256().update(bytes_1.arrayify(data)).digest(\"hex\"));\n}\nexports.sha256 = sha256;\nfunction sha512(data) {\n    return \"0x\" + (hash.sha512().update(bytes_1.arrayify(data)).digest(\"hex\"));\n}\nexports.sha512 = sha512;\nfunction computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], bytes_1.arrayify(key)).update(bytes_1.arrayify(data)).digest(\"hex\");\n}\nexports.computeHmac = computeHmac;\n"]},"metadata":{},"sourceType":"script"}