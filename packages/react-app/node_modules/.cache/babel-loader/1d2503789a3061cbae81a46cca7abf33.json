{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst CONSTANTS = require('./constants');\n\nconst logger = require('./utils').logger;\n\nconst unwantEvent = c => `unwant:${c}`;\n\nconst blockEvent = c => `block:${c}`;\n/**\n * Internal module used to track events about incoming blocks,\n * wants and unwants.\n *\n * @param {PeerId} peerId\n * @private\n */\n\n\nclass Notifications extends EventEmitter {\n  constructor(peerId) {\n    super();\n    this.setMaxListeners(CONSTANTS.maxListeners);\n    this._log = logger(peerId, 'notif');\n    this._unwantListeners = {};\n    this._blockListeners = {};\n  }\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {Block} block\n   * @return {void}\n   */\n\n\n  hasBlock(block) {\n    const cidStr = block.cid.toString('base58btc');\n    const str = `block:${cidStr}`;\n\n    this._log(str);\n\n    this.emit(str, block);\n  }\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @returns {Promise<Block>}\n   */\n\n\n  wantBlock(cid) {\n    const cidStr = cid.toString('base58btc');\n\n    this._log(`wantBlock:${cidStr}`);\n\n    return new Promise((resolve, reject) => {\n      this._unwantListeners[cidStr] = () => {\n        this._log(`manual unwant: ${cidStr}`);\n\n        this._cleanup(cidStr);\n\n        resolve();\n      };\n\n      this._blockListeners[cidStr] = block => {\n        this._cleanup(cidStr);\n\n        resolve(block);\n      };\n\n      this.once(unwantEvent(cidStr), this._unwantListeners[cidStr]);\n      this.once(blockEvent(cidStr), this._blockListeners[cidStr]);\n    });\n  }\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n\n\n  unwantBlock(cid) {\n    const str = `unwant:${cid.toString('base58btc')}`;\n\n    this._log(str);\n\n    this.emit(str);\n  }\n  /**\n   * Internal method to clean up once a block was received or unwanted.\n   *\n   * @private\n   * @param  {string} cidStr\n   * @returns {void}\n   */\n\n\n  _cleanup(cidStr) {\n    if (this._unwantListeners[cidStr]) {\n      this.removeListener(unwantEvent(cidStr), this._unwantListeners[cidStr]);\n      delete this._unwantListeners[cidStr];\n    }\n\n    if (this._blockListeners[cidStr]) {\n      this.removeListener(blockEvent(cidStr), this._blockListeners[cidStr]);\n      delete this._blockListeners[cidStr];\n    }\n  }\n\n}\n\nmodule.exports = Notifications;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipfs-bitswap/src/notifications.js"],"names":["EventEmitter","require","CONSTANTS","logger","unwantEvent","c","blockEvent","Notifications","constructor","peerId","setMaxListeners","maxListeners","_log","_unwantListeners","_blockListeners","hasBlock","block","cidStr","cid","toString","str","emit","wantBlock","Promise","resolve","reject","_cleanup","once","unwantBlock","removeListener","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAAvC;;AAEA,MAAME,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,SAAD,CAAP,CAAmBE,MAAlC;;AAEA,MAAMC,WAAW,GAAIC,CAAD,IAAQ,UAASA,CAAE,EAAvC;;AACA,MAAMC,UAAU,GAAID,CAAD,IAAQ,SAAQA,CAAE,EAArC;AAEA;;;;;;;;;AAOA,MAAME,aAAN,SAA4BP,YAA5B,CAAyC;AACvCQ,EAAAA,WAAW,CAAEC,MAAF,EAAU;AACnB;AAEA,SAAKC,eAAL,CAAqBR,SAAS,CAACS,YAA/B;AAEA,SAAKC,IAAL,GAAYT,MAAM,CAACM,MAAD,EAAS,OAAT,CAAlB;AAEA,SAAKI,gBAAL,GAAwB,EAAxB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACD;AAED;;;;;;;;AAMAC,EAAAA,QAAQ,CAAEC,KAAF,EAAS;AACf,UAAMC,MAAM,GAAGD,KAAK,CAACE,GAAN,CAAUC,QAAV,CAAmB,WAAnB,CAAf;AACA,UAAMC,GAAG,GAAI,SAAQH,MAAO,EAA5B;;AACA,SAAKL,IAAL,CAAUQ,GAAV;;AACA,SAAKC,IAAL,CAAUD,GAAV,EAAeJ,KAAf;AACD;AAED;;;;;;;;;;;AASAM,EAAAA,SAAS,CAAEJ,GAAF,EAAO;AACd,UAAMD,MAAM,GAAGC,GAAG,CAACC,QAAJ,CAAa,WAAb,CAAf;;AACA,SAAKP,IAAL,CAAW,aAAYK,MAAO,EAA9B;;AAEA,WAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKZ,gBAAL,CAAsBI,MAAtB,IAAgC,MAAM;AACpC,aAAKL,IAAL,CAAW,kBAAiBK,MAAO,EAAnC;;AACA,aAAKS,QAAL,CAAcT,MAAd;;AACAO,QAAAA,OAAO;AACR,OAJD;;AAMA,WAAKV,eAAL,CAAqBG,MAArB,IAAgCD,KAAD,IAAW;AACxC,aAAKU,QAAL,CAAcT,MAAd;;AACAO,QAAAA,OAAO,CAACR,KAAD,CAAP;AACD,OAHD;;AAKA,WAAKW,IAAL,CACEvB,WAAW,CAACa,MAAD,CADb,EAEE,KAAKJ,gBAAL,CAAsBI,MAAtB,CAFF;AAIA,WAAKU,IAAL,CACErB,UAAU,CAACW,MAAD,CADZ,EAEE,KAAKH,eAAL,CAAqBG,MAArB,CAFF;AAID,KApBM,CAAP;AAqBD;AAED;;;;;;;;AAMAW,EAAAA,WAAW,CAAEV,GAAF,EAAO;AAChB,UAAME,GAAG,GAAI,UAASF,GAAG,CAACC,QAAJ,CAAa,WAAb,CAA0B,EAAhD;;AACA,SAAKP,IAAL,CAAUQ,GAAV;;AACA,SAAKC,IAAL,CAAUD,GAAV;AACD;AAED;;;;;;;;;AAOAM,EAAAA,QAAQ,CAAET,MAAF,EAAU;AAChB,QAAI,KAAKJ,gBAAL,CAAsBI,MAAtB,CAAJ,EAAmC;AACjC,WAAKY,cAAL,CACEzB,WAAW,CAACa,MAAD,CADb,EAEE,KAAKJ,gBAAL,CAAsBI,MAAtB,CAFF;AAIA,aAAO,KAAKJ,gBAAL,CAAsBI,MAAtB,CAAP;AACD;;AAED,QAAI,KAAKH,eAAL,CAAqBG,MAArB,CAAJ,EAAkC;AAChC,WAAKY,cAAL,CACEvB,UAAU,CAACW,MAAD,CADZ,EAEE,KAAKH,eAAL,CAAqBG,MAArB,CAFF;AAIA,aAAO,KAAKH,eAAL,CAAqBG,MAArB,CAAP;AACD;AACF;;AAhGsC;;AAmGzCa,MAAM,CAACC,OAAP,GAAiBxB,aAAjB","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events').EventEmitter\n\nconst CONSTANTS = require('./constants')\nconst logger = require('./utils').logger\n\nconst unwantEvent = (c) => `unwant:${c}`\nconst blockEvent = (c) => `block:${c}`\n\n/**\n * Internal module used to track events about incoming blocks,\n * wants and unwants.\n *\n * @param {PeerId} peerId\n * @private\n */\nclass Notifications extends EventEmitter {\n  constructor (peerId) {\n    super()\n\n    this.setMaxListeners(CONSTANTS.maxListeners)\n\n    this._log = logger(peerId, 'notif')\n\n    this._unwantListeners = {}\n    this._blockListeners = {}\n  }\n\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {Block} block\n   * @return {void}\n   */\n  hasBlock (block) {\n    const cidStr = block.cid.toString('base58btc')\n    const str = `block:${cidStr}`\n    this._log(str)\n    this.emit(str, block)\n  }\n\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @returns {Promise<Block>}\n   */\n  wantBlock (cid) {\n    const cidStr = cid.toString('base58btc')\n    this._log(`wantBlock:${cidStr}`)\n\n    return new Promise((resolve, reject) => {\n      this._unwantListeners[cidStr] = () => {\n        this._log(`manual unwant: ${cidStr}`)\n        this._cleanup(cidStr)\n        resolve()\n      }\n\n      this._blockListeners[cidStr] = (block) => {\n        this._cleanup(cidStr)\n        resolve(block)\n      }\n\n      this.once(\n        unwantEvent(cidStr),\n        this._unwantListeners[cidStr]\n      )\n      this.once(\n        blockEvent(cidStr),\n        this._blockListeners[cidStr]\n      )\n    })\n  }\n\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n  unwantBlock (cid) {\n    const str = `unwant:${cid.toString('base58btc')}`\n    this._log(str)\n    this.emit(str)\n  }\n\n  /**\n   * Internal method to clean up once a block was received or unwanted.\n   *\n   * @private\n   * @param  {string} cidStr\n   * @returns {void}\n   */\n  _cleanup (cidStr) {\n    if (this._unwantListeners[cidStr]) {\n      this.removeListener(\n        unwantEvent(cidStr),\n        this._unwantListeners[cidStr]\n      )\n      delete this._unwantListeners[cidStr]\n    }\n\n    if (this._blockListeners[cidStr]) {\n      this.removeListener(\n        blockEvent(cidStr),\n        this._blockListeners[cidStr]\n      )\n      delete this._blockListeners[cidStr]\n    }\n  }\n}\n\nmodule.exports = Notifications\n"]},"metadata":{},"sourceType":"script"}