{"ast":null,"code":"'use strict';\n\nconst callbackify = require('callbackify');\n\nconst OFFLINE_ERROR = require('../utils').OFFLINE_ERROR;\n\nconst errcode = require('err-code');\n\nmodule.exports = function pubsub(self) {\n  function checkOnlineAndEnabled() {\n    if (!self.isOnline()) {\n      throw errcode(new Error(OFFLINE_ERROR), 'ERR_OFFLINE');\n    }\n\n    if (!self.libp2p.pubsub) {\n      throw errcode(new Error('pubsub is not enabled'), 'ERR_PUBSUB_DISABLED');\n    }\n  }\n\n  return {\n    subscribe: (topic, handler, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (typeof callback === 'function') {\n        try {\n          checkOnlineAndEnabled();\n        } catch (err) {\n          return callback(err);\n        }\n\n        self.libp2p.pubsub.subscribe(topic, handler, options, callback);\n        return;\n      }\n\n      try {\n        checkOnlineAndEnabled();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n\n      return self.libp2p.pubsub.subscribe(topic, handler, options);\n    },\n    unsubscribe: (topic, handler, callback) => {\n      if (typeof callback === 'function') {\n        try {\n          checkOnlineAndEnabled();\n        } catch (err) {\n          return callback(err);\n        }\n\n        self.libp2p.pubsub.unsubscribe(topic, handler, callback);\n        return;\n      }\n\n      try {\n        checkOnlineAndEnabled();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n\n      return self.libp2p.pubsub.unsubscribe(topic, handler);\n    },\n    publish: callbackify(async (topic, data) => {\n      // eslint-disable-line require-await\n      checkOnlineAndEnabled();\n      await self.libp2p.pubsub.publish(topic, data);\n    }),\n    ls: callbackify(async () => {\n      // eslint-disable-line require-await\n      checkOnlineAndEnabled();\n      return self.libp2p.pubsub.ls();\n    }),\n    peers: callbackify(async topic => {\n      // eslint-disable-line require-await\n      checkOnlineAndEnabled();\n      return self.libp2p.pubsub.peers(topic);\n    }),\n\n    setMaxListeners(n) {\n      checkOnlineAndEnabled();\n      self.libp2p.pubsub.setMaxListeners(n);\n    }\n\n  };\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs/src/core/components/pubsub.js"],"names":["callbackify","require","OFFLINE_ERROR","errcode","module","exports","pubsub","self","checkOnlineAndEnabled","isOnline","Error","libp2p","subscribe","topic","handler","options","callback","err","Promise","reject","unsubscribe","publish","data","ls","peers","setMaxListeners","n"],"mappings":"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","sourcesContent":["'use strict'\n\nconst callbackify = require('callbackify')\nconst OFFLINE_ERROR = require('../utils').OFFLINE_ERROR\nconst errcode = require('err-code')\n\nmodule.exports = function pubsub (self) {\n  function checkOnlineAndEnabled () {\n    if (!self.isOnline()) {\n      throw errcode(new Error(OFFLINE_ERROR), 'ERR_OFFLINE')\n    }\n\n    if (!self.libp2p.pubsub) {\n      throw errcode(new Error('pubsub is not enabled'), 'ERR_PUBSUB_DISABLED')\n    }\n  }\n\n  return {\n    subscribe: (topic, handler, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      if (typeof callback === 'function') {\n        try {\n          checkOnlineAndEnabled()\n        } catch (err) {\n          return callback(err)\n        }\n\n        self.libp2p.pubsub.subscribe(topic, handler, options, callback)\n        return\n      }\n\n      try {\n        checkOnlineAndEnabled()\n      } catch (err) {\n        return Promise.reject(err)\n      }\n\n      return self.libp2p.pubsub.subscribe(topic, handler, options)\n    },\n\n    unsubscribe: (topic, handler, callback) => {\n      if (typeof callback === 'function') {\n        try {\n          checkOnlineAndEnabled()\n        } catch (err) {\n          return callback(err)\n        }\n\n        self.libp2p.pubsub.unsubscribe(topic, handler, callback)\n        return\n      }\n\n      try {\n        checkOnlineAndEnabled()\n      } catch (err) {\n        return Promise.reject(err)\n      }\n\n      return self.libp2p.pubsub.unsubscribe(topic, handler)\n    },\n\n    publish: callbackify(async (topic, data) => { // eslint-disable-line require-await\n      checkOnlineAndEnabled()\n\n      await self.libp2p.pubsub.publish(topic, data)\n    }),\n\n    ls: callbackify(async () => { // eslint-disable-line require-await\n      checkOnlineAndEnabled()\n\n      return self.libp2p.pubsub.ls()\n    }),\n\n    peers: callbackify(async (topic) => { // eslint-disable-line require-await\n      checkOnlineAndEnabled()\n\n      return self.libp2p.pubsub.peers(topic)\n    }),\n\n    setMaxListeners (n) {\n      checkOnlineAndEnabled()\n\n      self.libp2p.pubsub.setMaxListeners(n)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}