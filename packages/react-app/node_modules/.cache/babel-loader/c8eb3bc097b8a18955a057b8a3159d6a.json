{"ast":null,"code":"const DID_PLACEHOLDER = 'GENESIS';\n/**\n * A class for creating ipfs based DID Documents.\n * Based on the DID spec: https://w3c-ccg.github.io/did-spec/\n */\n\nclass DidDocument {\n  /**\n   * Create a new DID Document.\n   *\n   * @param     {Object}        ipfs            An js-ipfs instance\n   * @param     {String}        method          The name of the DID Method\n   * @return    {DidDocument}                   self\n   */\n  constructor(ipfs, method) {\n    this._ipfs = ipfs;\n    this._content = {\n      id: `did:${method}:${DID_PLACEHOLDER}`\n    };\n  }\n\n  get DID() {\n    if (this._content.id.includes(DID_PLACEHOLDER)) {\n      throw new Error('DID is not available before commit');\n    }\n\n    return this._content.id;\n  }\n  /**\n   * Load an already existing DID Document.\n   *\n   * @param     {Object}        ipfs            An js-ipfs instance\n   * @param     {String}        documentCid     The CID of the document\n   * @return    {Promise<DidDocument>}                   self\n   */\n\n\n  static async load(ipfs, documentCid) {\n    const doc = new DidDocument(ipfs);\n    doc._content = await DidDocument.cidToDocument(ipfs, documentCid);\n    doc._content.previousDocument = {\n      '/': documentCid.toString()\n    };\n    return doc;\n  }\n  /**\n   * Add a new public key\n   *\n   * @param     {String}        id              The id of the key, e.g. \"key1\"\n   * @param     {String}        type            The type of the key\n   * @param     {String}        encoding        The encoding of the key\n   * @param     {String}        key             The encoded public key\n   * @param     {String}        owner           The owner of the key (optional)\n   */\n\n\n  addPublicKey(id, type, encoding, key, owner) {\n    if (!this._content.publicKey) {\n      this._content.publicKey = [];\n    }\n\n    let entry = {\n      id: `${this._content.id}#${id}`,\n      type\n    };\n    entry[encoding] = key;\n\n    if (owner) {\n      entry.owner = owner;\n    }\n\n    this._content.publicKey.push(entry);\n  }\n  /**\n   * Remove a public key\n   *\n   * @param     {String}        id              The id of the key, e.g. \"key1\"\n   */\n\n\n  removePublicKey(id) {\n    const idx = this._content.publicKey.findIndex(e => e.id.endsWith(id));\n\n    this._content.publicKey.splice(idx, 1);\n\n    if (!this._content.publicKey.length) {\n      delete this._content.publicKey;\n    }\n  }\n  /**\n   * Add a new authentication\n   *\n   * @param     {String}        type            The type of the authentication\n   * @param     {String}        id              The id of the key to be used, e.g. \"key1\"\n   */\n\n\n  addAuthentication(type, id) {\n    if (!this._content.authentication) {\n      this._content.authentication = [];\n    }\n\n    this._content.authentication.push({\n      type,\n      publicKey: `${this._content.id}#${id}`\n    });\n  }\n  /**\n   * Remove an authentication\n   *\n   * @param     {String}        id              The id of the key, e.g. \"key1\"\n   */\n\n\n  removeAuthentication(id) {\n    const idx = this._content.authentication.findIndex(e => e.publicKey.endsWith(id));\n\n    this._content.authentication.splice(idx, 1);\n\n    if (!this._content.authentication.length) {\n      delete this._content.authentication;\n    }\n  }\n  /**\n   * Add a new service\n   *\n   * @param     {String}        id                  The id of the key to be used, e.g. \"key1\"\n   * @param     {String}        type                The type of the service\n   * @param     {String}        serviceEndpoint     The endpoint of the service\n   * @param     {Object}        additionalFields    Any additional fields (optional)\n   */\n\n\n  addService(id, type, serviceEndpoint, additionalFields) {\n    if (!this._content.service) {\n      this._content.service = [];\n    }\n\n    this._content.service.push(Object.assign({\n      id: `${this._content.id};${id}`,\n      type,\n      serviceEndpoint\n    }, additionalFields));\n  }\n  /**\n   * Remove a service\n   *\n   * @param     {String}        id              The id of the key, e.g. \"key1\"\n   */\n\n\n  removeService(id) {\n    const idx = this._content.service.findIndex(e => e.id.endsWith(id));\n\n    this._content.service.splice(idx, 1);\n\n    if (!this._content.service.length) {\n      delete this._content.service;\n    }\n  }\n  /**\n   * Set the revocationMethod. This can be of any js object\n   * and is determined by the implementer of a revocation module.\n   *\n   * @param     {Object}        methodDescriptor    the object that defines the revocation method\n   */\n\n\n  setRevocationMethod(methodDescriptor) {\n    this._content.revocationMethod = methodDescriptor;\n  }\n  /**\n   * Add a new property\n   *\n   * @param     {String}        propName            The name of the property\n   * @param     {Object}        propValue           The value of the property\n   */\n\n\n  addCustomProperty(propName, propValue) {\n    this._content[propName] = propValue;\n  }\n  /**\n   * Remove a property\n   *\n   * @param     {String}        propName            The name of the property\n   */\n\n\n  removeCustomProperty(propName) {\n    delete this._content[propName];\n  }\n  /**\n   * Commit all changes and create a new ipfs dag object.\n   *\n   * @param     {Object}        opts                Optional parameters\n   * @param     {Boolean}       noTimestamp         Don't use timestamps if true\n   *\n   * @return    {Promise<CID>}                   The CID of the object\n   */\n\n\n  async commit(opts = {}) {\n    if (!this._content.created) {\n      this._content['@context'] = 'https://w3id.org/did/v1';\n\n      if (!opts.noTimestamp) {\n        this._content.created = new Date(Date.now()).toISOString();\n      }\n    } else if (!opts.noTimestamp) {\n      this._content.updated = new Date(Date.now()).toISOString();\n    }\n\n    const cid = await this._ipfs.dag.put(this._content, {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256'\n    }); // set up for further changes:\n\n    this._content = await DidDocument.cidToDocument(this._ipfs, cid);\n    this._content.previousDocument = {\n      '/': cid.toString()\n    };\n    return cid;\n  }\n  /**\n   * Returns the DID document of a document CID\n   *\n   * @param     {Object}        ipfs            An js-ipfs instance\n   * @param     {String}        documentCid     The CID of the document\n   * @return    {Promise<Object>}                        The DID document as a js object\n   */\n\n\n  static async cidToDocument(ipfs, documentCid) {\n    let doc = (await ipfs.dag.get(documentCid)).value; // If genesis document replace placeholder identifier with cid\n\n    if (doc.id.includes(DID_PLACEHOLDER)) {\n      const re = new RegExp(DID_PLACEHOLDER, 'gi');\n      doc.id = doc.id.replace(re, documentCid);\n\n      if (doc.publicKey) {\n        doc.publicKey = JSON.parse(JSON.stringify(doc.publicKey).replace(re, documentCid));\n      }\n\n      if (doc.authentication) {\n        doc.authentication = JSON.parse(JSON.stringify(doc.authentication).replace(re, documentCid));\n      }\n\n      if (doc.service) {\n        doc.service = JSON.parse(JSON.stringify(doc.service).replace(re, documentCid));\n      }\n    }\n\n    if (doc.previousDocument) {\n      // make CID human readable\n      doc.previousDocument = {\n        '/': doc.previousDocument.toString()\n      };\n    }\n\n    return doc;\n  }\n\n}\n\nmodule.exports = DidDocument;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipfs-did-document/index.js"],"names":["DID_PLACEHOLDER","DidDocument","constructor","ipfs","method","_ipfs","_content","id","DID","includes","Error","load","documentCid","doc","cidToDocument","previousDocument","toString","addPublicKey","type","encoding","key","owner","publicKey","entry","push","removePublicKey","idx","findIndex","e","endsWith","splice","length","addAuthentication","authentication","removeAuthentication","addService","serviceEndpoint","additionalFields","service","Object","assign","removeService","setRevocationMethod","methodDescriptor","revocationMethod","addCustomProperty","propName","propValue","removeCustomProperty","commit","opts","created","noTimestamp","Date","now","toISOString","updated","cid","dag","put","format","hashAlg","get","value","re","RegExp","replace","JSON","parse","stringify","module","exports"],"mappings":"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","sourcesContent":["const DID_PLACEHOLDER = 'GENESIS'\n\n/**\n * A class for creating ipfs based DID Documents.\n * Based on the DID spec: https://w3c-ccg.github.io/did-spec/\n */\nclass DidDocument {\n  /**\n   * Create a new DID Document.\n   *\n   * @param     {Object}        ipfs            An js-ipfs instance\n   * @param     {String}        method          The name of the DID Method\n   * @return    {DidDocument}                   self\n   */\n  constructor (ipfs, method) {\n    this._ipfs = ipfs\n    this._content = {\n      id: `did:${method}:${DID_PLACEHOLDER}`\n    }\n  }\n\n  get DID () {\n    if (this._content.id.includes(DID_PLACEHOLDER)) {\n      throw new Error('DID is not available before commit')\n    }\n    return this._content.id\n  }\n\n  /**\n   * Load an already existing DID Document.\n   *\n   * @param     {Object}        ipfs            An js-ipfs instance\n   * @param     {String}        documentCid     The CID of the document\n   * @return    {Promise<DidDocument>}                   self\n   */\n  static async load (ipfs, documentCid) {\n    const doc = new DidDocument(ipfs)\n    doc._content = await DidDocument.cidToDocument(ipfs, documentCid)\n    doc._content.previousDocument = { '/': documentCid.toString() }\n    return doc\n  }\n\n  /**\n   * Add a new public key\n   *\n   * @param     {String}        id              The id of the key, e.g. \"key1\"\n   * @param     {String}        type            The type of the key\n   * @param     {String}        encoding        The encoding of the key\n   * @param     {String}        key             The encoded public key\n   * @param     {String}        owner           The owner of the key (optional)\n   */\n  addPublicKey (id, type, encoding, key, owner) {\n    if (!this._content.publicKey) {\n      this._content.publicKey = []\n    }\n    let entry = {\n      id: `${this._content.id}#${id}`,\n      type\n    }\n    entry[encoding] = key\n    if (owner) {\n      entry.owner = owner\n    }\n    this._content.publicKey.push(entry)\n  }\n\n  /**\n   * Remove a public key\n   *\n   * @param     {String}        id              The id of the key, e.g. \"key1\"\n   */\n  removePublicKey (id) {\n    const idx = this._content.publicKey.findIndex(e => e.id.endsWith(id))\n    this._content.publicKey.splice(idx, 1)\n    if (!this._content.publicKey.length) {\n      delete this._content.publicKey\n    }\n  }\n\n  /**\n   * Add a new authentication\n   *\n   * @param     {String}        type            The type of the authentication\n   * @param     {String}        id              The id of the key to be used, e.g. \"key1\"\n   */\n  addAuthentication (type, id) {\n    if (!this._content.authentication) {\n      this._content.authentication = []\n    }\n    this._content.authentication.push({\n      type,\n      publicKey: `${this._content.id}#${id}`\n    })\n  }\n\n  /**\n   * Remove an authentication\n   *\n   * @param     {String}        id              The id of the key, e.g. \"key1\"\n   */\n  removeAuthentication (id) {\n    const idx = this._content.authentication.findIndex(e => e.publicKey.endsWith(id))\n    this._content.authentication.splice(idx, 1)\n    if (!this._content.authentication.length) {\n      delete this._content.authentication\n    }\n  }\n\n  /**\n   * Add a new service\n   *\n   * @param     {String}        id                  The id of the key to be used, e.g. \"key1\"\n   * @param     {String}        type                The type of the service\n   * @param     {String}        serviceEndpoint     The endpoint of the service\n   * @param     {Object}        additionalFields    Any additional fields (optional)\n   */\n  addService (id, type, serviceEndpoint, additionalFields) {\n    if (!this._content.service) {\n      this._content.service = []\n    }\n    this._content.service.push(Object.assign({\n      id: `${this._content.id};${id}`,\n      type,\n      serviceEndpoint\n    }, additionalFields))\n  }\n\n  /**\n   * Remove a service\n   *\n   * @param     {String}        id              The id of the key, e.g. \"key1\"\n   */\n  removeService (id) {\n    const idx = this._content.service.findIndex(e => e.id.endsWith(id))\n    this._content.service.splice(idx, 1)\n    if (!this._content.service.length) {\n      delete this._content.service\n    }\n  }\n\n  /**\n   * Set the revocationMethod. This can be of any js object\n   * and is determined by the implementer of a revocation module.\n   *\n   * @param     {Object}        methodDescriptor    the object that defines the revocation method\n   */\n  setRevocationMethod (methodDescriptor) {\n    this._content.revocationMethod = methodDescriptor\n  }\n\n  /**\n   * Add a new property\n   *\n   * @param     {String}        propName            The name of the property\n   * @param     {Object}        propValue           The value of the property\n   */\n  addCustomProperty (propName, propValue) {\n    this._content[propName] = propValue\n  }\n\n  /**\n   * Remove a property\n   *\n   * @param     {String}        propName            The name of the property\n   */\n  removeCustomProperty (propName) {\n    delete this._content[propName]\n  }\n\n  /**\n   * Commit all changes and create a new ipfs dag object.\n   *\n   * @param     {Object}        opts                Optional parameters\n   * @param     {Boolean}       noTimestamp         Don't use timestamps if true\n   *\n   * @return    {Promise<CID>}                   The CID of the object\n   */\n  async commit (opts = {}) {\n    if (!this._content.created) {\n      this._content['@context'] = 'https://w3id.org/did/v1'\n      if (!opts.noTimestamp) {\n        this._content.created = (new Date(Date.now())).toISOString()\n      }\n    } else if (!opts.noTimestamp) {\n      this._content.updated = (new Date(Date.now())).toISOString()\n    }\n    const cid = await this._ipfs.dag.put(this._content, { format: 'dag-cbor', hashAlg: 'sha2-256' })\n    // set up for further changes:\n    this._content = await DidDocument.cidToDocument(this._ipfs, cid)\n    this._content.previousDocument = { '/': cid.toString() }\n    return cid\n  }\n\n  /**\n   * Returns the DID document of a document CID\n   *\n   * @param     {Object}        ipfs            An js-ipfs instance\n   * @param     {String}        documentCid     The CID of the document\n   * @return    {Promise<Object>}                        The DID document as a js object\n   */\n  static async cidToDocument (ipfs, documentCid) {\n    let doc = (await ipfs.dag.get(documentCid)).value\n    // If genesis document replace placeholder identifier with cid\n    if (doc.id.includes(DID_PLACEHOLDER)) {\n      const re = new RegExp(DID_PLACEHOLDER, 'gi')\n      doc.id = doc.id.replace(re, documentCid)\n      if (doc.publicKey) {\n        doc.publicKey = JSON.parse(JSON.stringify(doc.publicKey).replace(re, documentCid))\n      }\n      if (doc.authentication) {\n        doc.authentication = JSON.parse(JSON.stringify(doc.authentication).replace(re, documentCid))\n      }\n      if (doc.service) {\n        doc.service = JSON.parse(JSON.stringify(doc.service).replace(re, documentCid))\n      }\n    }\n    if (doc.previousDocument) {\n      // make CID human readable\n      doc.previousDocument = { '/': doc.previousDocument.toString() }\n    }\n    return doc\n  }\n}\n\nmodule.exports = DidDocument\n"]},"metadata":{},"sourceType":"script"}