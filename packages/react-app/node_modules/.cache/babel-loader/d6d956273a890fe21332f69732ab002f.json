{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst OFFLINE_ERROR = require('../utils').OFFLINE_ERROR;\n\nconst PeerId = require('peer-id');\n\nconst pull = require('pull-stream');\n\nconst Pushable = require('pull-pushable');\n\nconst log = debug('ipfs:pingPullStream');\nlog.error = debug('ipfs:pingPullStream:error');\n\nmodule.exports = function pingPullStream(self) {\n  return (peerId, opts) => {\n    if (!self.isOnline()) {\n      return pull.error(new Error(OFFLINE_ERROR));\n    }\n\n    opts = Object.assign({\n      count: 10\n    }, opts);\n    const source = Pushable();\n    getPeer(self.libp2p, source, peerId, (err, peer) => {\n      if (err) {\n        log.error(err);\n        source.end(err);\n        return;\n      }\n\n      runPing(self.libp2p, source, opts.count, peer, err => {\n        if (err) {\n          log.error(err);\n          source.push(getPacket({\n            success: false,\n            text: err.toString()\n          }));\n          source.end();\n        }\n      });\n    });\n    return source;\n  };\n};\n\nfunction getPacket(msg) {\n  // Default msg\n  const basePacket = {\n    success: true,\n    time: 0,\n    text: ''\n  };\n  return Object.assign(basePacket, msg);\n}\n\nfunction getPeer(libp2pNode, statusStream, peerIdStr, cb) {\n  let peerId;\n\n  try {\n    peerId = PeerId.createFromB58String(peerIdStr);\n  } catch (err) {\n    return cb(err);\n  }\n\n  let peerInfo;\n\n  try {\n    peerInfo = libp2pNode.peerBook.get(peerId);\n  } catch (err) {\n    log('Peer not found in peer book, trying peer routing'); // Share lookup status just as in the go implemmentation\n\n    statusStream.push(getPacket({\n      text: `Looking up peer ${peerIdStr}`\n    }));\n    return libp2pNode.peerRouting.findPeer(peerId, cb);\n  }\n\n  cb(null, peerInfo);\n}\n\nfunction runPing(libp2pNode, statusStream, count, peer, cb) {\n  libp2pNode.ping(peer, (err, p) => {\n    if (err) {\n      return cb(err);\n    }\n\n    let packetCount = 0;\n    let totalTime = 0;\n    statusStream.push(getPacket({\n      text: `PING ${peer.id.toB58String()}`\n    }));\n    p.on('ping', time => {\n      statusStream.push(getPacket({\n        time\n      }));\n      totalTime += time;\n      packetCount++;\n\n      if (packetCount >= count) {\n        const average = totalTime / count;\n        p.stop();\n        statusStream.push(getPacket({\n          text: `Average latency: ${average}ms`\n        }));\n        statusStream.end();\n      }\n    });\n    p.on('error', err => {\n      log.error(err);\n      p.stop();\n      cb(err);\n    });\n    p.start();\n  });\n}","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs/src/core/components/ping-pull-stream.js"],"names":["debug","require","OFFLINE_ERROR","PeerId","pull","Pushable","log","error","module","exports","pingPullStream","self","peerId","opts","isOnline","Error","Object","assign","count","source","getPeer","libp2p","err","peer","end","runPing","push","getPacket","success","text","toString","msg","basePacket","time","libp2pNode","statusStream","peerIdStr","cb","createFromB58String","peerInfo","peerBook","get","peerRouting","findPeer","ping","p","packetCount","totalTime","id","toB58String","on","average","stop","start"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst OFFLINE_ERROR = require('../utils').OFFLINE_ERROR\nconst PeerId = require('peer-id')\nconst pull = require('pull-stream')\nconst Pushable = require('pull-pushable')\n\nconst log = debug('ipfs:pingPullStream')\nlog.error = debug('ipfs:pingPullStream:error')\n\nmodule.exports = function pingPullStream (self) {\n  return (peerId, opts) => {\n    if (!self.isOnline()) {\n      return pull.error(new Error(OFFLINE_ERROR))\n    }\n\n    opts = Object.assign({ count: 10 }, opts)\n\n    const source = Pushable()\n\n    getPeer(self.libp2p, source, peerId, (err, peer) => {\n      if (err) {\n        log.error(err)\n        source.end(err)\n        return\n      }\n\n      runPing(self.libp2p, source, opts.count, peer, (err) => {\n        if (err) {\n          log.error(err)\n          source.push(getPacket({ success: false, text: err.toString() }))\n          source.end()\n        }\n      })\n    })\n\n    return source\n  }\n}\n\nfunction getPacket (msg) {\n  // Default msg\n  const basePacket = { success: true, time: 0, text: '' }\n  return Object.assign(basePacket, msg)\n}\n\nfunction getPeer (libp2pNode, statusStream, peerIdStr, cb) {\n  let peerId\n\n  try {\n    peerId = PeerId.createFromB58String(peerIdStr)\n  } catch (err) {\n    return cb(err)\n  }\n\n  let peerInfo\n\n  try {\n    peerInfo = libp2pNode.peerBook.get(peerId)\n  } catch (err) {\n    log('Peer not found in peer book, trying peer routing')\n\n    // Share lookup status just as in the go implemmentation\n    statusStream.push(getPacket({ text: `Looking up peer ${peerIdStr}` }))\n    return libp2pNode.peerRouting.findPeer(peerId, cb)\n  }\n\n  cb(null, peerInfo)\n}\n\nfunction runPing (libp2pNode, statusStream, count, peer, cb) {\n  libp2pNode.ping(peer, (err, p) => {\n    if (err) { return cb(err) }\n\n    let packetCount = 0\n    let totalTime = 0\n    statusStream.push(getPacket({ text: `PING ${peer.id.toB58String()}` }))\n\n    p.on('ping', (time) => {\n      statusStream.push(getPacket({ time }))\n      totalTime += time\n      packetCount++\n      if (packetCount >= count) {\n        const average = totalTime / count\n        p.stop()\n        statusStream.push(getPacket({ text: `Average latency: ${average}ms` }))\n        statusStream.end()\n      }\n    })\n\n    p.on('error', (err) => {\n      log.error(err)\n      p.stop()\n      cb(err)\n    })\n\n    p.start()\n  })\n}\n"]},"metadata":{},"sourceType":"script"}