{"ast":null,"code":"'use strict';\n\nconst nextTick = require('async/nextTick');\n\nconst errCode = require('err-code');\n\nconst promisify = require('promisify-es6');\n\nconst {\n  messages,\n  codes\n} = require('./errors');\n\nmodule.exports = node => {\n  return {\n    put: promisify((key, value, callback) => {\n      if (!node._dht) {\n        return nextTick(callback, errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED));\n      }\n\n      node._dht.put(key, value, callback);\n    }),\n    get: promisify((key, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (!node._dht) {\n        return nextTick(callback, errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED));\n      }\n\n      node._dht.get(key, options, callback);\n    }),\n    getMany: promisify((key, nVals, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (!node._dht) {\n        return nextTick(callback, errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED));\n      }\n\n      node._dht.getMany(key, nVals, options, callback);\n    })\n  };\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/libp2p/src/dht.js"],"names":["nextTick","require","errCode","promisify","messages","codes","module","exports","node","put","key","value","callback","_dht","Error","DHT_DISABLED","get","options","getMany","nVals"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,eAAD,CAAzB;;AAEA,MAAM;AAAEG,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAAsBJ,OAAO,CAAC,UAAD,CAAnC;;AAEAK,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAO;AACLC,IAAAA,GAAG,EAAEN,SAAS,CAAC,CAACO,GAAD,EAAMC,KAAN,EAAaC,QAAb,KAA0B;AACvC,UAAI,CAACJ,IAAI,CAACK,IAAV,EAAgB;AACd,eAAOb,QAAQ,CAACY,QAAD,EAAWV,OAAO,CAAC,IAAIY,KAAJ,CAAUV,QAAQ,CAACW,YAAnB,CAAD,EAAmCV,KAAK,CAACU,YAAzC,CAAlB,CAAf;AACD;;AAEDP,MAAAA,IAAI,CAACK,IAAL,CAAUJ,GAAV,CAAcC,GAAd,EAAmBC,KAAnB,EAA0BC,QAA1B;AACD,KANa,CADT;AAQLI,IAAAA,GAAG,EAAEb,SAAS,CAAC,CAACO,GAAD,EAAMO,OAAN,EAAeL,QAAf,KAA4B;AACzC,UAAI,OAAOK,OAAP,KAAmB,UAAvB,EAAmC;AACjCL,QAAAA,QAAQ,GAAGK,OAAX;AACAA,QAAAA,OAAO,GAAG,EAAV;AACD;;AAED,UAAI,CAACT,IAAI,CAACK,IAAV,EAAgB;AACd,eAAOb,QAAQ,CAACY,QAAD,EAAWV,OAAO,CAAC,IAAIY,KAAJ,CAAUV,QAAQ,CAACW,YAAnB,CAAD,EAAmCV,KAAK,CAACU,YAAzC,CAAlB,CAAf;AACD;;AAEDP,MAAAA,IAAI,CAACK,IAAL,CAAUG,GAAV,CAAcN,GAAd,EAAmBO,OAAnB,EAA4BL,QAA5B;AACD,KAXa,CART;AAoBLM,IAAAA,OAAO,EAAEf,SAAS,CAAC,CAACO,GAAD,EAAMS,KAAN,EAAaF,OAAb,EAAsBL,QAAtB,KAAmC;AACpD,UAAI,OAAOK,OAAP,KAAmB,UAAvB,EAAmC;AACjCL,QAAAA,QAAQ,GAAGK,OAAX;AACAA,QAAAA,OAAO,GAAG,EAAV;AACD;;AAED,UAAI,CAACT,IAAI,CAACK,IAAV,EAAgB;AACd,eAAOb,QAAQ,CAACY,QAAD,EAAWV,OAAO,CAAC,IAAIY,KAAJ,CAAUV,QAAQ,CAACW,YAAnB,CAAD,EAAmCV,KAAK,CAACU,YAAzC,CAAlB,CAAf;AACD;;AAEDP,MAAAA,IAAI,CAACK,IAAL,CAAUK,OAAV,CAAkBR,GAAlB,EAAuBS,KAAvB,EAA8BF,OAA9B,EAAuCL,QAAvC;AACD,KAXiB;AApBb,GAAP;AAiCD,CAlCD","sourcesContent":["'use strict'\n\nconst nextTick = require('async/nextTick')\nconst errCode = require('err-code')\nconst promisify = require('promisify-es6')\n\nconst { messages, codes } = require('./errors')\n\nmodule.exports = (node) => {\n  return {\n    put: promisify((key, value, callback) => {\n      if (!node._dht) {\n        return nextTick(callback, errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED))\n      }\n\n      node._dht.put(key, value, callback)\n    }),\n    get: promisify((key, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      if (!node._dht) {\n        return nextTick(callback, errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED))\n      }\n\n      node._dht.get(key, options, callback)\n    }),\n    getMany: promisify((key, nVals, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      if (!node._dht) {\n        return nextTick(callback, errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED))\n      }\n\n      node._dht.getMany(key, nVals, options, callback)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}