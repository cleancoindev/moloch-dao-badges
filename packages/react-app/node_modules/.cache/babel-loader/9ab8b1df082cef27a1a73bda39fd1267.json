{"ast":null,"code":"'use strict';\n\nconst isIPFS = require('is-ipfs');\n\nconst debug = require('debug');\n\nconst log = debug('ipfs:ipns:path');\nlog.error = debug('ipfs:ipns:path:error'); // resolves the given path by parsing out protocol-specific entries\n// (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n\nconst resolvePath = (ipfsNode, name) => {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    log(`resolve ipns path ${name}`);\n    return ipfsNode._ipns.resolve(name);\n  } // ipfs path\n\n\n  return ipfsNode.dag.get(name.substring('/ipfs/'.length));\n};\n\nmodule.exports = {\n  resolvePath\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs/src/core/ipns/path.js"],"names":["isIPFS","require","debug","log","error","resolvePath","ipfsNode","name","ipnsPath","_ipns","resolve","dag","get","substring","length","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AAEA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,GAAG,GAAGD,KAAK,CAAC,gBAAD,CAAjB;AACAC,GAAG,CAACC,KAAJ,GAAYF,KAAK,CAAC,sBAAD,CAAjB,C,CAEA;AACA;;AACA,MAAMG,WAAW,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAoB;AACtC;AACA,MAAIP,MAAM,CAACQ,QAAP,CAAgBD,IAAhB,CAAJ,EAA2B;AACzBJ,IAAAA,GAAG,CAAE,qBAAoBI,IAAK,EAA3B,CAAH;AAEA,WAAOD,QAAQ,CAACG,KAAT,CAAeC,OAAf,CAAuBH,IAAvB,CAAP;AACD,GANqC,CAQtC;;;AACA,SAAOD,QAAQ,CAACK,GAAT,CAAaC,GAAb,CAAiBL,IAAI,CAACM,SAAL,CAAe,SAASC,MAAxB,CAAjB,CAAP;AACD,CAVD;;AAYAC,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA;AADe,CAAjB","sourcesContent":["'use strict'\n\nconst isIPFS = require('is-ipfs')\n\nconst debug = require('debug')\nconst log = debug('ipfs:ipns:path')\nlog.error = debug('ipfs:ipns:path:error')\n\n// resolves the given path by parsing out protocol-specific entries\n// (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\nconst resolvePath = (ipfsNode, name) => {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    log(`resolve ipns path ${name}`)\n\n    return ipfsNode._ipns.resolve(name)\n  }\n\n  // ipfs path\n  return ipfsNode.dag.get(name.substring('/ipfs/'.length))\n}\n\nmodule.exports = {\n  resolvePath\n}\n"]},"metadata":{},"sourceType":"script"}