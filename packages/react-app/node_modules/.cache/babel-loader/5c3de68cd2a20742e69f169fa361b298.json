{"ast":null,"code":"var _jsxFileName = \"/home/dekan/Projects/raid-guild/dao-badges-web/packages/react-app/src/components/badges/BadgeList.js\";\nimport React, { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport Badges from '../../assets/data/badges.json';\nconst GET_BADGES = gql`\n  query($addr: String!) {\n    badges(where: { memberAddress: $addr }) {\n      memberAddress\n      voteCount\n      summonCount\n      proposalSponsorCount\n      proposalSubmissionCount\n      rageQuitCount\n      jailedCount\n    }\n  }\n`;\n\nconst BadgeList = props => {\n  const {\n    playerAddr\n  } = props;\n  console.log(\"playerAddr\", playerAddr);\n  const [badges, setBadges] = React.useState([]);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_BADGES, {\n    variables: {\n      addr: `${playerAddr}`\n    }\n  });\n  console.log(loading, error, data);\n  useEffect(() => {\n    if (!loading && !error && data) {\n      console.log({\n        data: data\n      });\n      setBadges(data.badges);\n    }\n  }, [loading, error, data]);\n\n  const renderBadges = () => {\n    Object.entries(badges).map((key, val) => {\n      const badgeSet = Badges.badges.find(badge => badge.title === key);\n      return badgeSet.files.map((badge, idx) => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      }, val > badgeSet.threshHolds[idx] && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        alt: \"\",\n        src: badgeSet.files[idx],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }\n      }), \"val\")));\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, badges.length), badges.length && renderBadges());\n};\n\nexport default BadgeList;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/packages/react-app/src/components/badges/BadgeList.js"],"names":["React","useEffect","useQuery","gql","Badges","GET_BADGES","BadgeList","props","playerAddr","console","log","badges","setBadges","useState","loading","error","data","variables","addr","renderBadges","Object","entries","map","key","val","badgeSet","find","badge","title","files","idx","threshHolds","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,OAAOC,MAAP,MAAmB,+BAAnB;AAEA,MAAMC,UAAU,GAAGF,GAAI;;;;;;;;;;;;CAAvB;;AAcA,MAAMG,SAAS,GAAIC,KAAD,IAAW;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAiBD,KAAvB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,UAA1B;AAEA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBZ,KAAK,CAACa,QAAN,CAAe,EAAf,CAA5B;AAEA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2Bd,QAAQ,CAACG,UAAD,EAAa;AACpDY,IAAAA,SAAS,EAAE;AACTC,MAAAA,IAAI,EAAG,GAAEV,UAAW;AADX;AADyC,GAAb,CAAzC;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYI,OAAZ,EAAqBC,KAArB,EAA4BC,IAA5B;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACa,OAAD,IAAY,CAACC,KAAb,IAAsBC,IAA1B,EAAgC;AAC9BP,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEM,QAAAA,IAAI,EAAEA;AAAR,OAAZ;AACAJ,MAAAA,SAAS,CAACI,IAAI,CAACL,MAAN,CAAT;AACD;AACF,GALQ,EAKN,CAACG,OAAD,EAAUC,KAAV,EAAiBC,IAAjB,CALM,CAAT;;AAOA,QAAMG,YAAY,GAAG,MAAM;AACzBC,IAAAA,MAAM,CAACC,OAAP,CAAeV,MAAf,EAAuBW,GAAvB,CAA2B,CAACC,GAAD,EAAMC,GAAN,KAAc;AACvC,YAAMC,QAAQ,GAAGrB,MAAM,CAACO,MAAP,CAAce,IAAd,CAAoBC,KAAD,IAAWA,KAAK,CAACC,KAAN,KAAgBL,GAA9C,CAAjB;AACA,aAAOE,QAAQ,CAACI,KAAT,CAAeP,GAAf,CAAmB,CAACK,KAAD,EAAQG,GAAR,kBACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGN,GAAG,GAAGC,QAAQ,CAACM,WAAT,CAAqBD,GAArB,CAAN,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,GAAG,EAAC,EAAT;AAAY,QAAA,GAAG,EAAEL,QAAQ,CAACI,KAAT,CAAeC,GAAf,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,QAFJ,CADK,CAAP;AAUD,KAZD;AAcD,GAfD;;AAiBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKnB,MAAM,CAACqB,MAAZ,CADF,EAEGrB,MAAM,CAACqB,MAAP,IAAkBb,YAAY,EAFjC,CADF;AAOD,CA5CD;;AA8CA,eAAeb,SAAf","sourcesContent":["import React, { useEffect } from \"react\";\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nimport Badges from '../../assets/data/badges.json';\n\nconst GET_BADGES = gql`\n  query($addr: String!) {\n    badges(where: { memberAddress: $addr }) {\n      memberAddress\n      voteCount\n      summonCount\n      proposalSponsorCount\n      proposalSubmissionCount\n      rageQuitCount\n      jailedCount\n    }\n  }\n`;\n\nconst BadgeList = (props) => {\n  const { playerAddr } = props;\n  console.log(\"playerAddr\", playerAddr);\n\n  const [badges, setBadges] = React.useState([]);\n\n  const { loading, error, data } = useQuery(GET_BADGES, {\n    variables: {\n      addr: `${playerAddr}`,\n    },\n  });\n  console.log(loading, error, data);\n\n  useEffect(() => {\n    if (!loading && !error && data) {\n      console.log({ data: data });\n      setBadges(data.badges);\n    }\n  }, [loading, error, data]);\n\n  const renderBadges = () => {\n    Object.entries(badges).map((key, val) => {\n      const badgeSet = Badges.badges.find((badge) => badge.title === key);\n      return badgeSet.files.map((badge, idx) => (\n        <div>\n          {val > badgeSet.threshHolds[idx] && (\n            <div>\n              <img alt=\"\" src={badgeSet.files[idx]} />val\n          </div>\n          )}\n        </div>\n      ))\n\n    })\n\n  }\n\n  return (\n    <div>\n      <h1>{badges.length}</h1>\n      {badges.length &&  renderBadges() }\n\n    </div>\n  );\n};\n\nexport default BadgeList;\n"]},"metadata":{},"sourceType":"module"}