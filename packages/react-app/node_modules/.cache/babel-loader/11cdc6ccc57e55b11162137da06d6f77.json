{"ast":null,"code":"'use strict';\n\nconst BlockService = require('ipfs-block-service');\n\nconst Ipld = require('ipld');\n\nconst PeerId = require('peer-id');\n\nconst PeerInfo = require('peer-info');\n\nconst crypto = require('libp2p-crypto');\n\nconst isIPFS = require('is-ipfs');\n\nconst multiaddr = require('multiaddr');\n\nconst multihash = require('multihashes');\n\nconst PeerBook = require('peer-book');\n\nconst multibase = require('multibase');\n\nconst multicodec = require('multicodec');\n\nconst multihashing = require('multihashing-async');\n\nconst CID = require('cids');\n\nconst debug = require('debug');\n\nconst mergeOptions = require('merge-options');\n\nconst EventEmitter = require('events');\n\nconst config = require('./config');\n\nconst boot = require('./boot');\n\nconst components = require('./components');\n\nconst GCLock = require('./components/pin/gc-lock'); // replaced by repo-browser when running in the browser\n\n\nconst defaultRepo = require('./runtime/repo-nodejs');\n\nconst preload = require('./preload');\n\nconst mfsPreload = require('./mfs-preload');\n\nconst ipldOptions = require('./runtime/ipld-nodejs');\n\nconst {\n  isTest\n} = require('ipfs-utils/src/env');\n/**\n * @typedef { import(\"./ipns/index\") } IPNS\n */\n\n/**\n *\n *\n * @class IPFS\n * @extends {EventEmitter}\n */\n\n\nclass IPFS extends EventEmitter {\n  constructor(options) {\n    super();\n    const defaults = {\n      init: true,\n      start: true,\n      EXPERIMENTAL: {},\n      preload: {\n        enabled: !isTest,\n        // preload by default, unless in test env\n        addresses: ['/dnsaddr/node0.preload.ipfs.io/https', '/dnsaddr/node1.preload.ipfs.io/https']\n      }\n    };\n    options = config.validate(options || {});\n    this._options = mergeOptions(defaults, options);\n\n    if (options.init === false) {\n      this._options.init = false;\n    }\n\n    if (!(options.start === false)) {\n      this._options.start = true;\n    }\n\n    if (typeof options.repo === 'string' || options.repo === undefined) {\n      this._repo = defaultRepo(options);\n    } else {\n      this._repo = options.repo;\n    } // IPFS utils\n\n\n    this.log = debug('ipfs');\n    this.log.err = debug('ipfs:err'); // IPFS Core Internals\n    // this._repo - assigned above\n\n    this._peerInfoBook = new PeerBook();\n    this._peerInfo = undefined;\n    this._bitswap = undefined;\n    this._blockService = new BlockService(this._repo);\n    this._ipld = new Ipld(ipldOptions(this._blockService, this._options.ipld, this.log));\n    this._preload = preload(this);\n    this._mfsPreload = mfsPreload(this);\n    /** @type {IPNS} */\n\n    this._ipns = undefined; // eslint-disable-next-line no-console\n\n    this._print = this._options.silent ? this.log : console.log;\n    this._gcLock = new GCLock(this._options.repoOwner, {\n      // Make sure GCLock is specific to repo, for tests where there are\n      // multiple instances of IPFS\n      morticeId: this._repo.path\n    }); // IPFS Core exposed components\n    //   - for booting up a node\n\n    this.init = components.init(this);\n    this.preStart = components.preStart(this);\n    this.start = components.start(this);\n    this.stop = components.stop(this);\n    this.shutdown = this.stop;\n    this.isOnline = components.isOnline(this); //   - interface-ipfs-core defined API\n\n    Object.assign(this, components.filesRegular(this));\n    this.version = components.version(this);\n    this.id = components.id(this);\n    this.repo = components.repo(this);\n    this.bootstrap = components.bootstrap(this);\n    this.config = components.config(this);\n    this.block = components.block(this);\n    this.object = components.object(this);\n    this.dag = components.dag(this);\n    this.files = components.filesMFS(this);\n    this.libp2p = null; // assigned on start\n\n    this.swarm = components.swarm(this);\n    this.name = components.name(this);\n    this.bitswap = components.bitswap(this);\n    this.pin = components.pin(this);\n    this.ping = components.ping(this);\n    this.pingPullStream = components.pingPullStream(this);\n    this.pingReadableStream = components.pingReadableStream(this);\n    this.pubsub = components.pubsub(this);\n    this.dht = components.dht(this);\n    this.dns = components.dns(this);\n    this.key = components.key(this);\n    this.stats = components.stats(this);\n    this.resolve = components.resolve(this);\n\n    if (this._options.EXPERIMENTAL.ipnsPubsub) {\n      this.log('EXPERIMENTAL IPNS pubsub is enabled');\n    }\n\n    if (this._options.EXPERIMENTAL.sharding) {\n      this.log('EXPERIMENTAL sharding is enabled');\n    }\n\n    this.state = require('./state')(this);\n\n    const onReady = () => {\n      this.removeListener('error', onError);\n      this._ready = true;\n    };\n\n    const onError = err => {\n      this.removeListener('ready', onReady);\n      this._readyError = err;\n    };\n\n    this.once('ready', onReady).once('error', onError);\n    boot(this);\n  }\n\n  get ready() {\n    return new Promise((resolve, reject) => {\n      if (this._ready) return resolve(this);\n      if (this._readyError) return reject(this._readyError);\n      this.once('ready', () => resolve(this));\n      this.once('error', reject);\n    });\n  }\n\n}\n\nmodule.exports = IPFS; // Note: We need to do this to force browserify to load the Buffer module\n\nconst BufferImpl = Buffer;\nObject.assign(module.exports, {\n  crypto,\n  isIPFS,\n  Buffer: BufferImpl,\n  CID,\n  multiaddr,\n  multibase,\n  multihash,\n  multihashing,\n  multicodec,\n  PeerId,\n  PeerInfo\n});\n\nmodule.exports.createNode = options => {\n  return new IPFS(options);\n};\n\nmodule.exports.create = options => {\n  return new IPFS(options).ready;\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipfs/src/core/index.js"],"names":["BlockService","require","Ipld","PeerId","PeerInfo","crypto","isIPFS","multiaddr","multihash","PeerBook","multibase","multicodec","multihashing","CID","debug","mergeOptions","EventEmitter","config","boot","components","GCLock","defaultRepo","preload","mfsPreload","ipldOptions","isTest","IPFS","constructor","options","defaults","init","start","EXPERIMENTAL","enabled","addresses","validate","_options","repo","undefined","_repo","log","err","_peerInfoBook","_peerInfo","_bitswap","_blockService","_ipld","ipld","_preload","_mfsPreload","_ipns","_print","silent","console","_gcLock","repoOwner","morticeId","path","preStart","stop","shutdown","isOnline","Object","assign","filesRegular","version","id","bootstrap","block","object","dag","files","filesMFS","libp2p","swarm","name","bitswap","pin","ping","pingPullStream","pingReadableStream","pubsub","dht","dns","key","stats","resolve","ipnsPubsub","sharding","state","onReady","removeListener","onError","_ready","_readyError","once","ready","Promise","reject","module","exports","BufferImpl","Buffer","createNode","create"],"mappings":"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","sourcesContent":["'use strict'\n\nconst BlockService = require('ipfs-block-service')\nconst Ipld = require('ipld')\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst crypto = require('libp2p-crypto')\nconst isIPFS = require('is-ipfs')\nconst multiaddr = require('multiaddr')\nconst multihash = require('multihashes')\nconst PeerBook = require('peer-book')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\nconst CID = require('cids')\nconst debug = require('debug')\nconst mergeOptions = require('merge-options')\nconst EventEmitter = require('events')\n\nconst config = require('./config')\nconst boot = require('./boot')\nconst components = require('./components')\nconst GCLock = require('./components/pin/gc-lock')\n\n// replaced by repo-browser when running in the browser\nconst defaultRepo = require('./runtime/repo-nodejs')\nconst preload = require('./preload')\nconst mfsPreload = require('./mfs-preload')\nconst ipldOptions = require('./runtime/ipld-nodejs')\nconst { isTest } = require('ipfs-utils/src/env')\n\n/**\n * @typedef { import(\"./ipns/index\") } IPNS\n */\n\n/**\n *\n *\n * @class IPFS\n * @extends {EventEmitter}\n */\nclass IPFS extends EventEmitter {\n  constructor (options) {\n    super()\n\n    const defaults = {\n      init: true,\n      start: true,\n      EXPERIMENTAL: {},\n      preload: {\n        enabled: !isTest, // preload by default, unless in test env\n        addresses: [\n          '/dnsaddr/node0.preload.ipfs.io/https',\n          '/dnsaddr/node1.preload.ipfs.io/https'\n        ]\n      }\n    }\n\n    options = config.validate(options || {})\n\n    this._options = mergeOptions(defaults, options)\n\n    if (options.init === false) {\n      this._options.init = false\n    }\n\n    if (!(options.start === false)) {\n      this._options.start = true\n    }\n\n    if (typeof options.repo === 'string' ||\n        options.repo === undefined) {\n      this._repo = defaultRepo(options)\n    } else {\n      this._repo = options.repo\n    }\n\n    // IPFS utils\n    this.log = debug('ipfs')\n    this.log.err = debug('ipfs:err')\n\n    // IPFS Core Internals\n    // this._repo - assigned above\n    this._peerInfoBook = new PeerBook()\n    this._peerInfo = undefined\n    this._bitswap = undefined\n    this._blockService = new BlockService(this._repo)\n    this._ipld = new Ipld(ipldOptions(this._blockService, this._options.ipld, this.log))\n    this._preload = preload(this)\n    this._mfsPreload = mfsPreload(this)\n    /** @type {IPNS} */\n    this._ipns = undefined\n    // eslint-disable-next-line no-console\n    this._print = this._options.silent ? this.log : console.log\n    this._gcLock = new GCLock(this._options.repoOwner, {\n      // Make sure GCLock is specific to repo, for tests where there are\n      // multiple instances of IPFS\n      morticeId: this._repo.path\n    })\n\n    // IPFS Core exposed components\n    //   - for booting up a node\n    this.init = components.init(this)\n    this.preStart = components.preStart(this)\n    this.start = components.start(this)\n    this.stop = components.stop(this)\n    this.shutdown = this.stop\n    this.isOnline = components.isOnline(this)\n    //   - interface-ipfs-core defined API\n    Object.assign(this, components.filesRegular(this))\n    this.version = components.version(this)\n    this.id = components.id(this)\n    this.repo = components.repo(this)\n    this.bootstrap = components.bootstrap(this)\n    this.config = components.config(this)\n    this.block = components.block(this)\n    this.object = components.object(this)\n    this.dag = components.dag(this)\n    this.files = components.filesMFS(this)\n    this.libp2p = null // assigned on start\n    this.swarm = components.swarm(this)\n    this.name = components.name(this)\n    this.bitswap = components.bitswap(this)\n    this.pin = components.pin(this)\n    this.ping = components.ping(this)\n    this.pingPullStream = components.pingPullStream(this)\n    this.pingReadableStream = components.pingReadableStream(this)\n    this.pubsub = components.pubsub(this)\n    this.dht = components.dht(this)\n    this.dns = components.dns(this)\n    this.key = components.key(this)\n    this.stats = components.stats(this)\n    this.resolve = components.resolve(this)\n\n    if (this._options.EXPERIMENTAL.ipnsPubsub) {\n      this.log('EXPERIMENTAL IPNS pubsub is enabled')\n    }\n    if (this._options.EXPERIMENTAL.sharding) {\n      this.log('EXPERIMENTAL sharding is enabled')\n    }\n\n    this.state = require('./state')(this)\n\n    const onReady = () => {\n      this.removeListener('error', onError)\n      this._ready = true\n    }\n\n    const onError = err => {\n      this.removeListener('ready', onReady)\n      this._readyError = err\n    }\n\n    this.once('ready', onReady).once('error', onError)\n\n    boot(this)\n  }\n\n  get ready () {\n    return new Promise((resolve, reject) => {\n      if (this._ready) return resolve(this)\n      if (this._readyError) return reject(this._readyError)\n      this.once('ready', () => resolve(this))\n      this.once('error', reject)\n    })\n  }\n}\n\nmodule.exports = IPFS\n\n// Note: We need to do this to force browserify to load the Buffer module\nconst BufferImpl = Buffer\nObject.assign(module.exports, { crypto, isIPFS, Buffer: BufferImpl, CID, multiaddr, multibase, multihash, multihashing, multicodec, PeerId, PeerInfo })\n\nmodule.exports.createNode = (options) => {\n  return new IPFS(options)\n}\n\nmodule.exports.create = (options) => {\n  return new IPFS(options).ready\n}\n"]},"metadata":{},"sourceType":"script"}