{"ast":null,"code":"'use strict';\n\nconst callbackify = require('callbackify');\n\nconst pkgversion = require('../../../package.json').version;\n\nmodule.exports = function id(self) {\n  return callbackify(async () => {\n    // eslint-disable-line require-await\n    return {\n      id: self._peerInfo.id.toB58String(),\n      publicKey: self._peerInfo.id.pubKey.bytes.toString('base64'),\n      addresses: self._peerInfo.multiaddrs.toArray().map(ma => ma.toString()).filter(ma => ma.indexOf('ipfs') >= 0).sort(),\n      agentVersion: `js-ipfs/${pkgversion}`,\n      protocolVersion: '9000'\n    };\n  });\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs/src/core/components/id.js"],"names":["callbackify","require","pkgversion","version","module","exports","id","self","_peerInfo","toB58String","publicKey","pubKey","bytes","toString","addresses","multiaddrs","toArray","map","ma","filter","indexOf","sort","agentVersion","protocolVersion"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,uBAAD,CAAP,CAAiCE,OAApD;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,EAAT,CAAaC,IAAb,EAAmB;AAClC,SAAOP,WAAW,CAAC,YAAY;AAAE;AAC/B,WAAO;AACLM,MAAAA,EAAE,EAAEC,IAAI,CAACC,SAAL,CAAeF,EAAf,CAAkBG,WAAlB,EADC;AAELC,MAAAA,SAAS,EAAEH,IAAI,CAACC,SAAL,CAAeF,EAAf,CAAkBK,MAAlB,CAAyBC,KAAzB,CAA+BC,QAA/B,CAAwC,QAAxC,CAFN;AAGLC,MAAAA,SAAS,EAAEP,IAAI,CAACC,SAAL,CAAeO,UAAf,CACRC,OADQ,GAERC,GAFQ,CAEHC,EAAD,IAAQA,EAAE,CAACL,QAAH,EAFJ,EAGRM,MAHQ,CAGAD,EAAD,IAAQA,EAAE,CAACE,OAAH,CAAW,MAAX,KAAsB,CAH7B,EAIRC,IAJQ,EAHN;AAQLC,MAAAA,YAAY,EAAG,WAAUpB,UAAW,EAR/B;AASLqB,MAAAA,eAAe,EAAE;AATZ,KAAP;AAWD,GAZiB,CAAlB;AAaD,CAdD","sourcesContent":["'use strict'\n\nconst callbackify = require('callbackify')\nconst pkgversion = require('../../../package.json').version\n\nmodule.exports = function id (self) {\n  return callbackify(async () => { // eslint-disable-line require-await\n    return {\n      id: self._peerInfo.id.toB58String(),\n      publicKey: self._peerInfo.id.pubKey.bytes.toString('base64'),\n      addresses: self._peerInfo.multiaddrs\n        .toArray()\n        .map((ma) => ma.toString())\n        .filter((ma) => ma.indexOf('ipfs') >= 0)\n        .sort(),\n      agentVersion: `js-ipfs/${pkgversion}`,\n      protocolVersion: '9000'\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}