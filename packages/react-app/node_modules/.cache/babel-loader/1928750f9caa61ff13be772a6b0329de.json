{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar INVALID_UTF16 = \"utf8: invalid string\";\nvar INVALID_UTF8 = \"utf8: invalid source encoding\";\n/**\n * Encodes the given string into UTF-8 byte array.\n * Throws if the source string has invalid UTF-16 encoding.\n */\n\nfunction encode(s) {\n  // Calculate result length and allocate output array.\n  // encodedLength() also validates string and throws errors,\n  // so we don't need repeat validation here.\n  var arr = new Uint8Array(encodedLength(s));\n  var pos = 0;\n\n  for (var i = 0; i < s.length; i++) {\n    var c = s.charCodeAt(i);\n\n    if (c < 0x80) {\n      arr[pos++] = c;\n    } else if (c < 0x800) {\n      arr[pos++] = 0xc0 | c >> 6;\n      arr[pos++] = 0x80 | c & 0x3f;\n    } else if (c < 0xd800) {\n      arr[pos++] = 0xe0 | c >> 12;\n      arr[pos++] = 0x80 | c >> 6 & 0x3f;\n      arr[pos++] = 0x80 | c & 0x3f;\n    } else {\n      i++; // get one more character\n\n      c = (c & 0x3ff) << 10;\n      c |= s.charCodeAt(i) & 0x3ff;\n      c += 0x10000;\n      arr[pos++] = 0xf0 | c >> 18;\n      arr[pos++] = 0x80 | c >> 12 & 0x3f;\n      arr[pos++] = 0x80 | c >> 6 & 0x3f;\n      arr[pos++] = 0x80 | c & 0x3f;\n    }\n  }\n\n  return arr;\n}\n\nexports.encode = encode;\n/**\n * Returns the number of bytes required to encode the given string into UTF-8.\n * Throws if the source string has invalid UTF-16 encoding.\n */\n\nfunction encodedLength(s) {\n  var result = 0;\n\n  for (var i = 0; i < s.length; i++) {\n    var c = s.charCodeAt(i);\n\n    if (c < 0x80) {\n      result += 1;\n    } else if (c < 0x800) {\n      result += 2;\n    } else if (c < 0xd800) {\n      result += 3;\n    } else if (c <= 0xdfff) {\n      if (i >= s.length - 1) {\n        throw new Error(INVALID_UTF16);\n      }\n\n      i++; // \"eat\" next character\n\n      result += 4;\n    } else {\n      throw new Error(INVALID_UTF16);\n    }\n  }\n\n  return result;\n}\n\nexports.encodedLength = encodedLength;\n/**\n * Decodes the given byte array from UTF-8 into a string.\n * Throws if encoding is invalid.\n */\n\nfunction decode(arr) {\n  var chars = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    var b = arr[i];\n\n    if (b & 0x80) {\n      var min = void 0;\n\n      if (b < 0xe0) {\n        // Need 1 more byte.\n        if (i >= arr.length) {\n          throw new Error(INVALID_UTF8);\n        }\n\n        var n1 = arr[++i];\n\n        if ((n1 & 0xc0) !== 0x80) {\n          throw new Error(INVALID_UTF8);\n        }\n\n        b = (b & 0x1f) << 6 | n1 & 0x3f;\n        min = 0x80;\n      } else if (b < 0xf0) {\n        // Need 2 more bytes.\n        if (i >= arr.length - 1) {\n          throw new Error(INVALID_UTF8);\n        }\n\n        var n1 = arr[++i];\n        var n2 = arr[++i];\n\n        if ((n1 & 0xc0) !== 0x80 || (n2 & 0xc0) !== 0x80) {\n          throw new Error(INVALID_UTF8);\n        }\n\n        b = (b & 0x0f) << 12 | (n1 & 0x3f) << 6 | n2 & 0x3f;\n        min = 0x800;\n      } else if (b < 0xf8) {\n        // Need 3 more bytes.\n        if (i >= arr.length - 2) {\n          throw new Error(INVALID_UTF8);\n        }\n\n        var n1 = arr[++i];\n        var n2 = arr[++i];\n        var n3 = arr[++i];\n\n        if ((n1 & 0xc0) !== 0x80 || (n2 & 0xc0) !== 0x80 || (n3 & 0xc0) !== 0x80) {\n          throw new Error(INVALID_UTF8);\n        }\n\n        b = (b & 0x0f) << 18 | (n1 & 0x3f) << 12 | (n2 & 0x3f) << 6 | n3 & 0x3f;\n        min = 0x10000;\n      } else {\n        throw new Error(INVALID_UTF8);\n      }\n\n      if (b < min || b >= 0xd800 && b <= 0xdfff) {\n        throw new Error(INVALID_UTF8);\n      }\n\n      if (b >= 0x10000) {\n        // Surrogate pair.\n        if (b > 0x10ffff) {\n          throw new Error(INVALID_UTF8);\n        }\n\n        b -= 0x10000;\n        chars.push(String.fromCharCode(0xd800 | b >> 10));\n        b = 0xdc00 | b & 0x3ff;\n      }\n    }\n\n    chars.push(String.fromCharCode(b));\n  }\n\n  return chars.join(\"\");\n}\n\nexports.decode = decode;","map":{"version":3,"sources":["../utf8.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar INVALID_UTF16 = \"utf8: invalid string\";\nvar INVALID_UTF8 = \"utf8: invalid source encoding\";\n/**\n * Encodes the given string into UTF-8 byte array.\n * Throws if the source string has invalid UTF-16 encoding.\n */\nfunction encode(s) {\n    // Calculate result length and allocate output array.\n    // encodedLength() also validates string and throws errors,\n    // so we don't need repeat validation here.\n    var arr = new Uint8Array(encodedLength(s));\n    var pos = 0;\n    for (var i = 0; i < s.length; i++) {\n        var c = s.charCodeAt(i);\n        if (c < 0x80) {\n            arr[pos++] = c;\n        }\n        else if (c < 0x800) {\n            arr[pos++] = 0xc0 | c >> 6;\n            arr[pos++] = 0x80 | c & 0x3f;\n        }\n        else if (c < 0xd800) {\n            arr[pos++] = 0xe0 | c >> 12;\n            arr[pos++] = 0x80 | (c >> 6) & 0x3f;\n            arr[pos++] = 0x80 | c & 0x3f;\n        }\n        else {\n            i++; // get one more character\n            c = (c & 0x3ff) << 10;\n            c |= s.charCodeAt(i) & 0x3ff;\n            c += 0x10000;\n            arr[pos++] = 0xf0 | c >> 18;\n            arr[pos++] = 0x80 | (c >> 12) & 0x3f;\n            arr[pos++] = 0x80 | (c >> 6) & 0x3f;\n            arr[pos++] = 0x80 | c & 0x3f;\n        }\n    }\n    return arr;\n}\nexports.encode = encode;\n/**\n * Returns the number of bytes required to encode the given string into UTF-8.\n * Throws if the source string has invalid UTF-16 encoding.\n */\nfunction encodedLength(s) {\n    var result = 0;\n    for (var i = 0; i < s.length; i++) {\n        var c = s.charCodeAt(i);\n        if (c < 0x80) {\n            result += 1;\n        }\n        else if (c < 0x800) {\n            result += 2;\n        }\n        else if (c < 0xd800) {\n            result += 3;\n        }\n        else if (c <= 0xdfff) {\n            if (i >= s.length - 1) {\n                throw new Error(INVALID_UTF16);\n            }\n            i++; // \"eat\" next character\n            result += 4;\n        }\n        else {\n            throw new Error(INVALID_UTF16);\n        }\n    }\n    return result;\n}\nexports.encodedLength = encodedLength;\n/**\n * Decodes the given byte array from UTF-8 into a string.\n * Throws if encoding is invalid.\n */\nfunction decode(arr) {\n    var chars = [];\n    for (var i = 0; i < arr.length; i++) {\n        var b = arr[i];\n        if (b & 0x80) {\n            var min = void 0;\n            if (b < 0xe0) {\n                // Need 1 more byte.\n                if (i >= arr.length) {\n                    throw new Error(INVALID_UTF8);\n                }\n                var n1 = arr[++i];\n                if ((n1 & 0xc0) !== 0x80) {\n                    throw new Error(INVALID_UTF8);\n                }\n                b = (b & 0x1f) << 6 | (n1 & 0x3f);\n                min = 0x80;\n            }\n            else if (b < 0xf0) {\n                // Need 2 more bytes.\n                if (i >= arr.length - 1) {\n                    throw new Error(INVALID_UTF8);\n                }\n                var n1 = arr[++i];\n                var n2 = arr[++i];\n                if ((n1 & 0xc0) !== 0x80 || (n2 & 0xc0) !== 0x80) {\n                    throw new Error(INVALID_UTF8);\n                }\n                b = (b & 0x0f) << 12 | (n1 & 0x3f) << 6 | (n2 & 0x3f);\n                min = 0x800;\n            }\n            else if (b < 0xf8) {\n                // Need 3 more bytes.\n                if (i >= arr.length - 2) {\n                    throw new Error(INVALID_UTF8);\n                }\n                var n1 = arr[++i];\n                var n2 = arr[++i];\n                var n3 = arr[++i];\n                if ((n1 & 0xc0) !== 0x80 || (n2 & 0xc0) !== 0x80 || (n3 & 0xc0) !== 0x80) {\n                    throw new Error(INVALID_UTF8);\n                }\n                b = (b & 0x0f) << 18 | (n1 & 0x3f) << 12 | (n2 & 0x3f) << 6 | (n3 & 0x3f);\n                min = 0x10000;\n            }\n            else {\n                throw new Error(INVALID_UTF8);\n            }\n            if (b < min || (b >= 0xd800 && b <= 0xdfff)) {\n                throw new Error(INVALID_UTF8);\n            }\n            if (b >= 0x10000) {\n                // Surrogate pair.\n                if (b > 0x10ffff) {\n                    throw new Error(INVALID_UTF8);\n                }\n                b -= 0x10000;\n                chars.push(String.fromCharCode(0xd800 | (b >> 10)));\n                b = 0xdc00 | (b & 0x3ff);\n            }\n        }\n        chars.push(String.fromCharCode(b));\n    }\n    return chars.join(\"\");\n}\nexports.decode = decode;\n//# sourceMappingURL=utf8.js.map"]},"metadata":{},"sourceType":"script"}