{"ast":null,"code":"/*! MIT License Â© Sindre Sorhus */\nconst globals = {};\n{\n  const getGlobal = property => {\n    let parent;\n    /* istanbul ignore next */\n\n    if (typeof self !== 'undefined' && self && property in self) {\n      parent = self;\n    }\n    /* istanbul ignore next */\n\n\n    if (typeof window !== 'undefined' && window && property in window) {\n      parent = window;\n    }\n\n    if (typeof global !== 'undefined' && global && property in global) {\n      parent = global;\n    }\n    /* istanbul ignore next */\n\n\n    if (typeof globalThis !== 'undefined' && globalThis) {\n      parent = globalThis;\n    }\n\n    if (typeof parent === 'undefined') {\n      return;\n    }\n\n    const globalProperty = parent[property];\n\n    if (typeof globalProperty === 'function') {\n      return globalProperty.bind(parent);\n    }\n\n    return globalProperty;\n  };\n\n  const globalProperties = ['document', 'Headers', 'Request', 'Response', 'ReadableStream', 'fetch', 'AbortController', 'FormData'];\n  const props = {};\n\n  for (const property of globalProperties) {\n    props[property] = {\n      get() {\n        return getGlobal(property);\n      }\n\n    };\n  }\n\n  Object.defineProperties(globals, props);\n}\n\nconst isObject = value => value !== null && typeof value === 'object';\n\nconst supportsAbortController = typeof globals.AbortController === 'function';\nconst supportsStreams = typeof globals.ReadableStream === 'function';\nconst supportsFormData = typeof globals.FormData === 'function';\n\nconst deepMerge = (...sources) => {\n  let returnValue = {};\n\n  for (const source of sources) {\n    if (Array.isArray(source)) {\n      if (!Array.isArray(returnValue)) {\n        returnValue = [];\n      }\n\n      returnValue = [...returnValue, ...source];\n    } else if (isObject(source)) {\n      for (let [key, value] of Object.entries(source)) {\n        if (isObject(value) && Reflect.has(returnValue, key)) {\n          value = deepMerge(returnValue[key], value);\n        }\n\n        returnValue = { ...returnValue,\n          [key]: value\n        };\n      }\n    }\n  }\n\n  return returnValue;\n};\n\nconst requestMethods = ['get', 'post', 'put', 'patch', 'head', 'delete'];\nconst responseTypes = {\n  json: 'application/json',\n  text: 'text/*',\n  formData: 'multipart/form-data',\n  arrayBuffer: '*/*',\n  blob: '*/*'\n};\nconst retryMethods = new Set(['get', 'put', 'head', 'delete', 'options', 'trace']);\nconst retryStatusCodes = new Set([408, 413, 429, 500, 502, 503, 504]);\nconst retryAfterStatusCodes = new Set([413, 429, 503]);\n\nclass HTTPError extends Error {\n  constructor(response) {\n    super(response.statusText);\n    this.name = 'HTTPError';\n    this.response = response;\n  }\n\n}\n\nclass TimeoutError extends Error {\n  constructor() {\n    super('Request timed out');\n    this.name = 'TimeoutError';\n  }\n\n}\n\nconst safeTimeout = (resolve, reject, ms) => {\n  if (ms > 2147483647) {\n    // The maximum value of a 32bit int (see #117)\n    reject(new RangeError('The `timeout` option cannot be greater than 2147483647'));\n  }\n\n  return setTimeout(resolve, ms);\n};\n\nconst delay = ms => new Promise((resolve, reject) => safeTimeout(resolve, reject, ms)); // `Promise.race()` workaround (#91)\n\n\nconst timeout = (promise, ms, abortController) => new Promise((resolve, reject) => {\n  const timeoutID = safeTimeout(() => {\n    if (supportsAbortController) {\n      abortController.abort();\n    }\n\n    reject(new TimeoutError());\n  }, reject, ms);\n  /* eslint-disable promise/prefer-await-to-then */\n\n  promise.then(resolve).catch(reject).then(() => {\n    clearTimeout(timeoutID);\n  });\n  /* eslint-enable promise/prefer-await-to-then */\n});\n\nconst normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\n\nconst defaultRetryOptions = {\n  limit: 2,\n  methods: retryMethods,\n  statusCodes: retryStatusCodes,\n  afterStatusCodes: retryAfterStatusCodes\n};\n\nconst normalizeRetryOptions = retry => {\n  if (typeof retry === 'number') {\n    return { ...defaultRetryOptions,\n      limit: retry\n    };\n  }\n\n  if (retry.methods && !Array.isArray(retry.methods)) {\n    throw new Error('retry.methods must be an array');\n  }\n\n  if (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n    throw new Error('retry.statusCodes must be an array');\n  }\n\n  return { ...defaultRetryOptions,\n    ...retry,\n    methods: retry.methods ? new Set(retry.methods) : defaultRetryOptions.methods,\n    statusCodes: retry.statusCodes ? new Set(retry.statusCodes) : defaultRetryOptions.statusCodes,\n    afterStatusCodes: retryAfterStatusCodes\n  };\n};\n\nclass Ky {\n  constructor(input, {\n    timeout = 10000,\n    hooks,\n    throwHttpErrors = true,\n    searchParams,\n    json,\n    retry = {},\n    ...otherOptions\n  }) {\n    this._retryCount = 0;\n    this._options = {\n      method: 'get',\n      credentials: 'same-origin',\n      // TODO: This can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n      retry: normalizeRetryOptions(retry),\n      ...otherOptions\n    };\n\n    if (input instanceof globals.Request) {\n      this._input = input; // `ky` options have precedence over `Request` options\n\n      this._options = { ...this._options,\n        method: otherOptions.method || input.method,\n        headers: otherOptions.headers || input.headers,\n        body: otherOptions.body || input.body,\n        credentials: otherOptions.credentials || input.credentials\n      };\n    } else if (!(input instanceof URL) && typeof input !== 'string') {\n      throw new TypeError('`input` must be a string, URL, or Request');\n    } else {\n      this._input = String(input || '');\n      this._options.prefixUrl = String(this._options.prefixUrl || '');\n\n      if (this._options.prefixUrl && this._input.startsWith('/')) {\n        throw new Error('`input` must not begin with a slash when using `prefixUrl`');\n      }\n\n      if (this._options.prefixUrl && !this._options.prefixUrl.endsWith('/')) {\n        this._options.prefixUrl += '/';\n      }\n\n      this._input = this._options.prefixUrl + this._input;\n\n      if (searchParams) {\n        const url = new URL(this._input, globals.document && globals.document.baseURI);\n\n        if (typeof searchParams === 'string' || URLSearchParams && searchParams instanceof URLSearchParams) {\n          url.search = searchParams;\n        } else if (Object.values(searchParams).every(param => typeof param === 'number' || typeof param === 'string')) {\n          url.search = new URLSearchParams(searchParams).toString();\n        } else {\n          throw new Error('The `searchParams` option must be either a string, `URLSearchParams` instance or an object with string and number values');\n        }\n\n        this._input = url.toString();\n      }\n    }\n\n    if (supportsAbortController) {\n      this.abortController = new globals.AbortController();\n\n      if (this._options.signal) {\n        this._options.signal.addEventListener('abort', () => {\n          this.abortController.abort();\n        });\n      }\n\n      this._options.signal = this.abortController.signal;\n    }\n\n    this._options.method = normalizeRequestMethod(this._options.method);\n    this._timeout = timeout;\n    this._hooks = deepMerge({\n      beforeRequest: [],\n      beforeRetry: [],\n      afterResponse: []\n    }, hooks);\n    this._throwHttpErrors = throwHttpErrors;\n    const headers = new globals.Headers(this._options.headers || {});\n\n    if ((supportsFormData && this._options.body instanceof globals.FormData || this._options.body instanceof URLSearchParams) && headers.has('content-type')) {\n      throw new Error(`The \\`content-type\\` header cannot be used with a ${this._options.body.constructor.name} body. It will be set automatically.`);\n    }\n\n    if (json) {\n      if (this._options.body) {\n        throw new Error('The `json` option cannot be used with the `body` option');\n      }\n\n      headers.set('content-type', 'application/json');\n      this._options.body = JSON.stringify(json);\n    }\n\n    this._options.headers = headers;\n\n    const fn = async () => {\n      await delay(1);\n      let response = await this._fetch();\n\n      for (const hook of this._hooks.afterResponse) {\n        // eslint-disable-next-line no-await-in-loop\n        const modifiedResponse = await hook(this._input, this._options, response.clone());\n\n        if (modifiedResponse instanceof globals.Response) {\n          response = modifiedResponse;\n        }\n      }\n\n      if (!response.ok && this._throwHttpErrors) {\n        throw new HTTPError(response);\n      } // If `onDownloadProgress` is passed, it uses the stream API internally\n\n      /* istanbul ignore next */\n\n\n      if (this._options.onDownloadProgress) {\n        if (typeof this._options.onDownloadProgress !== 'function') {\n          throw new TypeError('The `onDownloadProgress` option must be a function');\n        }\n\n        if (!supportsStreams) {\n          throw new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n        }\n\n        return this._stream(response.clone(), this._options.onDownloadProgress);\n      }\n\n      return response;\n    };\n\n    const isRetriableMethod = this._options.retry.methods.has(this._options.method.toLowerCase());\n\n    const result = isRetriableMethod ? this._retry(fn) : fn();\n\n    for (const [type, mimeType] of Object.entries(responseTypes)) {\n      result[type] = async () => {\n        headers.set('accept', mimeType);\n        return (await result).clone()[type]();\n      };\n    }\n\n    return result;\n  }\n\n  _calculateRetryDelay(error) {\n    this._retryCount++;\n\n    if (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n      if (error instanceof HTTPError) {\n        if (!this._options.retry.statusCodes.has(error.response.status)) {\n          return 0;\n        }\n\n        const retryAfter = error.response.headers.get('Retry-After');\n\n        if (retryAfter && this._options.retry.afterStatusCodes.has(error.response.status)) {\n          let after = Number(retryAfter);\n\n          if (Number.isNaN(after)) {\n            after = Date.parse(retryAfter) - Date.now();\n          } else {\n            after *= 1000;\n          }\n\n          if (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n            return 0;\n          }\n\n          return after;\n        }\n\n        if (error.response.status === 413) {\n          return 0;\n        }\n      }\n\n      const BACKOFF_FACTOR = 0.3;\n      return BACKOFF_FACTOR * 2 ** (this._retryCount - 1) * 1000;\n    }\n\n    return 0;\n  }\n\n  async _retry(fn) {\n    try {\n      return await fn();\n    } catch (error) {\n      const ms = this._calculateRetryDelay(error);\n\n      if (ms !== 0 && this._retryCount > 0) {\n        await delay(ms);\n\n        for (const hook of this._hooks.beforeRetry) {\n          // eslint-disable-next-line no-await-in-loop\n          await hook(this._input, this._options, error, this._retryCount);\n        }\n\n        return this._retry(fn);\n      }\n\n      if (this._throwHttpErrors) {\n        throw error;\n      }\n    }\n  }\n\n  async _fetch() {\n    for (const hook of this._hooks.beforeRequest) {\n      // eslint-disable-next-line no-await-in-loop\n      const result = await hook(this._input, this._options);\n\n      if (result instanceof Response) {\n        return result;\n      }\n    }\n\n    if (this._timeout === false) {\n      return globals.fetch(this._input, this._options);\n    }\n\n    return timeout(globals.fetch(this._input, this._options), this._timeout, this.abortController);\n  }\n  /* istanbul ignore next */\n\n\n  _stream(response, onDownloadProgress) {\n    const totalBytes = Number(response.headers.get('content-length')) || 0;\n    let transferredBytes = 0;\n    return new globals.Response(new globals.ReadableStream({\n      start(controller) {\n        const reader = response.body.getReader();\n\n        if (onDownloadProgress) {\n          onDownloadProgress({\n            percent: 0,\n            transferredBytes: 0,\n            totalBytes\n          }, new Uint8Array());\n        }\n\n        async function read() {\n          const {\n            done,\n            value\n          } = await reader.read();\n\n          if (done) {\n            controller.close();\n            return;\n          }\n\n          if (onDownloadProgress) {\n            transferredBytes += value.byteLength;\n            const percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n            onDownloadProgress({\n              percent,\n              transferredBytes,\n              totalBytes\n            }, value);\n          }\n\n          controller.enqueue(value);\n          read();\n        }\n\n        read();\n      }\n\n    }));\n  }\n\n}\n\nconst validateAndMerge = (...sources) => {\n  for (const source of sources) {\n    if ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n      throw new TypeError('The `options` argument must be an object');\n    }\n  }\n\n  return deepMerge({}, ...sources);\n};\n\nconst createInstance = defaults => {\n  const ky = (input, options) => new Ky(input, validateAndMerge(defaults, options));\n\n  for (const method of requestMethods) {\n    ky[method] = (input, options) => new Ky(input, validateAndMerge(defaults, options, {\n      method\n    }));\n  }\n\n  ky.create = newDefaults => createInstance(validateAndMerge(newDefaults));\n\n  ky.extend = newDefaults => createInstance(validateAndMerge(defaults, newDefaults));\n\n  return ky;\n};\n\nexport default createInstance();\nexport { HTTPError, TimeoutError };","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ky/index.js"],"names":["globals","getGlobal","property","parent","self","window","global","globalThis","globalProperty","bind","globalProperties","props","get","Object","defineProperties","isObject","value","supportsAbortController","AbortController","supportsStreams","ReadableStream","supportsFormData","FormData","deepMerge","sources","returnValue","source","Array","isArray","key","entries","Reflect","has","requestMethods","responseTypes","json","text","formData","arrayBuffer","blob","retryMethods","Set","retryStatusCodes","retryAfterStatusCodes","HTTPError","Error","constructor","response","statusText","name","TimeoutError","safeTimeout","resolve","reject","ms","RangeError","setTimeout","delay","Promise","timeout","promise","abortController","timeoutID","abort","then","catch","clearTimeout","normalizeRequestMethod","input","includes","toUpperCase","defaultRetryOptions","limit","methods","statusCodes","afterStatusCodes","normalizeRetryOptions","retry","Ky","hooks","throwHttpErrors","searchParams","otherOptions","_retryCount","_options","method","credentials","Request","_input","headers","body","URL","TypeError","String","prefixUrl","startsWith","endsWith","url","document","baseURI","URLSearchParams","search","values","every","param","toString","signal","addEventListener","_timeout","_hooks","beforeRequest","beforeRetry","afterResponse","_throwHttpErrors","Headers","set","JSON","stringify","fn","_fetch","hook","modifiedResponse","clone","Response","ok","onDownloadProgress","_stream","isRetriableMethod","toLowerCase","result","_retry","type","mimeType","_calculateRetryDelay","error","status","retryAfter","after","Number","isNaN","Date","parse","now","maxRetryAfter","BACKOFF_FACTOR","fetch","totalBytes","transferredBytes","start","controller","reader","getReader","percent","Uint8Array","read","done","close","byteLength","enqueue","validateAndMerge","createInstance","defaults","ky","options","create","newDefaults","extend"],"mappings":"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","sourcesContent":["/*! MIT License Â© Sindre Sorhus */\n\nconst globals = {};\n\n{\n\tconst getGlobal = property => {\n\t\tlet parent;\n\n\t\t/* istanbul ignore next */\n\t\tif (typeof self !== 'undefined' && self && property in self) {\n\t\t\tparent = self;\n\t\t}\n\n\t\t/* istanbul ignore next */\n\t\tif (typeof window !== 'undefined' && window && property in window) {\n\t\t\tparent = window;\n\t\t}\n\n\t\tif (typeof global !== 'undefined' && global && property in global) {\n\t\t\tparent = global;\n\t\t}\n\n\t\t/* istanbul ignore next */\n\t\tif (typeof globalThis !== 'undefined' && globalThis) {\n\t\t\tparent = globalThis;\n\t\t}\n\n\t\tif (typeof parent === 'undefined') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst globalProperty = parent[property];\n\n\t\tif (typeof globalProperty === 'function') {\n\t\t\treturn globalProperty.bind(parent);\n\t\t}\n\n\t\treturn globalProperty;\n\t};\n\n\tconst globalProperties = [\n\t\t'document',\n\t\t'Headers',\n\t\t'Request',\n\t\t'Response',\n\t\t'ReadableStream',\n\t\t'fetch',\n\t\t'AbortController',\n\t\t'FormData'\n\t];\n\n\tconst props = {};\n\tfor (const property of globalProperties) {\n\t\tprops[property] = {\n\t\t\tget() {\n\t\t\t\treturn getGlobal(property);\n\t\t\t}\n\t\t};\n\t}\n\n\tObject.defineProperties(globals, props);\n}\n\nconst isObject = value => value !== null && typeof value === 'object';\nconst supportsAbortController = typeof globals.AbortController === 'function';\nconst supportsStreams = typeof globals.ReadableStream === 'function';\nconst supportsFormData = typeof globals.FormData === 'function';\n\nconst deepMerge = (...sources) => {\n\tlet returnValue = {};\n\n\tfor (const source of sources) {\n\t\tif (Array.isArray(source)) {\n\t\t\tif (!(Array.isArray(returnValue))) {\n\t\t\t\treturnValue = [];\n\t\t\t}\n\n\t\t\treturnValue = [...returnValue, ...source];\n\t\t} else if (isObject(source)) {\n\t\t\tfor (let [key, value] of Object.entries(source)) {\n\t\t\t\tif (isObject(value) && Reflect.has(returnValue, key)) {\n\t\t\t\t\tvalue = deepMerge(returnValue[key], value);\n\t\t\t\t}\n\n\t\t\t\treturnValue = {...returnValue, [key]: value};\n\t\t\t}\n\t\t}\n\t}\n\n\treturn returnValue;\n};\n\nconst requestMethods = [\n\t'get',\n\t'post',\n\t'put',\n\t'patch',\n\t'head',\n\t'delete'\n];\n\nconst responseTypes = {\n\tjson: 'application/json',\n\ttext: 'text/*',\n\tformData: 'multipart/form-data',\n\tarrayBuffer: '*/*',\n\tblob: '*/*'\n};\n\nconst retryMethods = new Set([\n\t'get',\n\t'put',\n\t'head',\n\t'delete',\n\t'options',\n\t'trace'\n]);\n\nconst retryStatusCodes = new Set([\n\t408,\n\t413,\n\t429,\n\t500,\n\t502,\n\t503,\n\t504\n]);\n\nconst retryAfterStatusCodes = new Set([\n\t413,\n\t429,\n\t503\n]);\n\nclass HTTPError extends Error {\n\tconstructor(response) {\n\t\tsuper(response.statusText);\n\t\tthis.name = 'HTTPError';\n\t\tthis.response = response;\n\t}\n}\n\nclass TimeoutError extends Error {\n\tconstructor() {\n\t\tsuper('Request timed out');\n\t\tthis.name = 'TimeoutError';\n\t}\n}\n\nconst safeTimeout = (resolve, reject, ms) => {\n\tif (ms > 2147483647) { // The maximum value of a 32bit int (see #117)\n\t\treject(new RangeError('The `timeout` option cannot be greater than 2147483647'));\n\t}\n\n\treturn setTimeout(resolve, ms);\n};\n\nconst delay = ms => new Promise((resolve, reject) => safeTimeout(resolve, reject, ms));\n\n// `Promise.race()` workaround (#91)\nconst timeout = (promise, ms, abortController) =>\n\tnew Promise((resolve, reject) => {\n\t\tconst timeoutID = safeTimeout(() => {\n\t\t\tif (supportsAbortController) {\n\t\t\t\tabortController.abort();\n\t\t\t}\n\n\t\t\treject(new TimeoutError());\n\t\t}, reject, ms);\n\n\t\t/* eslint-disable promise/prefer-await-to-then */\n\t\tpromise\n\t\t\t.then(resolve)\n\t\t\t.catch(reject)\n\t\t\t.then(() => {\n\t\t\t\tclearTimeout(timeoutID);\n\t\t\t});\n\t\t/* eslint-enable promise/prefer-await-to-then */\n\t});\n\nconst normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\n\nconst defaultRetryOptions = {\n\tlimit: 2,\n\tmethods: retryMethods,\n\tstatusCodes: retryStatusCodes,\n\tafterStatusCodes: retryAfterStatusCodes\n};\n\nconst normalizeRetryOptions = retry => {\n\tif (typeof retry === 'number') {\n\t\treturn {\n\t\t\t...defaultRetryOptions,\n\t\t\tlimit: retry\n\t\t};\n\t}\n\n\tif (retry.methods && !Array.isArray(retry.methods)) {\n\t\tthrow new Error('retry.methods must be an array');\n\t}\n\n\tif (retry.statusCodes && !Array.isArray(retry.statusCodes)) {\n\t\tthrow new Error('retry.statusCodes must be an array');\n\t}\n\n\treturn {\n\t\t...defaultRetryOptions,\n\t\t...retry,\n\t\tmethods: retry.methods ? new Set(retry.methods) : defaultRetryOptions.methods,\n\t\tstatusCodes: retry.statusCodes ? new Set(retry.statusCodes) : defaultRetryOptions.statusCodes,\n\t\tafterStatusCodes: retryAfterStatusCodes\n\t};\n};\n\nclass Ky {\n\tconstructor(input, {\n\t\ttimeout = 10000,\n\t\thooks,\n\t\tthrowHttpErrors = true,\n\t\tsearchParams,\n\t\tjson,\n\t\tretry = {},\n\t\t...otherOptions\n\t}) {\n\t\tthis._retryCount = 0;\n\n\t\tthis._options = {\n\t\t\tmethod: 'get',\n\t\t\tcredentials: 'same-origin', // TODO: This can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n\t\t\tretry: normalizeRetryOptions(retry),\n\t\t\t...otherOptions\n\t\t};\n\n\t\tif (input instanceof globals.Request) {\n\t\t\tthis._input = input;\n\n\t\t\t// `ky` options have precedence over `Request` options\n\t\t\tthis._options = {\n\t\t\t\t...this._options,\n\t\t\t\tmethod: otherOptions.method || input.method,\n\t\t\t\theaders: otherOptions.headers || input.headers,\n\t\t\t\tbody: otherOptions.body || input.body,\n\t\t\t\tcredentials: otherOptions.credentials || input.credentials\n\t\t\t};\n\t\t} else if (!(input instanceof URL) && typeof input !== 'string') {\n\t\t\tthrow new TypeError('`input` must be a string, URL, or Request');\n\t\t} else {\n\t\t\tthis._input = String(input || '');\n\t\t\tthis._options.prefixUrl = String(this._options.prefixUrl || '');\n\n\t\t\tif (this._options.prefixUrl && this._input.startsWith('/')) {\n\t\t\t\tthrow new Error('`input` must not begin with a slash when using `prefixUrl`');\n\t\t\t}\n\n\t\t\tif (this._options.prefixUrl && !this._options.prefixUrl.endsWith('/')) {\n\t\t\t\tthis._options.prefixUrl += '/';\n\t\t\t}\n\n\t\t\tthis._input = this._options.prefixUrl + this._input;\n\n\t\t\tif (searchParams) {\n\t\t\t\tconst url = new URL(this._input, globals.document && globals.document.baseURI);\n\t\t\t\tif (typeof searchParams === 'string' || (URLSearchParams && searchParams instanceof URLSearchParams)) {\n\t\t\t\t\turl.search = searchParams;\n\t\t\t\t} else if (Object.values(searchParams).every(param => typeof param === 'number' || typeof param === 'string')) {\n\t\t\t\t\turl.search = new URLSearchParams(searchParams).toString();\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('The `searchParams` option must be either a string, `URLSearchParams` instance or an object with string and number values');\n\t\t\t\t}\n\n\t\t\t\tthis._input = url.toString();\n\t\t\t}\n\t\t}\n\n\t\tif (supportsAbortController) {\n\t\t\tthis.abortController = new globals.AbortController();\n\t\t\tif (this._options.signal) {\n\t\t\t\tthis._options.signal.addEventListener('abort', () => {\n\t\t\t\t\tthis.abortController.abort();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._options.signal = this.abortController.signal;\n\t\t}\n\n\t\tthis._options.method = normalizeRequestMethod(this._options.method);\n\n\t\tthis._timeout = timeout;\n\t\tthis._hooks = deepMerge({\n\t\t\tbeforeRequest: [],\n\t\t\tbeforeRetry: [],\n\t\t\tafterResponse: []\n\t\t}, hooks);\n\t\tthis._throwHttpErrors = throwHttpErrors;\n\n\t\tconst headers = new globals.Headers(this._options.headers || {});\n\n\t\tif (((supportsFormData && this._options.body instanceof globals.FormData) || this._options.body instanceof URLSearchParams) && headers.has('content-type')) {\n\t\t\tthrow new Error(`The \\`content-type\\` header cannot be used with a ${this._options.body.constructor.name} body. It will be set automatically.`);\n\t\t}\n\n\t\tif (json) {\n\t\t\tif (this._options.body) {\n\t\t\t\tthrow new Error('The `json` option cannot be used with the `body` option');\n\t\t\t}\n\n\t\t\theaders.set('content-type', 'application/json');\n\t\t\tthis._options.body = JSON.stringify(json);\n\t\t}\n\n\t\tthis._options.headers = headers;\n\n\t\tconst fn = async () => {\n\t\t\tawait delay(1);\n\t\t\tlet response = await this._fetch();\n\n\t\t\tfor (const hook of this._hooks.afterResponse) {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tconst modifiedResponse = await hook(\n\t\t\t\t\tthis._input,\n\t\t\t\t\tthis._options,\n\t\t\t\t\tresponse.clone()\n\t\t\t\t);\n\n\t\t\t\tif (modifiedResponse instanceof globals.Response) {\n\t\t\t\t\tresponse = modifiedResponse;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!response.ok && this._throwHttpErrors) {\n\t\t\t\tthrow new HTTPError(response);\n\t\t\t}\n\n\t\t\t// If `onDownloadProgress` is passed, it uses the stream API internally\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this._options.onDownloadProgress) {\n\t\t\t\tif (typeof this._options.onDownloadProgress !== 'function') {\n\t\t\t\t\tthrow new TypeError('The `onDownloadProgress` option must be a function');\n\t\t\t\t}\n\n\t\t\t\tif (!supportsStreams) {\n\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n\t\t\t\t}\n\n\t\t\t\treturn this._stream(response.clone(), this._options.onDownloadProgress);\n\t\t\t}\n\n\t\t\treturn response;\n\t\t};\n\n\t\tconst isRetriableMethod = this._options.retry.methods.has(this._options.method.toLowerCase());\n\t\tconst result = isRetriableMethod ? this._retry(fn) : fn();\n\n\t\tfor (const [type, mimeType] of Object.entries(responseTypes)) {\n\t\t\tresult[type] = async () => {\n\t\t\t\theaders.set('accept', mimeType);\n\t\t\t\treturn (await result).clone()[type]();\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t_calculateRetryDelay(error) {\n\t\tthis._retryCount++;\n\n\t\tif (this._retryCount < this._options.retry.limit && !(error instanceof TimeoutError)) {\n\t\t\tif (error instanceof HTTPError) {\n\t\t\t\tif (!this._options.retry.statusCodes.has(error.response.status)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tconst retryAfter = error.response.headers.get('Retry-After');\n\t\t\t\tif (retryAfter && this._options.retry.afterStatusCodes.has(error.response.status)) {\n\t\t\t\t\tlet after = Number(retryAfter);\n\t\t\t\t\tif (Number.isNaN(after)) {\n\t\t\t\t\t\tafter = Date.parse(retryAfter) - Date.now();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafter *= 1000;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof this._options.retry.maxRetryAfter !== 'undefined' && after > this._options.retry.maxRetryAfter) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn after;\n\t\t\t\t}\n\n\t\t\t\tif (error.response.status === 413) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst BACKOFF_FACTOR = 0.3;\n\t\t\treturn BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tasync _retry(fn) {\n\t\ttry {\n\t\t\treturn await fn();\n\t\t} catch (error) {\n\t\t\tconst ms = this._calculateRetryDelay(error);\n\t\t\tif (ms !== 0 && this._retryCount > 0) {\n\t\t\t\tawait delay(ms);\n\n\t\t\t\tfor (const hook of this._hooks.beforeRetry) {\n\t\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\t\tawait hook(\n\t\t\t\t\t\tthis._input,\n\t\t\t\t\t\tthis._options,\n\t\t\t\t\t\terror,\n\t\t\t\t\t\tthis._retryCount,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn this._retry(fn);\n\t\t\t}\n\n\t\t\tif (this._throwHttpErrors) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync _fetch() {\n\t\tfor (const hook of this._hooks.beforeRequest) {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tconst result = await hook(this._input, this._options);\n\n\t\t\tif (result instanceof Response) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\tif (this._timeout === false) {\n\t\t\treturn globals.fetch(this._input, this._options);\n\t\t}\n\n\t\treturn timeout(globals.fetch(this._input, this._options), this._timeout, this.abortController);\n\t}\n\n\t/* istanbul ignore next */\n\t_stream(response, onDownloadProgress) {\n\t\tconst totalBytes = Number(response.headers.get('content-length')) || 0;\n\t\tlet transferredBytes = 0;\n\n\t\treturn new globals.Response(\n\t\t\tnew globals.ReadableStream({\n\t\t\t\tstart(controller) {\n\t\t\t\t\tconst reader = response.body.getReader();\n\n\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\tonDownloadProgress({percent: 0, transferredBytes: 0, totalBytes}, new Uint8Array());\n\t\t\t\t\t}\n\n\t\t\t\t\tasync function read() {\n\t\t\t\t\t\tconst {done, value} = await reader.read();\n\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\t\ttransferredBytes += value.byteLength;\n\t\t\t\t\t\t\tconst percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n\t\t\t\t\t\t\tonDownloadProgress({percent, transferredBytes, totalBytes}, value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t\t\tread();\n\t\t\t\t\t}\n\n\t\t\t\t\tread();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n\nconst validateAndMerge = (...sources) => {\n\tfor (const source of sources) {\n\t\tif ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n\t\t\tthrow new TypeError('The `options` argument must be an object');\n\t\t}\n\t}\n\n\treturn deepMerge({}, ...sources);\n};\n\nconst createInstance = defaults => {\n\tconst ky = (input, options) => new Ky(input, validateAndMerge(defaults, options));\n\n\tfor (const method of requestMethods) {\n\t\tky[method] = (input, options) => new Ky(input, validateAndMerge(defaults, options, {method}));\n\t}\n\n\tky.create = newDefaults => createInstance(validateAndMerge(newDefaults));\n\tky.extend = newDefaults => createInstance(validateAndMerge(defaults, newDefaults));\n\n\treturn ky;\n};\n\nexport default createInstance();\n\nexport {\n\tHTTPError,\n\tTimeoutError\n};\n"]},"metadata":{},"sourceType":"module"}