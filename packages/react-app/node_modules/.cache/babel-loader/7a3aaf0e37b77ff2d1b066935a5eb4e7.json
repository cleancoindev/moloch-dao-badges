{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexDataLength, hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { toUtf8String } from \"@ethersproject/strings\";\nimport { poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\"; //////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n\n  return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n\n  while (topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n\n  return topics.map(topic => {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      const unique = {};\n      topic.forEach(topic => {\n        unique[checkTopic(topic)] = true;\n      }); // The order of OR-topics does not matter\n\n      const sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\n\nfunction deserializeTopics(data) {\n  return data.split(/&/g).map(topic => {\n    return topic.split(\"|\").map(topic => {\n      return topic === \"null\" ? null : topic;\n    });\n  });\n}\n\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n\n  throw new Error(\"invalid event - \" + eventName);\n} //////////////////////////////\n// Helper Object\n\n\nfunction getTime() {\n  return new Date().getTime();\n} //////////////////////////////\n// Provider Object\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"pending\"\n *   - \"error\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\n\nexport class Event {\n  constructor(tag, listener, once) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n  }\n\n  get type() {\n    return this.tag.split(\":\")[0];\n  }\n\n  get hash() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"tx\") {\n      return null;\n    }\n\n    return comps[1];\n  }\n\n  get filter() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"filter\") {\n      return null;\n    }\n\n    const filter = {\n      address: comps[1],\n      topics: deserializeTopics(comps[2])\n    };\n\n    if (!filter.address || filter.address === \"*\") {\n      delete filter.address;\n    }\n\n    return filter;\n  }\n\n  pollable() {\n    return this.tag.indexOf(\":\") >= 0 || this.tag === \"block\" || this.tag === \"pending\";\n  }\n\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n  constructor(network) {\n    logger.checkNew(new.target, Provider);\n    super();\n    this.formatter = new.target.getFormatter();\n\n    if (network instanceof Promise) {\n      defineReadOnly(this, \"ready\", network.then(network => {\n        defineReadOnly(this, \"_network\", network);\n        return network;\n      })); // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n      this.ready.catch(error => {});\n    } else {\n      const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n\n      if (knownNetwork) {\n        defineReadOnly(this, \"_network\", knownNetwork);\n        defineReadOnly(this, \"ready\", Promise.resolve(this._network));\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n\n    this._maxInternalBlockNumber = -1024;\n    this._lastBlockNumber = -2; // Events being listened to\n\n    this._events = [];\n    this._pollingInterval = 4000;\n    this._emitted = {\n      block: -2\n    };\n    this._fastQueryDate = 0;\n  }\n\n  static getFormatter() {\n    if (defaultFormatter == null) {\n      defaultFormatter = new Formatter();\n    }\n\n    return defaultFormatter;\n  }\n\n  static getNetwork(network) {\n    return getNetwork(network == null ? \"homestead\" : network);\n  }\n\n  _getInternalBlockNumber(maxAge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ready;\n      const internalBlockNumber = this._internalBlockNumber;\n\n      if (maxAge > 0 && this._internalBlockNumber) {\n        const result = yield internalBlockNumber;\n\n        if (getTime() - result.respTime <= maxAge) {\n          return result.blockNumber;\n        }\n      }\n\n      const reqTime = getTime();\n      this._internalBlockNumber = this.perform(\"getBlockNumber\", {}).then(blockNumber => {\n        const respTime = getTime();\n        blockNumber = BigNumber.from(blockNumber).toNumber();\n\n        if (blockNumber < this._maxInternalBlockNumber) {\n          blockNumber = this._maxInternalBlockNumber;\n        }\n\n        this._maxInternalBlockNumber = blockNumber;\n\n        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n        return {\n          blockNumber,\n          reqTime,\n          respTime\n        };\n      });\n      return (yield this._internalBlockNumber).blockNumber;\n    });\n  }\n\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pollId = nextPollId++;\n      this.emit(\"willPoll\", pollId); // Track all running promises, so we can trigger a post-poll once they are complete\n\n      const runners = [];\n      const blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n\n      this._setFastBlockNumber(blockNumber); // If the block has not changed, meh.\n\n\n      if (blockNumber === this._lastBlockNumber) {\n        return;\n      } // First polling cycle, trigger a \"block\" events\n\n\n      if (this._emitted.block === -2) {\n        this._emitted.block = blockNumber - 1;\n      } // Notify all listener for each block that has passed\n\n\n      for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n        this.emit(\"block\", i);\n      } // The emitted block was updated, check for obsolete events\n\n\n      if (this._emitted.block !== blockNumber) {\n        this._emitted.block = blockNumber;\n        Object.keys(this._emitted).forEach(key => {\n          // The block event does not expire\n          if (key === \"block\") {\n            return;\n          } // The block we were at when we emitted this event\n\n\n          const eventBlockNumber = this._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n          // They should be garbage collected by the Provider when setting\n          // \"pending\" events\n\n          if (eventBlockNumber === \"pending\") {\n            return;\n          } // Evict any transaction hashes or block hashes over 12 blocks\n          // old, since they should not return null anyways\n\n\n          if (blockNumber - eventBlockNumber > 12) {\n            delete this._emitted[key];\n          }\n        });\n      } // First polling cycle\n\n\n      if (this._lastBlockNumber === -2) {\n        this._lastBlockNumber = blockNumber - 1;\n      } // Find all transaction hashes we are waiting on\n\n\n      this._events.forEach(event => {\n        switch (event.type) {\n          case \"tx\":\n            {\n              const hash = event.hash;\n              let runner = this.getTransactionReceipt(hash).then(receipt => {\n                if (!receipt || receipt.blockNumber == null) {\n                  return null;\n                }\n\n                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                this.emit(hash, receipt);\n                return null;\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n\n          case \"filter\":\n            {\n              const filter = event.filter;\n              filter.fromBlock = this._lastBlockNumber + 1;\n              filter.toBlock = blockNumber;\n              const runner = this.getLogs(filter).then(logs => {\n                if (logs.length === 0) {\n                  return;\n                }\n\n                logs.forEach(log => {\n                  this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                  this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                  this.emit(filter, log);\n                });\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n        }\n      });\n\n      this._lastBlockNumber = blockNumber;\n      Promise.all(runners).then(() => {\n        this.emit(\"didPoll\", pollId);\n      });\n      return null;\n    });\n  }\n\n  resetEventsBlock(blockNumber) {\n    this._lastBlockNumber = blockNumber - 1;\n\n    if (this.polling) {\n      this.poll();\n    }\n  }\n\n  get network() {\n    return this._network;\n  }\n\n  getNetwork() {\n    return this.ready;\n  }\n\n  get blockNumber() {\n    return this._fastBlockNumber;\n  }\n\n  get polling() {\n    return this._poller != null;\n  }\n\n  set polling(value) {\n    setTimeout(() => {\n      if (value && !this._poller) {\n        this._poller = setInterval(this.poll.bind(this), this.pollingInterval);\n        this.poll();\n      } else if (!value && this._poller) {\n        clearInterval(this._poller);\n        this._poller = null;\n      }\n    }, 0);\n  }\n\n  get pollingInterval() {\n    return this._pollingInterval;\n  }\n\n  set pollingInterval(value) {\n    if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n      throw new Error(\"invalid polling interval\");\n    }\n\n    this._pollingInterval = value;\n\n    if (this._poller) {\n      clearInterval(this._poller);\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this._pollingInterval);\n    }\n  }\n\n  _getFastBlockNumber() {\n    const now = getTime(); // Stale block number, request a newer value\n\n    if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n      this._fastQueryDate = now;\n      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n        }\n\n        return this._fastBlockNumber;\n      });\n    }\n\n    return this._fastBlockNumberPromise;\n  }\n\n  _setFastBlockNumber(blockNumber) {\n    // Older block, maybe a stale request\n    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n      return;\n    } // Update the time we updated the blocknumber\n\n\n    this._fastQueryDate = getTime(); // Newer block number, use  it\n\n    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n      this._fastBlockNumber = blockNumber;\n      this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n    }\n  } // @TODO: Add .poller which must be an event emitter with a 'start', 'stop' and 'block' event;\n  //        this will be used once we move to the WebSocket or other alternatives to polling\n\n\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (confirmations == null) {\n        confirmations = 1;\n      }\n\n      const receipt = yield this.getTransactionReceipt(transactionHash); // Receipt is already good\n\n      if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n        return receipt;\n      } // Poll until the receipt is good...\n\n\n      return new Promise((resolve, reject) => {\n        let timer = null;\n        let done = false;\n\n        const handler = receipt => {\n          if (receipt.confirmations < confirmations) {\n            return;\n          }\n\n          if (timer) {\n            clearTimeout(timer);\n          }\n\n          if (done) {\n            return;\n          }\n\n          done = true;\n          this.removeListener(transactionHash, handler);\n          resolve(receipt);\n        };\n\n        this.on(transactionHash, handler);\n\n        if (typeof timeout === \"number\" && timeout > 0) {\n          timer = setTimeout(() => {\n            if (done) {\n              return;\n            }\n\n            timer = null;\n            done = true;\n            this.removeListener(transactionHash, handler);\n            reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n              timeout: timeout\n            }));\n          }, timeout);\n\n          if (timer.unref) {\n            timer.unref();\n          }\n        }\n      });\n    });\n  }\n\n  getBlockNumber() {\n    return this._getInternalBlockNumber(0);\n  }\n\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ready;\n      return BigNumber.from((yield this.perform(\"getGasPrice\", {})));\n    });\n  }\n\n  getBalance(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ready;\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      return BigNumber.from((yield this.perform(\"getBalance\", params)));\n    });\n  }\n\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ready;\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      return BigNumber.from((yield this.perform(\"getTransactionCount\", params))).toNumber();\n    });\n  }\n\n  getCode(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ready;\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      return hexlify((yield this.perform(\"getCode\", params)));\n    });\n  }\n\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ready;\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag),\n        position: Promise.resolve(position).then(p => hexValue(p))\n      });\n      return hexlify((yield this.perform(\"getStorageAt\", params)));\n    });\n  } // This should be called by any subclass wrapping a TransactionResponse\n\n\n  _wrapTransaction(tx, hash) {\n    if (hash != null && hexDataLength(hash) !== 32) {\n      throw new Error(\"invalid response - sendTransaction\");\n    }\n\n    const result = tx; // Check the hash we expect is the same as the hash the server reported\n\n    if (hash != null && tx.hash !== hash) {\n      logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n        expectedHash: tx.hash,\n        returnedHash: hash\n      });\n    } // @TODO: (confirmations? number, timeout? number)\n\n\n    result.wait = confirmations => __awaiter(this, void 0, void 0, function* () {\n      // We know this transaction *must* exist (whether it gets mined is\n      // another story), so setting an emitted value forces us to\n      // wait even if the node returns null for the receipt\n      if (confirmations !== 0) {\n        this._emitted[\"t:\" + tx.hash] = \"pending\";\n      }\n\n      const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n\n      if (receipt == null && confirmations === 0) {\n        return null;\n      } // No longer pending, allow the polling loop to garbage collect this\n\n\n      this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n      if (receipt.status === 0) {\n        logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n          transactionHash: tx.hash,\n          transaction: tx,\n          receipt: receipt\n        });\n      }\n\n      return receipt;\n    });\n\n    return result;\n  }\n\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ready;\n      const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n      const tx = this.formatter.transaction(signedTransaction);\n\n      try {\n        const hash = yield this.perform(\"sendTransaction\", {\n          signedTransaction: hexTx\n        });\n        return this._wrapTransaction(tx, hash);\n      } catch (error) {\n        error.transaction = tx;\n        error.transactionHash = tx.hash;\n        throw error;\n      }\n    });\n  }\n\n  _getTransactionRequest(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const values = yield transaction;\n      const tx = {};\n      [\"from\", \"to\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);\n      });\n      [\"gasLimit\", \"gasPrice\", \"value\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? BigNumber.from(v) : null);\n      });\n      [\"data\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? hexlify(v) : null);\n      });\n      return this.formatter.transactionRequest((yield resolveProperties(tx)));\n    });\n  }\n\n  _getFilter(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (filter instanceof Promise) {\n        filter = yield filter;\n      }\n\n      const result = {};\n\n      if (filter.address != null) {\n        result.address = this._getAddress(filter.address);\n      }\n\n      [\"blockHash\", \"topics\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = filter[key];\n      });\n      [\"fromBlock\", \"toBlock\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = this._getBlockTag(filter[key]);\n      });\n      return this.formatter.filter((yield resolveProperties(filter)));\n    });\n  }\n\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ready;\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      return hexlify((yield this.perform(\"call\", params)));\n    });\n  }\n\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ready;\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction)\n      });\n      return BigNumber.from((yield this.perform(\"estimateGas\", params)));\n    });\n  }\n\n  _getAddress(addressOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const address = yield this.resolveName(addressOrName);\n\n      if (address == null) {\n        logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `resolveName(${JSON.stringify(addressOrName)})`\n        });\n      }\n\n      return address;\n    });\n  }\n\n  _getBlock(blockHashOrBlockTag, includeTransactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ready;\n\n      if (blockHashOrBlockTag instanceof Promise) {\n        blockHashOrBlockTag = yield blockHashOrBlockTag;\n      } // If blockTag is a number (not \"latest\", etc), this is the block number\n\n\n      let blockNumber = -128;\n      const params = {\n        includeTransactions: !!includeTransactions\n      };\n\n      if (isHexString(blockHashOrBlockTag, 32)) {\n        params.blockHash = blockHashOrBlockTag;\n      } else {\n        try {\n          params.blockTag = this.formatter.blockTag((yield this._getBlockTag(blockHashOrBlockTag)));\n\n          if (isHexString(params.blockTag)) {\n            blockNumber = parseInt(params.blockTag.substring(2), 16);\n          }\n        } catch (error) {\n          logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n        }\n      }\n\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const block = yield this.perform(\"getBlock\", params); // Block was not found\n\n        if (block == null) {\n          // For blockhashes, if we didn't say it existed, that blockhash may\n          // not exist. If we did see it though, perhaps from a log, we know\n          // it exists, and this node is just not caught up yet.\n          if (params.blockHash != null) {\n            if (this._emitted[\"b:\" + params.blockHash] == null) {\n              return null;\n            }\n          } // For block tags, if we are asking for a future block, we return null\n\n\n          if (params.blockTag != null) {\n            if (blockNumber > this._emitted.block) {\n              return null;\n            }\n          } // Retry on the next block\n\n\n          return undefined;\n        } // Add transactions\n\n\n        if (includeTransactions) {\n          let blockNumber = null;\n\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n\n            if (tx.blockNumber == null) {\n              tx.confirmations = 0;\n            } else if (tx.confirmations == null) {\n              if (blockNumber == null) {\n                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              } // Add the confirmations using the fast block number (pessimistic)\n\n\n              let confirmations = blockNumber - tx.blockNumber + 1;\n\n              if (confirmations <= 0) {\n                confirmations = 1;\n              }\n\n              tx.confirmations = confirmations;\n            }\n          }\n\n          return this.formatter.blockWithTransactions(block);\n        }\n\n        return this.formatter.block(block);\n      }), {\n        onceBlock: this\n      });\n    });\n  }\n\n  getBlock(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, false);\n  }\n\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, true);\n  }\n\n  getTransaction(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ready;\n\n      if (transactionHash instanceof Promise) {\n        transactionHash = yield transactionHash;\n      }\n\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransaction\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        }\n\n        const tx = this.formatter.transactionResponse(result);\n\n        if (tx.blockNumber == null) {\n          tx.confirmations = 0;\n        } else if (tx.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - tx.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          tx.confirmations = confirmations;\n        }\n\n        return this._wrapTransaction(tx);\n      }), {\n        onceBlock: this\n      });\n    });\n  }\n\n  getTransactionReceipt(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ready;\n\n      if (transactionHash instanceof Promise) {\n        transactionHash = yield transactionHash;\n      }\n\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransactionReceipt\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        } // \"geth-etc\" returns receipts before they are ready\n\n\n        if (result.blockHash == null) {\n          return undefined;\n        }\n\n        const receipt = this.formatter.receipt(result);\n\n        if (receipt.blockNumber == null) {\n          receipt.confirmations = 0;\n        } else if (receipt.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - receipt.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          receipt.confirmations = confirmations;\n        }\n\n        return receipt;\n      }), {\n        onceBlock: this\n      });\n    });\n  }\n\n  getLogs(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ready;\n      const params = yield resolveProperties({\n        filter: this._getFilter(filter)\n      });\n      const logs = yield this.perform(\"getLogs\", params);\n      logs.forEach(log => {\n        if (log.removed == null) {\n          log.removed = false;\n        }\n      });\n      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    });\n  }\n\n  getEtherPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.ready;\n      return this.perform(\"getEtherPrice\", {});\n    });\n  }\n\n  _getBlockTag(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (blockTag instanceof Promise) {\n        blockTag = yield blockTag;\n      }\n\n      if (typeof blockTag === \"number\" && blockTag < 0) {\n        if (blockTag % 1) {\n          logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n        }\n\n        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        blockNumber += blockTag;\n\n        if (blockNumber < 0) {\n          blockNumber = 0;\n        }\n\n        return this.formatter.blockTag(blockNumber);\n      }\n\n      return this.formatter.blockTag(blockTag);\n    });\n  }\n\n  _getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Get the resolver from the blockchain\n      const network = yield this.getNetwork(); // No ENS...\n\n      if (!network.ensAddress) {\n        logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"ENS\",\n          network: network.name\n        });\n      } // keccak256(\"resolver(bytes32)\")\n\n\n      const transaction = {\n        to: network.ensAddress,\n        data: \"0x0178b8bf\" + namehash(name).substring(2)\n      };\n      return this.formatter.callAddress((yield this.call(transaction)));\n    });\n  }\n\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (name instanceof Promise) {\n        name = yield name;\n      } // If it is already an address, nothing to resolve\n\n\n      try {\n        return Promise.resolve(this.formatter.address(name));\n      } catch (error) {\n        // If is is a hexstring, the address is bad (See #694)\n        if (isHexString(name)) {\n          throw error;\n        }\n      } // Get the addr from the resovler\n\n\n      const resolverAddress = yield this._getResolver(name);\n\n      if (!resolverAddress) {\n        return null;\n      } // keccak256(\"addr(bytes32)\")\n\n\n      const transaction = {\n        to: resolverAddress,\n        data: \"0x3b3b57de\" + namehash(name).substring(2)\n      };\n      return this.formatter.callAddress((yield this.call(transaction)));\n    });\n  }\n\n  lookupAddress(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (address instanceof Promise) {\n        address = yield address;\n      }\n\n      address = this.formatter.address(address);\n      const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n      const resolverAddress = yield this._getResolver(reverseName);\n\n      if (!resolverAddress) {\n        return null;\n      } // keccak(\"name(bytes32)\")\n\n\n      let bytes = arrayify((yield this.call({\n        to: resolverAddress,\n        data: \"0x691f3431\" + namehash(reverseName).substring(2)\n      }))); // Strip off the dynamic string pointer (0x20)\n\n      if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {\n        return null;\n      }\n\n      bytes = bytes.slice(32); // Not a length-prefixed string\n\n      if (bytes.length < 32) {\n        return null;\n      } // Get the length of the string (from the length-prefix)\n\n\n      const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n      bytes = bytes.slice(32); // Length longer than available data\n\n      if (length > bytes.length) {\n        return null;\n      }\n\n      const name = toUtf8String(bytes.slice(0, length)); // Make sure the reverse record matches the foward record\n\n      const addr = yield this.resolveName(name);\n\n      if (addr != address) {\n        return null;\n      }\n\n      return name;\n    });\n  }\n\n  perform(method, params) {\n    return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n  }\n\n  _startEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _stopEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _addEventListener(eventName, listener, once) {\n    const event = new Event(getEventTag(eventName), listener, once);\n\n    this._events.push(event);\n\n    this._startEvent(event);\n\n    return this;\n  }\n\n  on(eventName, listener) {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  once(eventName, listener) {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  emit(eventName, ...args) {\n    let result = false;\n    let stopped = [];\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag) {\n        return true;\n      }\n\n      setTimeout(() => {\n        event.listener.apply(this, args);\n      }, 0);\n      result = true;\n\n      if (event.once) {\n        stopped.push(event);\n        return false;\n      }\n\n      return true;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return result;\n  }\n\n  listenerCount(eventName) {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  listeners(eventName) {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);\n  }\n\n  off(eventName, listener) {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped = [];\n    let found = false;\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n\n      if (found) {\n        return true;\n      }\n\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n  removeAllListeners(eventName) {\n    let stopped = [];\n\n    if (eventName == null) {\n      stopped = this._events;\n      this._events = [];\n    } else {\n      const eventTag = getEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/@ethersproject/providers/lib.esm/base-provider.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","ForkEvent","Provider","BigNumber","arrayify","hexDataLength","hexlify","hexValue","isHexString","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","toUtf8String","poll","Logger","version","logger","Formatter","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","Event","constructor","tag","listener","once","type","hash","comps","filter","pollable","defaultFormatter","nextPollId","BaseProvider","network","checkNew","new","target","formatter","getFormatter","ready","catch","error","knownNetwork","_network","_maxInternalBlockNumber","_lastBlockNumber","_events","_pollingInterval","_emitted","block","_fastQueryDate","_getInternalBlockNumber","maxAge","internalBlockNumber","_internalBlockNumber","respTime","blockNumber","reqTime","perform","from","toNumber","_setFastBlockNumber","pollId","emit","runners","pollingInterval","i","key","eventBlockNumber","event","runner","getTransactionReceipt","receipt","push","fromBlock","toBlock","getLogs","logs","log","blockHash","transactionHash","all","resetEventsBlock","polling","_fastBlockNumber","_poller","setTimeout","setInterval","bind","clearInterval","parseInt","String","_getFastBlockNumber","now","_fastBlockNumberPromise","getBlockNumber","waitForTransaction","confirmations","timeout","timer","handler","clearTimeout","removeListener","on","makeError","errors","TIMEOUT","unref","getGasPrice","getBalance","addressOrName","blockTag","params","_getAddress","_getBlockTag","getTransactionCount","getCode","getStorageAt","position","p","_wrapTransaction","tx","throwError","UNKNOWN_ERROR","expectedHash","returnedHash","wait","status","CALL_EXCEPTION","transaction","sendTransaction","signedTransaction","hexTx","t","_getTransactionRequest","values","v","transactionRequest","_getFilter","call","estimateGas","resolveName","UNSUPPORTED_OPERATION","operation","JSON","stringify","_getBlock","blockHashOrBlockTag","includeTransactions","substring","undefined","transactions","blockWithTransactions","onceBlock","getBlock","getBlockWithTransactions","getTransaction","transactionResponse","removed","arrayOf","filterLog","getEtherPrice","_getResolver","name","ensAddress","to","callAddress","resolverAddress","lookupAddress","reverseName","bytes","eq","addr","method","NOT_IMPLEMENTED","_startEvent","_stopEvent","_addEventListener","args","stopped","eventTag","listenerCount","listeners","off","removeAllListeners","found"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexDataLength, hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { toUtf8String } from \"@ethersproject/strings\";\nimport { poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if (hexDataLength(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    return data.split(/&/g).map((topic) => {\n        return topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null : topic);\n        });\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"pending\"\n *   - \"error\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nexport class Event {\n    constructor(tag, listener, once) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const filter = {\n            address: comps[1],\n            topics: deserializeTopics(comps[2])\n        };\n        if (!filter.address || filter.address === \"*\") {\n            delete filter.address;\n        }\n        return filter;\n    }\n    pollable() {\n        return (this.tag.indexOf(\":\") >= 0 || this.tag === \"block\" || this.tag === \"pending\");\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n    constructor(network) {\n        logger.checkNew(new.target, Provider);\n        super();\n        this.formatter = new.target.getFormatter();\n        if (network instanceof Promise) {\n            defineReadOnly(this, \"ready\", network.then((network) => {\n                defineReadOnly(this, \"_network\", network);\n                return network;\n            }));\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            this.ready.catch((error) => { });\n        }\n        else {\n            const knownNetwork = getStatic((new.target), \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                defineReadOnly(this, \"ready\", Promise.resolve(this._network));\n            }\n            else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        // Events being listened to\n        this._events = [];\n        this._pollingInterval = 4000;\n        this._emitted = { block: -2 };\n        this._fastQueryDate = 0;\n    }\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n    static getNetwork(network) {\n        return getNetwork((network == null) ? \"homestead\" : network);\n    }\n    _getInternalBlockNumber(maxAge) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            const internalBlockNumber = this._internalBlockNumber;\n            if (maxAge > 0 && this._internalBlockNumber) {\n                const result = yield internalBlockNumber;\n                if ((getTime() - result.respTime) <= maxAge) {\n                    return result.blockNumber;\n                }\n            }\n            const reqTime = getTime();\n            this._internalBlockNumber = this.perform(\"getBlockNumber\", {}).then((blockNumber) => {\n                const respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return { blockNumber, reqTime, respTime };\n            });\n            return (yield this._internalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            this.emit(\"willPoll\", pollId);\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            const blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            this._setFastBlockNumber(blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            // Notify all listener for each block that has passed\n            for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key) => {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event) => {\n                switch (event.type) {\n                    case \"tx\": {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                            if (!receipt || receipt.blockNumber == null) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                    case \"filter\": {\n                        const filter = event.filter;\n                        filter.fromBlock = this._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n                        const runner = this.getLogs(filter).then((logs) => {\n                            if (logs.length === 0) {\n                                return;\n                            }\n                            logs.forEach((log) => {\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                this.emit(filter, log);\n                            });\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            Promise.all(runners).then(() => {\n                this.emit(\"didPoll\", pollId);\n            });\n            return null;\n        });\n    }\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    getNetwork() {\n        return this.ready;\n    }\n    get blockNumber() {\n        return this._fastBlockNumber;\n    }\n    get polling() {\n        return (this._poller != null);\n    }\n    set polling(value) {\n        setTimeout(() => {\n            if (value && !this._poller) {\n                this._poller = setInterval(this.poll.bind(this), this.pollingInterval);\n                this.poll();\n            }\n            else if (!value && this._poller) {\n                clearInterval(this._poller);\n                this._poller = null;\n            }\n        }, 0);\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    // @TODO: Add .poller which must be an event emitter with a 'start', 'stop' and 'block' event;\n    //        this will be used once we move to the WebSocket or other alternatives to polling\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (confirmations == null) {\n                confirmations = 1;\n            }\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject) => {\n                let timer = null;\n                let done = false;\n                const handler = (receipt) => {\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (timer) {\n                        clearTimeout(timer);\n                    }\n                    if (done) {\n                        return;\n                    }\n                    done = true;\n                    this.removeListener(transactionHash, handler);\n                    resolve(receipt);\n                };\n                this.on(transactionHash, handler);\n                if (typeof (timeout) === \"number\" && timeout > 0) {\n                    timer = setTimeout(() => {\n                        if (done) {\n                            return;\n                        }\n                        timer = null;\n                        done = true;\n                        this.removeListener(transactionHash, handler);\n                        reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return this._getInternalBlockNumber(0);\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            return BigNumber.from(yield this.perform(\"getGasPrice\", {}));\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            return BigNumber.from(yield this.perform(\"getBalance\", params));\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            return BigNumber.from(yield this.perform(\"getTransactionCount\", params)).toNumber();\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            return hexlify(yield this.perform(\"getCode\", params));\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p) => hexValue(p))\n            });\n            return hexlify(yield this.perform(\"getStorageAt\", params));\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash) {\n        if (hash != null && hexDataLength(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        // @TODO: (confirmations? number, timeout? number)\n        result.wait = (confirmations) => __awaiter(this, void 0, void 0, function* () {\n            // We know this transaction *must* exist (whether it gets mined is\n            // another story), so setting an emitted value forces us to\n            // wait even if the node returns null for the receipt\n            if (confirmations !== 0) {\n                this._emitted[\"t:\" + tx.hash] = \"pending\";\n            }\n            const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n            if (receipt == null && confirmations === 0) {\n                return null;\n            }\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n                return this._wrapTransaction(tx, hash);\n            }\n            catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));\n            });\n            [\"gasLimit\", \"gasPrice\", \"value\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));\n            });\n            [\"data\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));\n            });\n            return this.formatter.transactionRequest(yield resolveProperties(tx));\n        });\n    }\n    _getFilter(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (filter instanceof Promise) {\n                filter = yield filter;\n            }\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter(yield resolveProperties(filter));\n        });\n    }\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            return hexlify(yield this.perform(\"call\", params));\n        });\n    }\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            return BigNumber.from(yield this.perform(\"estimateGas\", params));\n        });\n    }\n    _getAddress(addressOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `resolveName(${JSON.stringify(addressOrName)})`\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            if (blockHashOrBlockTag instanceof Promise) {\n                blockHashOrBlockTag = yield blockHashOrBlockTag;\n            }\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if (isHexString(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            }\n            else {\n                try {\n                    params.blockTag = this.formatter.blockTag(yield this._getBlockTag(blockHashOrBlockTag));\n                    if (isHexString(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                }\n                catch (error) {\n                    logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const block = yield this.perform(\"getBlock\", params);\n                // Block was not found\n                if (block == null) {\n                    // For blockhashes, if we didn't say it existed, that blockhash may\n                    // not exist. If we did see it though, perhaps from a log, we know\n                    // it exists, and this node is just not caught up yet.\n                    if (params.blockHash != null) {\n                        if (this._emitted[\"b:\" + params.blockHash] == null) {\n                            return null;\n                        }\n                    }\n                    // For block tags, if we are asking for a future block, we return null\n                    if (params.blockTag != null) {\n                        if (blockNumber > this._emitted.block) {\n                            return null;\n                        }\n                    }\n                    // Retry on the next block\n                    return undefined;\n                }\n                // Add transactions\n                if (includeTransactions) {\n                    let blockNumber = null;\n                    for (let i = 0; i < block.transactions.length; i++) {\n                        const tx = block.transactions[i];\n                        if (tx.blockNumber == null) {\n                            tx.confirmations = 0;\n                        }\n                        else if (tx.confirmations == null) {\n                            if (blockNumber == null) {\n                                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                            }\n                            // Add the confirmations using the fast block number (pessimistic)\n                            let confirmations = (blockNumber - tx.blockNumber) + 1;\n                            if (confirmations <= 0) {\n                                confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                        }\n                    }\n                    return this.formatter.blockWithTransactions(block);\n                }\n                return this.formatter.block(block);\n            }), { onceBlock: this });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    }\n    getTransaction(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            if (transactionHash instanceof Promise) {\n                transactionHash = yield transactionHash;\n            }\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransaction\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                const tx = this.formatter.transactionResponse(result);\n                if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                }\n                else if (tx.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - tx.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                }\n                return this._wrapTransaction(tx);\n            }), { onceBlock: this });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            if (transactionHash instanceof Promise) {\n                transactionHash = yield transactionHash;\n            }\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransactionReceipt\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                // \"geth-etc\" returns receipts before they are ready\n                if (result.blockHash == null) {\n                    return undefined;\n                }\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }), { onceBlock: this });\n        });\n    }\n    getLogs(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            const params = yield resolveProperties({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ready;\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (blockTag instanceof Promise) {\n                blockTag = yield blockTag;\n            }\n            if (typeof (blockTag) === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    _getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Get the resolver from the blockchain\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"ENS\", network: network.name });\n            }\n            // keccak256(\"resolver(bytes32)\")\n            const transaction = {\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            };\n            return this.formatter.callAddress(yield this.call(transaction));\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (name instanceof Promise) {\n                name = yield name;\n            }\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            }\n            catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if (isHexString(name)) {\n                    throw error;\n                }\n            }\n            // Get the addr from the resovler\n            const resolverAddress = yield this._getResolver(name);\n            if (!resolverAddress) {\n                return null;\n            }\n            // keccak256(\"addr(bytes32)\")\n            const transaction = {\n                to: resolverAddress,\n                data: (\"0x3b3b57de\" + namehash(name).substring(2))\n            };\n            return this.formatter.callAddress(yield this.call(transaction));\n        });\n    }\n    lookupAddress(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (address instanceof Promise) {\n                address = yield address;\n            }\n            address = this.formatter.address(address);\n            const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddress = yield this._getResolver(reverseName);\n            if (!resolverAddress) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            let bytes = arrayify(yield this.call({\n                to: resolverAddress,\n                data: (\"0x691f3431\" + namehash(reverseName).substring(2))\n            }));\n            // Strip off the dynamic string pointer (0x20)\n            if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {\n                return null;\n            }\n            bytes = bytes.slice(32);\n            // Not a length-prefixed string\n            if (bytes.length < 32) {\n                return null;\n            }\n            // Get the length of the string (from the length-prefix)\n            const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n            bytes = bytes.slice(32);\n            // Length longer than available data\n            if (length > bytes.length) {\n                return null;\n            }\n            const name = toUtf8String(bytes.slice(0, length));\n            // Make sure the reverse record matches the foward record\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    perform(method, params) {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n    _startEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _stopEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName, ...args) {\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}