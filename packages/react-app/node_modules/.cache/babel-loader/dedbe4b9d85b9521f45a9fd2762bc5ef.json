{"ast":null,"code":"const base64url = require('base64url');\n\nconst {\n  verifyJWT\n} = require('did-jwt');\n\nconst encodeSection = data => base64url.encode(JSON.stringify(data));\n\nconst TYPE = '3ID';\nconst JWT_HEADER = encodeSection({\n  typ: 'JWT',\n  alg: 'ES256K'\n});\n\nclass OdbIdentityProvider {\n  constructor({\n    threeId\n  }) {\n    // super(options)\n    this.threeId = threeId;\n  }\n\n  static get type() {\n    return '3ID';\n  }\n\n  async getId({\n    space\n  }) {\n    if (space) {\n      return this.threeId.getSubDID(space);\n    } else {\n      return this.threeId.DID;\n    }\n  }\n\n  async signIdentity(data, {\n    space\n  }) {\n    const payload = {\n      data,\n      iat: null\n    };\n    const opts = !space ? {\n      use3ID: true\n    } : {\n      space\n    };\n    return (await this.threeId.signJWT(payload, opts)).split('.')[2];\n  }\n\n  static async verifyIdentity(identity) {\n    const payload = encodeSection({\n      iat: null,\n      data: identity.publicKey + identity.signatures.id,\n      iss: identity.id\n    });\n    const jwt = `${JWT_HEADER}.${payload}.${identity.signatures.publicKey}`;\n\n    try {\n      await verifyJWT(jwt, {\n        auth: true\n      });\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n}\n\nmodule.exports = OdbIdentityProvider;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/3box-orbitdb-plugins/src/odbIdentityProvider.js"],"names":["base64url","require","verifyJWT","encodeSection","data","encode","JSON","stringify","TYPE","JWT_HEADER","typ","alg","OdbIdentityProvider","constructor","threeId","type","getId","space","getSubDID","DID","signIdentity","payload","iat","opts","use3ID","signJWT","split","verifyIdentity","identity","publicKey","signatures","id","iss","jwt","auth","e","module","exports"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,OAAO,CAAC,SAAD,CAA7B;;AAEA,MAAME,aAAa,GAAGC,IAAI,IAAIJ,SAAS,CAACK,MAAV,CAAiBC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAjB,CAA9B;;AAEA,MAAMI,IAAI,GAAG,KAAb;AACA,MAAMC,UAAU,GAAGN,aAAa,CAAC;AAAEO,EAAAA,GAAG,EAAE,KAAP;AAAcC,EAAAA,GAAG,EAAE;AAAnB,CAAD,CAAhC;;AAGA,MAAMC,mBAAN,CAA0B;AACxBC,EAAAA,WAAW,CAAE;AAAEC,IAAAA;AAAF,GAAF,EAAe;AACxB;AACA,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAED,aAAWC,IAAX,GAAmB;AACjB,WAAO,KAAP;AACD;;AAED,QAAMC,KAAN,CAAa;AAAEC,IAAAA;AAAF,GAAb,EAAwB;AACtB,QAAIA,KAAJ,EAAW;AACT,aAAO,KAAKH,OAAL,CAAaI,SAAb,CAAuBD,KAAvB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAKH,OAAL,CAAaK,GAApB;AACD;AACF;;AAED,QAAMC,YAAN,CAAoBhB,IAApB,EAA0B;AAAEa,IAAAA;AAAF,GAA1B,EAAqC;AACnC,UAAMI,OAAO,GAAG;AACdjB,MAAAA,IADc;AAEdkB,MAAAA,GAAG,EAAE;AAFS,KAAhB;AAIA,UAAMC,IAAI,GAAG,CAACN,KAAD,GAAS;AAAEO,MAAAA,MAAM,EAAE;AAAV,KAAT,GAA4B;AAAEP,MAAAA;AAAF,KAAzC;AACA,WAAO,CAAC,MAAM,KAAKH,OAAL,CAAaW,OAAb,CAAqBJ,OAArB,EAA8BE,IAA9B,CAAP,EAA4CG,KAA5C,CAAkD,GAAlD,EAAuD,CAAvD,CAAP;AACD;;AAED,eAAaC,cAAb,CAA6BC,QAA7B,EAAuC;AACrC,UAAMP,OAAO,GAAGlB,aAAa,CAAC;AAC5BmB,MAAAA,GAAG,EAAE,IADuB;AAE5BlB,MAAAA,IAAI,EAAEwB,QAAQ,CAACC,SAAT,GAAqBD,QAAQ,CAACE,UAAT,CAAoBC,EAFnB;AAG5BC,MAAAA,GAAG,EAAEJ,QAAQ,CAACG;AAHc,KAAD,CAA7B;AAKA,UAAME,GAAG,GAAI,GAAExB,UAAW,IAAGY,OAAQ,IAAGO,QAAQ,CAACE,UAAT,CAAoBD,SAAU,EAAtE;;AACA,QAAI;AACF,YAAM3B,SAAS,CAAC+B,GAAD,EAAM;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAN,CAAf;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACA;;AAxCsB;;AA2C1BC,MAAM,CAACC,OAAP,GAAiBzB,mBAAjB","sourcesContent":["const base64url = require('base64url')\nconst { verifyJWT } = require('did-jwt')\n\nconst encodeSection = data => base64url.encode(JSON.stringify(data))\n\nconst TYPE = '3ID'\nconst JWT_HEADER = encodeSection({ typ: 'JWT', alg: 'ES256K' })\n\n\nclass OdbIdentityProvider {\n  constructor ({ threeId }) {\n    // super(options)\n    this.threeId = threeId\n  }\n\n  static get type () {\n    return '3ID'\n  }\n\n  async getId ({ space }) {\n    if (space) {\n      return this.threeId.getSubDID(space)\n    } else {\n      return this.threeId.DID\n    }\n  }\n\n  async signIdentity (data, { space }) {\n    const payload = {\n      data,\n      iat: null\n    }\n    const opts = !space ? { use3ID: true } : { space }\n    return (await this.threeId.signJWT(payload, opts)).split('.')[2]\n  }\n\n  static async verifyIdentity (identity) {\n    const payload = encodeSection({\n      iat: null,\n      data: identity.publicKey + identity.signatures.id,\n      iss: identity.id\n    })\n    const jwt = `${JWT_HEADER}.${payload}.${identity.signatures.publicKey}`\n    try {\n      await verifyJWT(jwt, { auth: true })\n    } catch (e) {\n      return false\n    }\n    return true\n   }\n}\n\nmodule.exports = OdbIdentityProvider\n"]},"metadata":{},"sourceType":"script"}