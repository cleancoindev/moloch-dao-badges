{"ast":null,"code":"const io = require('orbit-db-io');\n\nconst Buffer = require('safe-buffer').Buffer; //const AccessController = require('./access-controller-interface')\n\n\nconst resolve = require('did-resolver').default;\n\nconst type = 'legacy-ipfs-3box';\n\nconst publicKeyFromDID = async did => {\n  // TODO - this should look at authentication keys and get publicKey from that\n  const doc = await resolve(did);\n  return doc.publicKey.find(entry => {\n    const id = entry.id.split('#');\n    return id[0] === doc.id && (id[1] === 'subSigningKey' || id[1] === 'signingKey');\n  }).publicKeyHex;\n};\n\nclass LegacyIPFS3BoxAccessController {\n  constructor(ipfs, options) {\n    //super()\n    this._ipfs = ipfs;\n    this._write = Array.from(options.write || []);\n  } // Returns the type of the access controller\n\n\n  static get type() {\n    return type;\n  } // Return a Set of keys that have `access` capability\n\n\n  get write() {\n    return this._write;\n  }\n\n  async canAppend(entry, identityProvider) {\n    // Allow if access list contain the writer's publicKey or is '*'\n    const publicKey = entry.v === 0 ? entry.key : await publicKeyFromDID(entry.identity.id);\n\n    if (this.write.includes(publicKey) || this.write.includes('*')) {\n      return entry.v === 0 ? true : await identityProvider.verifyIdentity(entry.identity);\n    }\n\n    return false;\n  }\n\n  async load(address) {\n    // Transform '/ipfs/QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    // to 'QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    if (address.indexOf('/ipfs') === 0) {\n      address = address.split('/')[2];\n    }\n\n    try {\n      const access = await io.read(this._ipfs, address);\n      this._write = access.write;\n    } catch (e) {\n      console.log('LegacyIPFS3BoxAccessController.load ERROR:', e);\n    }\n  }\n\n  async save(options) {\n    let cid;\n    const access = {\n      admin: [],\n      write: this.write,\n      read: []\n    };\n\n    try {\n      cid = await io.write(this._ipfs, 'raw', Buffer.from(JSON.stringify(access, null, 2)), {\n        format: 'dag-pb'\n      });\n    } catch (e) {\n      console.log('LegacyIPFS3BoxAccessController.save ERROR:', e);\n    } // return the manifest data\n\n\n    return {\n      address: cid,\n      skipManifest: true\n    };\n  }\n\n  static async create(orbitdb, options = {}) {\n    options = { ...options,\n      ...{\n        write: options.write || [orbitdb.identity.publicKey]\n      }\n    };\n    return new LegacyIPFS3BoxAccessController(orbitdb._ipfs, options);\n  }\n\n}\n\nmodule.exports = LegacyIPFS3BoxAccessController;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/3box-orbitdb-plugins/src/legacyIpfs3boxAccessController.js"],"names":["io","require","Buffer","resolve","default","type","publicKeyFromDID","did","doc","publicKey","find","entry","id","split","publicKeyHex","LegacyIPFS3BoxAccessController","constructor","ipfs","options","_ipfs","_write","Array","from","write","canAppend","identityProvider","v","key","identity","includes","verifyIdentity","load","address","indexOf","access","read","e","console","log","save","cid","admin","JSON","stringify","format","skipManifest","create","orbitdb","module","exports"],"mappings":"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","sourcesContent":["const io = require('orbit-db-io')\nconst Buffer = require('safe-buffer').Buffer\n//const AccessController = require('./access-controller-interface')\nconst resolve = require('did-resolver').default\nconst type = 'legacy-ipfs-3box'\n\nconst publicKeyFromDID = async did => {\n  // TODO - this should look at authentication keys and get publicKey from that\n  const doc = await resolve(did)\n  return doc.publicKey.find(entry => {\n    const id = entry.id.split('#')\n    return id[0] === doc.id &&\n      (id[1] === 'subSigningKey' || id[1] === 'signingKey')\n  }).publicKeyHex\n}\n\nclass LegacyIPFS3BoxAccessController {\n  constructor (ipfs, options) {\n    //super()\n    this._ipfs = ipfs\n    this._write = Array.from(options.write || [])\n  }\n\n  // Returns the type of the access controller\n  static get type () { return type }\n\n  // Return a Set of keys that have `access` capability\n  get write () {\n    return this._write\n  }\n\n  async canAppend (entry, identityProvider) {\n    // Allow if access list contain the writer's publicKey or is '*'\n    const publicKey = entry.v === 0 ? entry.key : await publicKeyFromDID(entry.identity.id)\n    if (this.write.includes(publicKey) ||\n      this.write.includes('*')) {\n      return entry.v === 0 ? true : await identityProvider.verifyIdentity(entry.identity)\n    }\n    return false\n  }\n\n  async load (address) {\n    // Transform '/ipfs/QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    // to 'QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    if (address.indexOf('/ipfs') === 0) { address = address.split('/')[2] }\n\n    try {\n      const access = await io.read(this._ipfs, address)\n      this._write = access.write\n    } catch (e) {\n      console.log('LegacyIPFS3BoxAccessController.load ERROR:', e)\n    }\n  }\n\n  async save (options) {\n    let cid\n    const access = { admin: [], write: this.write, read: [] }\n    try {\n      cid = await io.write(this._ipfs, 'raw', Buffer.from(JSON.stringify(access, null, 2)), { format: 'dag-pb'})\n\n    } catch (e) {\n      console.log('LegacyIPFS3BoxAccessController.save ERROR:', e)\n    }\n    // return the manifest data\n    return { address: cid, skipManifest: true }\n  }\n\n  static async create (orbitdb, options = {}) {\n    options = { ...options, ...{ write: options.write || [orbitdb.identity.publicKey] } }\n    return new LegacyIPFS3BoxAccessController(orbitdb._ipfs, options)\n  }\n}\n\nmodule.exports = LegacyIPFS3BoxAccessController\n"]},"metadata":{},"sourceType":"script"}