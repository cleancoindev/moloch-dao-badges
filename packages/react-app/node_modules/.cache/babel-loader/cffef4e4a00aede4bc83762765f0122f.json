{"ast":null,"code":"'use strict';\n\nconst exporter = require('ipfs-unixfs-exporter');\n\nconst errCode = require('err-code');\n\nconst {\n  normalizePath,\n  mapFile\n} = require('./utils');\n\nmodule.exports = function (self) {\n  return async function* getAsyncIterator(ipfsPath, options) {\n    options = options || {};\n\n    if (options.preload !== false) {\n      let pathComponents;\n\n      try {\n        pathComponents = normalizePath(ipfsPath).split('/');\n      } catch (err) {\n        throw errCode(err, 'ERR_INVALID_PATH');\n      }\n\n      self._preload(pathComponents[0]);\n    }\n\n    for await (const file of exporter.recursive(ipfsPath, self._ipld, options)) {\n      yield mapFile(file, { ...options,\n        includeContent: true\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipfs/src/core/components/files-regular/get-async-iterator.js"],"names":["exporter","require","errCode","normalizePath","mapFile","module","exports","self","getAsyncIterator","ipfsPath","options","preload","pathComponents","split","err","_preload","file","recursive","_ipld","includeContent"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,IAA6BH,OAAO,CAAC,SAAD,CAA1C;;AAEAI,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC/B,SAAO,gBAAiBC,gBAAjB,CAAmCC,QAAnC,EAA6CC,OAA7C,EAAsD;AAC3DA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,QAAIA,OAAO,CAACC,OAAR,KAAoB,KAAxB,EAA+B;AAC7B,UAAIC,cAAJ;;AAEA,UAAI;AACFA,QAAAA,cAAc,GAAGT,aAAa,CAACM,QAAD,CAAb,CAAwBI,KAAxB,CAA8B,GAA9B,CAAjB;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,cAAMZ,OAAO,CAACY,GAAD,EAAM,kBAAN,CAAb;AACD;;AAEDP,MAAAA,IAAI,CAACQ,QAAL,CAAcH,cAAc,CAAC,CAAD,CAA5B;AACD;;AAED,eAAW,MAAMI,IAAjB,IAAyBhB,QAAQ,CAACiB,SAAT,CAAmBR,QAAnB,EAA6BF,IAAI,CAACW,KAAlC,EAAyCR,OAAzC,CAAzB,EAA4E;AAC1E,YAAMN,OAAO,CAACY,IAAD,EAAO,EAClB,GAAGN,OADe;AAElBS,QAAAA,cAAc,EAAE;AAFE,OAAP,CAAb;AAID;AACF,GArBD;AAsBD,CAvBD","sourcesContent":["'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst errCode = require('err-code')\nconst { normalizePath, mapFile } = require('./utils')\n\nmodule.exports = function (self) {\n  return async function * getAsyncIterator (ipfsPath, options) {\n    options = options || {}\n\n    if (options.preload !== false) {\n      let pathComponents\n\n      try {\n        pathComponents = normalizePath(ipfsPath).split('/')\n      } catch (err) {\n        throw errCode(err, 'ERR_INVALID_PATH')\n      }\n\n      self._preload(pathComponents[0])\n    }\n\n    for await (const file of exporter.recursive(ipfsPath, self._ipld, options)) {\n      yield mapFile(file, {\n        ...options,\n        includeContent: true\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}