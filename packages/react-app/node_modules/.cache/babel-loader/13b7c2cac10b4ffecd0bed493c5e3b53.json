{"ast":null,"code":"\"use strict\";\n\nvar nacl = require('tweetnacl');\n\nnacl.util = require('tweetnacl-util');\n\nvar randomNonce = function randomNonce() {\n  return nacl.randomBytes(24);\n};\n\nvar symEncryptBase = function symEncryptBase(msg, symKey, nonce) {\n  nonce = nonce || randomNonce();\n\n  if (typeof msg === 'string') {\n    msg = nacl.util.decodeUTF8(msg);\n  }\n\n  var ciphertext = nacl.secretbox(msg, nonce, symKey);\n  return {\n    nonce: nacl.util.encodeBase64(nonce),\n    ciphertext: nacl.util.encodeBase64(ciphertext)\n  };\n};\n\nvar symDecryptBase = function symDecryptBase(ciphertext, symKey, nonce, toBuffer) {\n  ciphertext = nacl.util.decodeBase64(ciphertext);\n  nonce = nacl.util.decodeBase64(nonce);\n  var cleartext = nacl.secretbox.open(ciphertext, nonce, symKey);\n\n  if (toBuffer) {\n    return cleartext ? Buffer.from(cleartext) : null;\n  }\n\n  return cleartext ? nacl.util.encodeUTF8(cleartext) : null;\n};\n\nvar newSymKey = function newSymKey() {\n  return nacl.randomBytes(32);\n};\n\nmodule.exports = {\n  randomNonce: randomNonce,\n  symEncryptBase: symEncryptBase,\n  symDecryptBase: symDecryptBase,\n  newSymKey: newSymKey\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/3box/lib/3id/utils.js"],"names":["nacl","require","util","randomNonce","randomBytes","symEncryptBase","msg","symKey","nonce","decodeUTF8","ciphertext","secretbox","encodeBase64","symDecryptBase","toBuffer","decodeBase64","cleartext","open","Buffer","from","encodeUTF8","newSymKey","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB;;AAEAD,IAAI,CAACE,IAAL,GAAYD,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIE,WAAW,GAAG,SAASA,WAAT,GAAuB;AACvC,SAAOH,IAAI,CAACI,WAAL,CAAiB,EAAjB,CAAP;AACD,CAFD;;AAIA,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,GAAxB,EAA6BC,MAA7B,EAAqCC,KAArC,EAA4C;AAC/DA,EAAAA,KAAK,GAAGA,KAAK,IAAIL,WAAW,EAA5B;;AAEA,MAAI,OAAOG,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,IAAAA,GAAG,GAAGN,IAAI,CAACE,IAAL,CAAUO,UAAV,CAAqBH,GAArB,CAAN;AACD;;AAED,MAAII,UAAU,GAAGV,IAAI,CAACW,SAAL,CAAeL,GAAf,EAAoBE,KAApB,EAA2BD,MAA3B,CAAjB;AACA,SAAO;AACLC,IAAAA,KAAK,EAAER,IAAI,CAACE,IAAL,CAAUU,YAAV,CAAuBJ,KAAvB,CADF;AAELE,IAAAA,UAAU,EAAEV,IAAI,CAACE,IAAL,CAAUU,YAAV,CAAuBF,UAAvB;AAFP,GAAP;AAID,CAZD;;AAcA,IAAIG,cAAc,GAAG,SAASA,cAAT,CAAwBH,UAAxB,EAAoCH,MAApC,EAA4CC,KAA5C,EAAmDM,QAAnD,EAA6D;AAChFJ,EAAAA,UAAU,GAAGV,IAAI,CAACE,IAAL,CAAUa,YAAV,CAAuBL,UAAvB,CAAb;AACAF,EAAAA,KAAK,GAAGR,IAAI,CAACE,IAAL,CAAUa,YAAV,CAAuBP,KAAvB,CAAR;AACA,MAAIQ,SAAS,GAAGhB,IAAI,CAACW,SAAL,CAAeM,IAAf,CAAoBP,UAApB,EAAgCF,KAAhC,EAAuCD,MAAvC,CAAhB;;AAEA,MAAIO,QAAJ,EAAc;AACZ,WAAOE,SAAS,GAAGE,MAAM,CAACC,IAAP,CAAYH,SAAZ,CAAH,GAA4B,IAA5C;AACD;;AAED,SAAOA,SAAS,GAAGhB,IAAI,CAACE,IAAL,CAAUkB,UAAV,CAAqBJ,SAArB,CAAH,GAAqC,IAArD;AACD,CAVD;;AAYA,IAAIK,SAAS,GAAG,SAASA,SAAT,GAAqB;AACnC,SAAOrB,IAAI,CAACI,WAAL,CAAiB,EAAjB,CAAP;AACD,CAFD;;AAIAkB,MAAM,CAACC,OAAP,GAAiB;AACfpB,EAAAA,WAAW,EAAEA,WADE;AAEfE,EAAAA,cAAc,EAAEA,cAFD;AAGfQ,EAAAA,cAAc,EAAEA,cAHD;AAIfQ,EAAAA,SAAS,EAAEA;AAJI,CAAjB","sourcesContent":["\"use strict\";\n\nvar nacl = require('tweetnacl');\n\nnacl.util = require('tweetnacl-util');\n\nvar randomNonce = function randomNonce() {\n  return nacl.randomBytes(24);\n};\n\nvar symEncryptBase = function symEncryptBase(msg, symKey, nonce) {\n  nonce = nonce || randomNonce();\n\n  if (typeof msg === 'string') {\n    msg = nacl.util.decodeUTF8(msg);\n  }\n\n  var ciphertext = nacl.secretbox(msg, nonce, symKey);\n  return {\n    nonce: nacl.util.encodeBase64(nonce),\n    ciphertext: nacl.util.encodeBase64(ciphertext)\n  };\n};\n\nvar symDecryptBase = function symDecryptBase(ciphertext, symKey, nonce, toBuffer) {\n  ciphertext = nacl.util.decodeBase64(ciphertext);\n  nonce = nacl.util.decodeBase64(nonce);\n  var cleartext = nacl.secretbox.open(ciphertext, nonce, symKey);\n\n  if (toBuffer) {\n    return cleartext ? Buffer.from(cleartext) : null;\n  }\n\n  return cleartext ? nacl.util.encodeUTF8(cleartext) : null;\n};\n\nvar newSymKey = function newSymKey() {\n  return nacl.randomBytes(32);\n};\n\nmodule.exports = {\n  randomNonce: randomNonce,\n  symEncryptBase: symEncryptBase,\n  symDecryptBase: symDecryptBase,\n  newSymKey: newSymKey\n};"]},"metadata":{},"sourceType":"script"}