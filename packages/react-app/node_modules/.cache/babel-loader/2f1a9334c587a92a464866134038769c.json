{"ast":null,"code":"\"use strict\";\n\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n  constructor() {\n    logger.checkNew(new.target, Formatter);\n    this.formats = this.getDefaultFormats();\n  }\n\n  getDefaultFormats() {\n    const formats = {};\n    const address = this.address.bind(this);\n    const bigNumber = this.bigNumber.bind(this);\n    const blockTag = this.blockTag.bind(this);\n    const data = this.data.bind(this);\n    const hash = this.hash.bind(this);\n    const hex = this.hex.bind(this);\n    const number = this.number.bind(this);\n\n    const strictData = v => {\n      return this.data(v, true);\n    };\n\n    formats.transaction = {\n      hash: hash,\n      blockHash: Formatter.allowNull(hash, null),\n      blockNumber: Formatter.allowNull(number, null),\n      transactionIndex: Formatter.allowNull(number, null),\n      confirmations: Formatter.allowNull(number, null),\n      from: address,\n      gasPrice: bigNumber,\n      gasLimit: bigNumber,\n      to: Formatter.allowNull(address, null),\n      value: bigNumber,\n      nonce: number,\n      data: data,\n      r: Formatter.allowNull(this.uint256),\n      s: Formatter.allowNull(this.uint256),\n      v: Formatter.allowNull(number),\n      creates: Formatter.allowNull(address, null),\n      raw: Formatter.allowNull(data)\n    };\n    formats.transactionRequest = {\n      from: Formatter.allowNull(address),\n      nonce: Formatter.allowNull(number),\n      gasLimit: Formatter.allowNull(bigNumber),\n      gasPrice: Formatter.allowNull(bigNumber),\n      to: Formatter.allowNull(address),\n      value: Formatter.allowNull(bigNumber),\n      data: Formatter.allowNull(strictData)\n    };\n    formats.receiptLog = {\n      transactionLogIndex: Formatter.allowNull(number),\n      transactionIndex: number,\n      blockNumber: number,\n      transactionHash: hash,\n      address: address,\n      topics: Formatter.arrayOf(hash),\n      data: data,\n      logIndex: number,\n      blockHash: hash\n    };\n    formats.receipt = {\n      to: Formatter.allowNull(this.address, null),\n      from: Formatter.allowNull(this.address, null),\n      contractAddress: Formatter.allowNull(address, null),\n      transactionIndex: number,\n      root: Formatter.allowNull(hash),\n      gasUsed: bigNumber,\n      logsBloom: Formatter.allowNull(data),\n      blockHash: hash,\n      transactionHash: hash,\n      logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n      blockNumber: number,\n      confirmations: Formatter.allowNull(number, null),\n      cumulativeGasUsed: bigNumber,\n      status: Formatter.allowNull(number)\n    };\n    formats.block = {\n      hash: hash,\n      parentHash: hash,\n      number: number,\n      timestamp: number,\n      nonce: Formatter.allowNull(hex),\n      difficulty: this.difficulty.bind(this),\n      gasLimit: bigNumber,\n      gasUsed: bigNumber,\n      miner: address,\n      extraData: data,\n      transactions: Formatter.allowNull(Formatter.arrayOf(hash))\n    };\n    formats.blockWithTransactions = shallowCopy(formats.block);\n    formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n    formats.filter = {\n      fromBlock: Formatter.allowNull(blockTag, undefined),\n      toBlock: Formatter.allowNull(blockTag, undefined),\n      blockHash: Formatter.allowNull(hash, undefined),\n      address: Formatter.allowNull(address, undefined),\n      topics: Formatter.allowNull(this.topics.bind(this), undefined)\n    };\n    formats.filterLog = {\n      blockNumber: Formatter.allowNull(number),\n      blockHash: Formatter.allowNull(hash),\n      transactionIndex: number,\n      removed: Formatter.allowNull(this.boolean.bind(this)),\n      address: address,\n      data: Formatter.allowFalsish(data, \"0x\"),\n      topics: Formatter.arrayOf(hash),\n      transactionHash: hash,\n      logIndex: number\n    };\n    return formats;\n  } // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n  // Strict! Used on input.\n\n\n  number(number) {\n    return BigNumber.from(number).toNumber();\n  } // Strict! Used on input.\n\n\n  bigNumber(value) {\n    return BigNumber.from(value);\n  } // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n\n\n  boolean(value) {\n    if (typeof value === \"boolean\") {\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      value = value.toLowerCase();\n\n      if (value === \"true\") {\n        return true;\n      }\n\n      if (value === \"false\") {\n        return false;\n      }\n    }\n\n    throw new Error(\"invaid boolean - \" + value);\n  }\n\n  hex(value, strict) {\n    if (typeof value === \"string\") {\n      if (!strict && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n      }\n\n      if (isHexString(value)) {\n        return value.toLowerCase();\n      }\n    }\n\n    return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n  }\n\n  data(value, strict) {\n    const result = this.hex(value, strict);\n\n    if (result.length % 2 !== 0) {\n      throw new Error(\"invalid data; odd-length - \" + value);\n    }\n\n    return result;\n  } // Requires an address\n  // Strict! Used on input.\n\n\n  address(value) {\n    return getAddress(value);\n  }\n\n  callAddress(value) {\n    if (!isHexString(value, 32)) {\n      return null;\n    }\n\n    const address = getAddress(hexDataSlice(value, 12));\n    return address === AddressZero ? null : address;\n  }\n\n  contractAddress(value) {\n    return getContractAddress(value);\n  } // Strict! Used on input.\n\n\n  blockTag(blockTag) {\n    if (blockTag == null) {\n      return \"latest\";\n    }\n\n    if (blockTag === \"earliest\") {\n      return \"0x0\";\n    }\n\n    if (blockTag === \"latest\" || blockTag === \"pending\") {\n      return blockTag;\n    }\n\n    if (typeof blockTag === \"number\" || isHexString(blockTag)) {\n      return hexValue(blockTag);\n    }\n\n    throw new Error(\"invalid blockTag\");\n  } // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n\n\n  hash(value, strict) {\n    const result = this.hex(value, strict);\n\n    if (hexDataLength(result) !== 32) {\n      return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    return result;\n  } // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n\n\n  difficulty(value) {\n    if (value == null) {\n      return null;\n    }\n\n    const v = BigNumber.from(value);\n\n    try {\n      return v.toNumber();\n    } catch (error) {}\n\n    return null;\n  }\n\n  uint256(value) {\n    if (!isHexString(value)) {\n      throw new Error(\"invalid uint256\");\n    }\n\n    return hexZeroPad(value, 32);\n  }\n\n  _block(value, format) {\n    if (value.author != null && value.miner == null) {\n      value.miner = value.author;\n    }\n\n    return Formatter.check(format, value);\n  }\n\n  block(value) {\n    return this._block(value, this.formats.block);\n  }\n\n  blockWithTransactions(value) {\n    return this._block(value, this.formats.blockWithTransactions);\n  } // Strict! Used on input.\n\n\n  transactionRequest(value) {\n    return Formatter.check(this.formats.transactionRequest, value);\n  }\n\n  transactionResponse(transaction) {\n    // Rename gas to gasLimit\n    if (transaction.gas != null && transaction.gasLimit == null) {\n      transaction.gasLimit = transaction.gas;\n    } // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n\n\n    if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n      transaction.to = \"0x0000000000000000000000000000000000000000\";\n    } // Rename input to data\n\n\n    if (transaction.input != null && transaction.data == null) {\n      transaction.data = transaction.input;\n    } // If to and creates are empty, populate the creates from the transaction\n\n\n    if (transaction.to == null && transaction.creates == null) {\n      transaction.creates = this.contractAddress(transaction);\n    } // @TODO: use transaction.serialize? Have to add support for including v, r, and s...\n\n    /*\n    if (!transaction.raw) {\n           // Very loose providers (e.g. TestRPC) do not provide a signature or raw\n         if (transaction.v && transaction.r && transaction.s) {\n             let raw = [\n                 stripZeros(hexlify(transaction.nonce)),\n                 stripZeros(hexlify(transaction.gasPrice)),\n                 stripZeros(hexlify(transaction.gasLimit)),\n                 (transaction.to || \"0x\"),\n                 stripZeros(hexlify(transaction.value || \"0x\")),\n                 hexlify(transaction.data || \"0x\"),\n                 stripZeros(hexlify(transaction.v || \"0x\")),\n                 stripZeros(hexlify(transaction.r)),\n                 stripZeros(hexlify(transaction.s)),\n             ];\n               transaction.raw = rlpEncode(raw);\n         }\n     }\n     */\n\n\n    const result = Formatter.check(this.formats.transaction, transaction);\n\n    if (transaction.chainId != null) {\n      let chainId = transaction.chainId;\n\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n\n      result.chainId = chainId;\n    } else {\n      let chainId = transaction.networkId; // geth-etc returns chainId\n\n      if (chainId == null && result.v == null) {\n        chainId = transaction.chainId;\n      }\n\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n\n      if (typeof chainId !== \"number\" && result.v != null) {\n        chainId = (result.v - 35) / 2;\n\n        if (chainId < 0) {\n          chainId = 0;\n        }\n\n        chainId = parseInt(chainId);\n      }\n\n      if (typeof chainId !== \"number\") {\n        chainId = 0;\n      }\n\n      result.chainId = chainId;\n    } // 0x0000... should actually be null\n\n\n    if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n      result.blockHash = null;\n    }\n\n    return result;\n  }\n\n  transaction(value) {\n    return parseTransaction(value);\n  }\n\n  receiptLog(value) {\n    return Formatter.check(this.formats.receiptLog, value);\n  }\n\n  receipt(value) {\n    //let status = transactionReceipt.status;\n    //let root = transactionReceipt.root;\n    const result = Formatter.check(this.formats.receipt, value);\n    result.logs.forEach((entry, index) => {\n      if (entry.transactionLogIndex == null) {\n        entry.transactionLogIndex = index;\n      }\n    });\n\n    if (value.status != null) {\n      result.byzantium = true;\n    }\n\n    return result;\n  }\n\n  topics(value) {\n    if (Array.isArray(value)) {\n      return value.map(v => this.topics(v));\n    } else if (value != null) {\n      return this.hash(value, true);\n    }\n\n    return null;\n  }\n\n  filter(value) {\n    return Formatter.check(this.formats.filter, value);\n  }\n\n  filterLog(value) {\n    return Formatter.check(this.formats.filterLog, value);\n  }\n\n  static check(format, object) {\n    const result = {};\n\n    for (const key in format) {\n      try {\n        const value = format[key](object[key]);\n\n        if (value !== undefined) {\n          result[key] = value;\n        }\n      } catch (error) {\n        error.checkKey = key;\n        error.checkValue = object[key];\n        throw error;\n      }\n    }\n\n    return result;\n  } // if value is null-ish, nullValue is returned\n\n\n  static allowNull(format, nullValue) {\n    return function (value) {\n      if (value == null) {\n        return nullValue;\n      }\n\n      return format(value);\n    };\n  } // If value is false-ish, replaceValue is returned\n\n\n  static allowFalsish(format, replaceValue) {\n    return function (value) {\n      if (!value) {\n        return replaceValue;\n      }\n\n      return format(value);\n    };\n  } // Requires an Array satisfying check\n\n\n  static arrayOf(format) {\n    return function (array) {\n      if (!Array.isArray(array)) {\n        throw new Error(\"not an array\");\n      }\n\n      const result = [];\n      array.forEach(function (value) {\n        result.push(format(value));\n      });\n      return result;\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/@ethersproject/providers/lib.esm/formatter.js"],"names":["getAddress","getContractAddress","BigNumber","hexDataLength","hexDataSlice","hexValue","hexZeroPad","isHexString","AddressZero","shallowCopy","parse","parseTransaction","Logger","version","logger","Formatter","constructor","checkNew","new","target","formats","getDefaultFormats","address","bind","bigNumber","blockTag","data","hash","hex","number","strictData","v","transaction","blockHash","allowNull","blockNumber","transactionIndex","confirmations","from","gasPrice","gasLimit","to","value","nonce","r","uint256","s","creates","raw","transactionRequest","receiptLog","transactionLogIndex","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","blockWithTransactions","transactionResponse","filter","fromBlock","undefined","toBlock","filterLog","removed","boolean","allowFalsish","toNumber","toLowerCase","Error","strict","substring","throwArgumentError","result","length","callAddress","error","_block","format","author","check","gas","isZero","input","chainId","networkId","parseInt","replace","forEach","entry","index","byzantium","Array","isArray","map","object","key","checkKey","checkValue","nullValue","replaceValue","array","push"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n    constructor() {\n        logger.checkNew(new.target, Formatter);\n        this.formats = this.getDefaultFormats();\n    }\n    getDefaultFormats() {\n        const formats = ({});\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const strictData = (v) => { return this.data(v, true); };\n        formats.transaction = {\n            hash: hash,\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            gasPrice: bigNumber,\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data),\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n        };\n        formats.receiptLog = {\n            transactionLogIndex: Formatter.allowNull(number),\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            root: Formatter.allowNull(hash),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            status: Formatter.allowNull(number)\n        };\n        formats.block = {\n            hash: hash,\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: address,\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n        };\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number,\n        };\n        return formats;\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number) {\n        return BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n    bigNumber(value) {\n        return BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value) {\n        if (typeof (value) === \"boolean\") {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invaid boolean - \" + value);\n    }\n    hex(value, strict) {\n        if (typeof (value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if (isHexString(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    data(value, strict) {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n    address(value) {\n        return getAddress(value);\n    }\n    callAddress(value) {\n        if (!isHexString(value, 32)) {\n            return null;\n        }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null : address;\n    }\n    contractAddress(value) {\n        return getContractAddress(value);\n    }\n    // Strict! Used on input.\n    blockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\n            return blockTag;\n        }\n        if (typeof (blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value, strict) {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value) {\n        if (value == null) {\n            return null;\n        }\n        const v = BigNumber.from(value);\n        try {\n            return v.toNumber();\n        }\n        catch (error) { }\n        return null;\n    }\n    uint256(value) {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n    _block(value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        return Formatter.check(format, value);\n    }\n    block(value) {\n        return this._block(value, this.formats.block);\n    }\n    blockWithTransactions(value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n    transactionRequest(value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n    transactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        // @TODO: use transaction.serialize? Have to add support for including v, r, and s...\n        /*\n        if (!transaction.raw) {\n \n             // Very loose providers (e.g. TestRPC) do not provide a signature or raw\n             if (transaction.v && transaction.r && transaction.s) {\n                 let raw = [\n                     stripZeros(hexlify(transaction.nonce)),\n                     stripZeros(hexlify(transaction.gasPrice)),\n                     stripZeros(hexlify(transaction.gasLimit)),\n                     (transaction.to || \"0x\"),\n                     stripZeros(hexlify(transaction.value || \"0x\")),\n                     hexlify(transaction.data || \"0x\"),\n                     stripZeros(hexlify(transaction.v || \"0x\")),\n                     stripZeros(hexlify(transaction.r)),\n                     stripZeros(hexlify(transaction.s)),\n                 ];\n \n                 transaction.raw = rlpEncode(raw);\n             }\n         }\n         */\n        const result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        }\n        else {\n            let chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            if (typeof (chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof (chainId) !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    }\n    transaction(value) {\n        return parseTransaction(value);\n    }\n    receiptLog(value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n    receipt(value) {\n        //let status = transactionReceipt.status;\n        //let root = transactionReceipt.root;\n        const result = Formatter.check(this.formats.receipt, value);\n        result.logs.forEach((entry, index) => {\n            if (entry.transactionLogIndex == null) {\n                entry.transactionLogIndex = index;\n            }\n        });\n        if (value.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    }\n    topics(value) {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n        }\n        else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    }\n    filter(value) {\n        return Formatter.check(this.formats.filter, value);\n    }\n    filterLog(value) {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n    static check(format, object) {\n        const result = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            }\n            catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n    // if value is null-ish, nullValue is returned\n    static allowNull(format, nullValue) {\n        return (function (value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        });\n    }\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format, replaceValue) {\n        return (function (value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        });\n    }\n    // Requires an Array satisfying check\n    static arrayOf(format) {\n        return (function (array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function (value) {\n                result.push(format(value));\n            });\n            return result;\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}