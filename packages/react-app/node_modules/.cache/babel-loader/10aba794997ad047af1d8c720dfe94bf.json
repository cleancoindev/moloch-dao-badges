{"ast":null,"code":"'use strict';\n\nconst semver = require('semver');\n/**\n * Match protocols using semver `~` matching.\n *\n * @param {string} myProtocol\n * @param {string} senderProtocol\n * @param {function(Error, boolean)} callback\n * @returns {undefined}\n * @type {matchHandler}\n */\n\n\nfunction matchSemver(myProtocol, senderProtocol, callback) {\n  const mps = myProtocol.split('/');\n  const sps = senderProtocol.split('/');\n  const myName = mps[1];\n  const myVersion = mps[2];\n  const senderName = sps[1];\n  const senderVersion = sps[2];\n\n  if (myName !== senderName) {\n    return callback(null, false);\n  } // does my protocol satisfy the sender?\n\n\n  const valid = semver.satisfies(myVersion, '~' + senderVersion);\n  callback(null, valid);\n}\n\nmodule.exports = matchSemver;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/multistream-select/src/listener/match-semver.js"],"names":["semver","require","matchSemver","myProtocol","senderProtocol","callback","mps","split","sps","myName","myVersion","senderName","senderVersion","valid","satisfies","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;AAEA;;;;;;;;;;;AASA,SAASC,WAAT,CAAsBC,UAAtB,EAAkCC,cAAlC,EAAkDC,QAAlD,EAA4D;AAC1D,QAAMC,GAAG,GAAGH,UAAU,CAACI,KAAX,CAAiB,GAAjB,CAAZ;AACA,QAAMC,GAAG,GAAGJ,cAAc,CAACG,KAAf,CAAqB,GAArB,CAAZ;AACA,QAAME,MAAM,GAAGH,GAAG,CAAC,CAAD,CAAlB;AACA,QAAMI,SAAS,GAAGJ,GAAG,CAAC,CAAD,CAArB;AAEA,QAAMK,UAAU,GAAGH,GAAG,CAAC,CAAD,CAAtB;AACA,QAAMI,aAAa,GAAGJ,GAAG,CAAC,CAAD,CAAzB;;AAEA,MAAIC,MAAM,KAAKE,UAAf,EAA2B;AACzB,WAAON,QAAQ,CAAC,IAAD,EAAO,KAAP,CAAf;AACD,GAXyD,CAY1D;;;AACA,QAAMQ,KAAK,GAAGb,MAAM,CAACc,SAAP,CAAiBJ,SAAjB,EAA4B,MAAME,aAAlC,CAAd;AAEAP,EAAAA,QAAQ,CAAC,IAAD,EAAOQ,KAAP,CAAR;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBd,WAAjB","sourcesContent":["'use strict'\n\nconst semver = require('semver')\n\n/**\n * Match protocols using semver `~` matching.\n *\n * @param {string} myProtocol\n * @param {string} senderProtocol\n * @param {function(Error, boolean)} callback\n * @returns {undefined}\n * @type {matchHandler}\n */\nfunction matchSemver (myProtocol, senderProtocol, callback) {\n  const mps = myProtocol.split('/')\n  const sps = senderProtocol.split('/')\n  const myName = mps[1]\n  const myVersion = mps[2]\n\n  const senderName = sps[1]\n  const senderVersion = sps[2]\n\n  if (myName !== senderName) {\n    return callback(null, false)\n  }\n  // does my protocol satisfy the sender?\n  const valid = semver.satisfies(myVersion, '~' + senderVersion)\n\n  callback(null, valid)\n}\n\nmodule.exports = matchSemver\n"]},"metadata":{},"sourceType":"script"}