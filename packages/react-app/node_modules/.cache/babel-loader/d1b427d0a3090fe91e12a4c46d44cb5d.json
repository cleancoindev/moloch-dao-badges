{"ast":null,"code":"'use strict';\n\nconst cache = require('hashlru');\n\nconst varint = require('varint');\n\nconst PeerId = require('peer-id');\n\nconst Key = require('interface-datastore').Key;\n\nconst {\n  default: Queue\n} = require('p-queue');\n\nconst c = require('./constants');\n\nconst utils = require('./utils');\n/**\n * This class manages known providers.\n * A provider is a peer that we know to have the content for a given CID.\n *\n * Every `cleanupInterval` providers are checked if they\n * are still valid, i.e. younger than the `provideValidity`.\n * If they are not, they are deleted.\n *\n * To ensure the list survives restarts of the daemon,\n * providers are stored in the datastore, but to ensure\n * access is fast there is an LRU cache in front of that.\n */\n\n\nclass Providers {\n  /**\n   * @param {Object} datastore\n   * @param {PeerId} [self]\n   * @param {number} [cacheSize=256]\n   */\n  constructor(datastore, self, cacheSize) {\n    this.datastore = datastore;\n    this._log = utils.logger(self, 'providers');\n    /**\n     * How often invalid records are cleaned. (in seconds)\n     *\n     * @type {number}\n     */\n\n    this.cleanupInterval = c.PROVIDERS_CLEANUP_INTERVAL;\n    /**\n     * How long is a provider valid for. (in seconds)\n     *\n     * @type {number}\n     */\n\n    this.provideValidity = c.PROVIDERS_VALIDITY;\n    /**\n     * LRU cache size\n     *\n     * @type {number}\n     */\n\n    this.lruCacheSize = cacheSize || c.PROVIDERS_LRU_CACHE_SIZE;\n    this.providers = cache(this.lruCacheSize);\n    this.syncQueue = new Queue({\n      concurrency: 1\n    });\n  }\n  /**\n   * Release any resources.\n   *\n   * @returns {undefined}\n   */\n\n\n  stop() {\n    if (this._cleaner) {\n      clearInterval(this._cleaner);\n      this._cleaner = null;\n    }\n  }\n  /**\n   * Check all providers if they are still valid, and if not delete them.\n   *\n   * @returns {Promise}\n   *\n   * @private\n   */\n\n\n  _cleanup() {\n    return this.syncQueue.add(async () => {\n      this._log('start cleanup');\n\n      const start = Date.now();\n      let count = 0;\n      let deleteCount = 0;\n      const deleted = new Map();\n      const batch = this.datastore.batch(); // Get all provider entries from the datastore\n\n      const query = this.datastore.query({\n        prefix: c.PROVIDERS_KEY_PREFIX\n      });\n\n      for await (const entry of query) {\n        try {\n          // Add a delete to the batch for each expired entry\n          const {\n            cid,\n            peerId\n          } = parseProviderKey(entry.key);\n          const time = readTime(entry.value);\n          const now = Date.now();\n          const delta = now - time;\n          const expired = delta > this.provideValidity;\n\n          this._log('comparing: %d - %d = %d > %d %s', now, time, delta, this.provideValidity, expired ? '(expired)' : '');\n\n          if (expired) {\n            deleteCount++;\n            batch.delete(entry.key);\n            const peers = deleted.get(cid) || new Set();\n            peers.add(peerId);\n            deleted.set(cid, peers);\n          }\n\n          count++;\n        } catch (err) {\n          this._log.error(err.message);\n        }\n      }\n\n      this._log('deleting %d / %d entries', deleteCount, count); // Commit the deletes to the datastore\n\n\n      if (deleted.size) {\n        await batch.commit();\n      } // Clear expired entries from the cache\n\n\n      for (const [cid, peers] of deleted) {\n        const key = makeProviderKey(cid);\n        const provs = this.providers.get(key);\n\n        if (provs) {\n          for (const peerId of peers) {\n            provs.delete(peerId);\n          }\n\n          if (provs.size === 0) {\n            this.providers.remove(key);\n          } else {\n            this.providers.set(key, provs);\n          }\n        }\n      }\n\n      this._log('Cleanup successful (%dms)', Date.now() - start);\n    });\n  }\n  /**\n   * Get the currently known provider peer ids for a given CID.\n   *\n   * @param {CID} cid\n   * @returns {Promise<Map<String, Date>>}\n   *\n   * @private\n   */\n\n\n  async _getProvidersMap(cid) {\n    const cacheKey = makeProviderKey(cid);\n    let provs = this.providers.get(cacheKey);\n\n    if (!provs) {\n      provs = await loadProviders(this.datastore, cid);\n      this.providers.set(cacheKey, provs);\n    }\n\n    return provs;\n  }\n\n  get cleanupInterval() {\n    return this._cleanupInterval;\n  }\n\n  set cleanupInterval(val) {\n    this._cleanupInterval = val;\n\n    if (this._cleaner) {\n      clearInterval(this._cleaner);\n    }\n\n    this._cleaner = setInterval(() => this._cleanup(), this.cleanupInterval);\n  }\n  /**\n   * Add a new provider for the given CID.\n   *\n   * @param {CID} cid\n   * @param {PeerId} provider\n   * @returns {Promise}\n   */\n\n\n  async addProvider(cid, provider) {\n    // eslint-disable-line require-await\n    return this.syncQueue.add(async () => {\n      this._log('addProvider %s', cid.toBaseEncodedString());\n\n      const provs = await this._getProvidersMap(cid);\n\n      this._log('loaded %s provs', provs.size);\n\n      const now = Date.now();\n      provs.set(utils.encodeBase32(provider.id), now);\n      const dsKey = makeProviderKey(cid);\n      this.providers.set(dsKey, provs);\n      return writeProviderEntry(this.datastore, cid, provider, now);\n    });\n  }\n  /**\n   * Get a list of providers for the given CID.\n   *\n   * @param {CID} cid\n   * @returns {Promise<Array<PeerId>>}\n   */\n\n\n  async getProviders(cid) {\n    // eslint-disable-line require-await\n    return this.syncQueue.add(async () => {\n      this._log('getProviders %s', cid.toBaseEncodedString());\n\n      const provs = await this._getProvidersMap(cid);\n      return [...provs.keys()].map(base32PeerId => {\n        return new PeerId(utils.decodeBase32(base32PeerId));\n      });\n    });\n  }\n\n}\n/**\n * Encode the given key its matching datastore key.\n *\n * @param {CID|string} cid - cid or base32 encoded string\n * @returns {string}\n *\n * @private\n */\n\n\nfunction makeProviderKey(cid) {\n  cid = typeof cid === 'string' ? cid : utils.encodeBase32(cid.buffer);\n  return c.PROVIDERS_KEY_PREFIX + cid;\n}\n/**\n * Write a provider into the given store.\n *\n * @param {Datastore} store\n * @param {CID} cid\n * @param {PeerId} peer\n * @param {number} time\n * @returns {Promise}\n *\n * @private\n */\n\n\nasync function writeProviderEntry(store, cid, peer, time) {\n  // eslint-disable-line require-await\n  const dsKey = [makeProviderKey(cid), '/', utils.encodeBase32(peer.id)].join('');\n  const key = new Key(dsKey);\n  const buffer = Buffer.from(varint.encode(time));\n  return store.put(key, buffer);\n}\n/**\n * Parse the CID and provider peer id from the key\n *\n * @param {DKey} key\n * @returns {Object} object with peer id and cid\n *\n * @private\n */\n\n\nfunction parseProviderKey(key) {\n  const parts = key.toString().split('/');\n\n  if (parts.length !== 4) {\n    throw new Error('incorrectly formatted provider entry key in datastore: ' + key);\n  }\n\n  return {\n    cid: parts[2],\n    peerId: parts[3]\n  };\n}\n/**\n * Load providers for the given CID from the store.\n *\n * @param {Datastore} store\n * @param {CID} cid\n * @returns {Promise<Map<PeerId, Date>>}\n *\n * @private\n */\n\n\nasync function loadProviders(store, cid) {\n  const providers = new Map();\n  const query = store.query({\n    prefix: makeProviderKey(cid)\n  });\n\n  for await (const entry of query) {\n    const {\n      peerId\n    } = parseProviderKey(entry.key);\n    providers.set(peerId, readTime(entry.value));\n  }\n\n  return providers;\n}\n\nfunction readTime(buf) {\n  return varint.decode(buf);\n}\n\nmodule.exports = Providers;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/libp2p-kad-dht/src/providers.js"],"names":["cache","require","varint","PeerId","Key","default","Queue","c","utils","Providers","constructor","datastore","self","cacheSize","_log","logger","cleanupInterval","PROVIDERS_CLEANUP_INTERVAL","provideValidity","PROVIDERS_VALIDITY","lruCacheSize","PROVIDERS_LRU_CACHE_SIZE","providers","syncQueue","concurrency","stop","_cleaner","clearInterval","_cleanup","add","start","Date","now","count","deleteCount","deleted","Map","batch","query","prefix","PROVIDERS_KEY_PREFIX","entry","cid","peerId","parseProviderKey","key","time","readTime","value","delta","expired","delete","peers","get","Set","set","err","error","message","size","commit","makeProviderKey","provs","remove","_getProvidersMap","cacheKey","loadProviders","_cleanupInterval","val","setInterval","addProvider","provider","toBaseEncodedString","encodeBase32","id","dsKey","writeProviderEntry","getProviders","keys","map","base32PeerId","decodeBase32","buffer","store","peer","join","Buffer","from","encode","put","parts","toString","split","length","Error","buf","decode","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst cache = require('hashlru')\nconst varint = require('varint')\nconst PeerId = require('peer-id')\nconst Key = require('interface-datastore').Key\nconst { default: Queue } = require('p-queue')\n\nconst c = require('./constants')\nconst utils = require('./utils')\n\n/**\n * This class manages known providers.\n * A provider is a peer that we know to have the content for a given CID.\n *\n * Every `cleanupInterval` providers are checked if they\n * are still valid, i.e. younger than the `provideValidity`.\n * If they are not, they are deleted.\n *\n * To ensure the list survives restarts of the daemon,\n * providers are stored in the datastore, but to ensure\n * access is fast there is an LRU cache in front of that.\n */\nclass Providers {\n  /**\n   * @param {Object} datastore\n   * @param {PeerId} [self]\n   * @param {number} [cacheSize=256]\n   */\n  constructor (datastore, self, cacheSize) {\n    this.datastore = datastore\n\n    this._log = utils.logger(self, 'providers')\n\n    /**\n     * How often invalid records are cleaned. (in seconds)\n     *\n     * @type {number}\n     */\n    this.cleanupInterval = c.PROVIDERS_CLEANUP_INTERVAL\n\n    /**\n     * How long is a provider valid for. (in seconds)\n     *\n     * @type {number}\n     */\n    this.provideValidity = c.PROVIDERS_VALIDITY\n\n    /**\n     * LRU cache size\n     *\n     * @type {number}\n     */\n    this.lruCacheSize = cacheSize || c.PROVIDERS_LRU_CACHE_SIZE\n\n    this.providers = cache(this.lruCacheSize)\n\n    this.syncQueue = new Queue({ concurrency: 1 })\n  }\n\n  /**\n   * Release any resources.\n   *\n   * @returns {undefined}\n   */\n  stop () {\n    if (this._cleaner) {\n      clearInterval(this._cleaner)\n      this._cleaner = null\n    }\n  }\n\n  /**\n   * Check all providers if they are still valid, and if not delete them.\n   *\n   * @returns {Promise}\n   *\n   * @private\n   */\n  _cleanup () {\n    return this.syncQueue.add(async () => {\n      this._log('start cleanup')\n      const start = Date.now()\n\n      let count = 0\n      let deleteCount = 0\n      const deleted = new Map()\n      const batch = this.datastore.batch()\n\n      // Get all provider entries from the datastore\n      const query = this.datastore.query({ prefix: c.PROVIDERS_KEY_PREFIX })\n      for await (const entry of query) {\n        try {\n          // Add a delete to the batch for each expired entry\n          const { cid, peerId } = parseProviderKey(entry.key)\n          const time = readTime(entry.value)\n          const now = Date.now()\n          const delta = now - time\n          const expired = delta > this.provideValidity\n          this._log('comparing: %d - %d = %d > %d %s',\n            now, time, delta, this.provideValidity, expired ? '(expired)' : '')\n          if (expired) {\n            deleteCount++\n            batch.delete(entry.key)\n            const peers = deleted.get(cid) || new Set()\n            peers.add(peerId)\n            deleted.set(cid, peers)\n          }\n          count++\n        } catch (err) {\n          this._log.error(err.message)\n        }\n      }\n      this._log('deleting %d / %d entries', deleteCount, count)\n\n      // Commit the deletes to the datastore\n      if (deleted.size) {\n        await batch.commit()\n      }\n\n      // Clear expired entries from the cache\n      for (const [cid, peers] of deleted) {\n        const key = makeProviderKey(cid)\n        const provs = this.providers.get(key)\n        if (provs) {\n          for (const peerId of peers) {\n            provs.delete(peerId)\n          }\n          if (provs.size === 0) {\n            this.providers.remove(key)\n          } else {\n            this.providers.set(key, provs)\n          }\n        }\n      }\n\n      this._log('Cleanup successful (%dms)', Date.now() - start)\n    })\n  }\n\n  /**\n   * Get the currently known provider peer ids for a given CID.\n   *\n   * @param {CID} cid\n   * @returns {Promise<Map<String, Date>>}\n   *\n   * @private\n   */\n  async _getProvidersMap (cid) {\n    const cacheKey = makeProviderKey(cid)\n    let provs = this.providers.get(cacheKey)\n    if (!provs) {\n      provs = await loadProviders(this.datastore, cid)\n      this.providers.set(cacheKey, provs)\n    }\n    return provs\n  }\n\n  get cleanupInterval () {\n    return this._cleanupInterval\n  }\n\n  set cleanupInterval (val) {\n    this._cleanupInterval = val\n\n    if (this._cleaner) {\n      clearInterval(this._cleaner)\n    }\n\n    this._cleaner = setInterval(\n      () => this._cleanup(),\n      this.cleanupInterval\n    )\n  }\n\n  /**\n   * Add a new provider for the given CID.\n   *\n   * @param {CID} cid\n   * @param {PeerId} provider\n   * @returns {Promise}\n   */\n  async addProvider (cid, provider) { // eslint-disable-line require-await\n    return this.syncQueue.add(async () => {\n      this._log('addProvider %s', cid.toBaseEncodedString())\n      const provs = await this._getProvidersMap(cid)\n\n      this._log('loaded %s provs', provs.size)\n      const now = Date.now()\n      provs.set(utils.encodeBase32(provider.id), now)\n\n      const dsKey = makeProviderKey(cid)\n      this.providers.set(dsKey, provs)\n      return writeProviderEntry(this.datastore, cid, provider, now)\n    })\n  }\n\n  /**\n   * Get a list of providers for the given CID.\n   *\n   * @param {CID} cid\n   * @returns {Promise<Array<PeerId>>}\n   */\n  async getProviders (cid) { // eslint-disable-line require-await\n    return this.syncQueue.add(async () => {\n      this._log('getProviders %s', cid.toBaseEncodedString())\n      const provs = await this._getProvidersMap(cid)\n      return [...provs.keys()].map((base32PeerId) => {\n        return new PeerId(utils.decodeBase32(base32PeerId))\n      })\n    })\n  }\n}\n\n/**\n * Encode the given key its matching datastore key.\n *\n * @param {CID|string} cid - cid or base32 encoded string\n * @returns {string}\n *\n * @private\n */\nfunction makeProviderKey (cid) {\n  cid = typeof cid === 'string' ? cid : utils.encodeBase32(cid.buffer)\n  return c.PROVIDERS_KEY_PREFIX + cid\n}\n\n/**\n * Write a provider into the given store.\n *\n * @param {Datastore} store\n * @param {CID} cid\n * @param {PeerId} peer\n * @param {number} time\n * @returns {Promise}\n *\n * @private\n */\nasync function writeProviderEntry (store, cid, peer, time) { // eslint-disable-line require-await\n  const dsKey = [\n    makeProviderKey(cid),\n    '/',\n    utils.encodeBase32(peer.id)\n  ].join('')\n\n  const key = new Key(dsKey)\n  const buffer = Buffer.from(varint.encode(time))\n  return store.put(key, buffer)\n}\n\n/**\n * Parse the CID and provider peer id from the key\n *\n * @param {DKey} key\n * @returns {Object} object with peer id and cid\n *\n * @private\n */\nfunction parseProviderKey (key) {\n  const parts = key.toString().split('/')\n  if (parts.length !== 4) {\n    throw new Error('incorrectly formatted provider entry key in datastore: ' + key)\n  }\n\n  return {\n    cid: parts[2],\n    peerId: parts[3]\n  }\n}\n\n/**\n * Load providers for the given CID from the store.\n *\n * @param {Datastore} store\n * @param {CID} cid\n * @returns {Promise<Map<PeerId, Date>>}\n *\n * @private\n */\nasync function loadProviders (store, cid) {\n  const providers = new Map()\n  const query = store.query({ prefix: makeProviderKey(cid) })\n  for await (const entry of query) {\n    const { peerId } = parseProviderKey(entry.key)\n    providers.set(peerId, readTime(entry.value))\n  }\n  return providers\n}\n\nfunction readTime (buf) {\n  return varint.decode(buf)\n}\n\nmodule.exports = Providers\n"]},"metadata":{},"sourceType":"script"}