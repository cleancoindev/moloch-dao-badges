{"ast":null,"code":"export const hydrateBadgeData = (badgeRegistery, userData, nftData) => {\n  return badgeRegistery.badges.map(badgeType => {\n    const userCount = userData[0] ? +userData[0][badgeType.key] : 0;\n    badgeType.earned = badgeType.thresholds.map(limit => {\n      return userCount >= limit;\n    });\n    badgeType.userCount = userCount || 0;\n    badgeType.hasNft = badgeType.thresholds.map(limit => nftData.some(nft => {\n      return nft[0] === badgeType.key && nft[1] === limit.toString();\n    }));\n    return badgeType;\n  });\n};\nexport const getLog = async (contract, playerAddr) => {\n  return await contract.getPastEvents('Transfer', {\n    filter: {\n      from: 0,\n      to: playerAddr\n    },\n    fromBlock: 0,\n    toBlock: 'latest'\n  }, (err, ev) => {\n    return ev;\n  });\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/packages/react-app/src/utils/Helpers.js"],"names":["hydrateBadgeData","badgeRegistery","userData","nftData","badges","map","badgeType","userCount","key","earned","thresholds","limit","hasNft","some","nft","toString","getLog","contract","playerAddr","getPastEvents","filter","from","to","fromBlock","toBlock","err","ev"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAG,CAACC,cAAD,EAAiBC,QAAjB,EAA2BC,OAA3B,KAAuC;AACrE,SAAOF,cAAc,CAACG,MAAf,CAAsBC,GAAtB,CAA2BC,SAAD,IAAe;AAC9C,UAAMC,SAAS,GAAGL,QAAQ,CAAC,CAAD,CAAR,GAAc,CAACA,QAAQ,CAAC,CAAD,CAAR,CAAYI,SAAS,CAACE,GAAtB,CAAf,GAA4C,CAA9D;AACAF,IAAAA,SAAS,CAACG,MAAV,GAAmBH,SAAS,CAACI,UAAV,CAAqBL,GAArB,CAA0BM,KAAD,IAAW;AACrD,aAAOJ,SAAS,IAAII,KAApB;AACD,KAFkB,CAAnB;AAGAL,IAAAA,SAAS,CAACC,SAAV,GAAsBA,SAAS,IAAI,CAAnC;AACAD,IAAAA,SAAS,CAACM,MAAV,GAAmBN,SAAS,CAACI,UAAV,CAAqBL,GAArB,CAA0BM,KAAD,IAAWR,OAAO,CAACU,IAAR,CAAcC,GAAD,IAAO;AACzE,aAAOA,GAAG,CAAC,CAAD,CAAH,KAASR,SAAS,CAACE,GAAnB,IAA0BM,GAAG,CAAC,CAAD,CAAH,KAAWH,KAAK,CAACI,QAAN,EAA5C;AACD,KAFsD,CAApC,CAAnB;AAGA,WAAOT,SAAP;AACD,GAVM,CAAP;AAWD,CAZM;AAcP,OAAO,MAAMU,MAAM,GAAG,OAAOC,QAAP,EAAiBC,UAAjB,KAAgC;AAEpD,SAAO,MAAMD,QAAQ,CAACE,aAAT,CAAuB,UAAvB,EAAmC;AAC9CC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,EAAE,EAAEJ;AAAf,KADsC;AAE9CK,IAAAA,SAAS,EAAE,CAFmC;AAG9CC,IAAAA,OAAO,EAAE;AAHqC,GAAnC,EAIV,CAACC,GAAD,EAAMC,EAAN,KAAa;AACd,WAAOA,EAAP;AACD,GANY,CAAb;AAQD,CAVM","sourcesContent":["export const hydrateBadgeData = (badgeRegistery, userData, nftData) => {    \n  return badgeRegistery.badges.map((badgeType) => {\n    const userCount = userData[0] ? +userData[0][badgeType.key] : 0;\n    badgeType.earned = badgeType.thresholds.map((limit) => {\n      return userCount >= limit;\n    });\n    badgeType.userCount = userCount || 0;\n    badgeType.hasNft = badgeType.thresholds.map((limit) => nftData.some((nft)=>{\n      return nft[0]===badgeType.key && nft[1] === limit.toString()\n    }));\n    return badgeType;\n  });\n};\n\nexport const getLog = async (contract, playerAddr) => {\n  \n  return await contract.getPastEvents('Transfer', {\n    filter: { from: 0, to: playerAddr },\n    fromBlock: 0,\n    toBlock: 'latest'\n  }, (err, ev) => {\n    return ev;\n  })\n\n}"]},"metadata":{},"sourceType":"module"}