{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst Connection = require('interface-connection').Connection;\n\nconst nextTick = require('async/nextTick');\n\nconst debug = require('debug');\n\nconst MULTIPLEX_CODEC = require('./codec');\n\nconst log = debug('libp2p-mplex:muxer');\nlog.err = debug('libp2p-mplex:muxer:error');\n\nfunction noop() {}\n\nclass MultiplexMuxer extends EventEmitter {\n  /**\n   * @constructor\n   * @param {Connection} conn\n   * @param {Mplex} multiplex\n   */\n  constructor(conn, multiplex) {\n    super();\n    this.conn = conn;\n    this.multiplex = multiplex;\n    this.multicodec = MULTIPLEX_CODEC;\n    multiplex.on('close', () => this.emit('close'));\n    multiplex.on('error', err => this.emit('error', err));\n    multiplex.on('stream', stream => {\n      // install default error handler so that it doesn't throw\n      stream.on('error', err => {\n        log.err('receiver stream errored', err);\n      });\n      this.emit('stream', new Connection(stream, this.conn));\n    });\n  }\n  /**\n   * Creates a new stream from the `Connection` used in creating the muxer\n   * @param {function(Error, Connection)} callback\n   * @returns {Connection}\n   */\n\n\n  newStream(callback) {\n    callback = callback || noop;\n    let stream = this.multiplex.createStream(); // install default error handler so that it doesn't throw\n\n    stream.on('error', err => {\n      log.err('initiator stream errored', err);\n    });\n    const conn = new Connection(stream, this.conn);\n    nextTick(callback, null, conn);\n    return conn;\n  }\n  /**\n   * Ends the connection and all of its streams\n   * @param {function(Error)} callback\n   * @returns {void}\n   */\n\n\n  end(callback) {\n    callback = callback || noop;\n\n    if (this.multiplex.destroyed) {\n      return nextTick(callback);\n    }\n\n    this.multiplex.once('close', callback);\n    this.multiplex.close();\n  }\n\n}\n\nmodule.exports = MultiplexMuxer;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/pull-mplex/src/muxer.js"],"names":["EventEmitter","require","Connection","nextTick","debug","MULTIPLEX_CODEC","log","err","noop","MultiplexMuxer","constructor","conn","multiplex","multicodec","on","emit","stream","newStream","callback","createStream","end","destroyed","once","close","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAAvC;;AACA,MAAME,UAAU,GAAGD,OAAO,CAAC,sBAAD,CAAP,CAAgCC,UAAnD;;AACA,MAAMC,QAAQ,GAAGF,OAAO,CAAC,gBAAD,CAAxB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMI,eAAe,GAAGJ,OAAO,CAAC,SAAD,CAA/B;;AAEA,MAAMK,GAAG,GAAGF,KAAK,CAAC,oBAAD,CAAjB;AACAE,GAAG,CAACC,GAAJ,GAAUH,KAAK,CAAC,0BAAD,CAAf;;AAEA,SAASI,IAAT,GAAiB,CAAE;;AAEnB,MAAMC,cAAN,SAA6BT,YAA7B,CAA0C;AACxC;;;;;AAKAU,EAAAA,WAAW,CAAEC,IAAF,EAAQC,SAAR,EAAmB;AAC5B;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,UAAL,GAAkBR,eAAlB;AAEAO,IAAAA,SAAS,CAACE,EAAV,CAAa,OAAb,EAAsB,MAAM,KAAKC,IAAL,CAAU,OAAV,CAA5B;AACAH,IAAAA,SAAS,CAACE,EAAV,CAAa,OAAb,EAAuBP,GAAD,IAAS,KAAKQ,IAAL,CAAU,OAAV,EAAmBR,GAAnB,CAA/B;AAEAK,IAAAA,SAAS,CAACE,EAAV,CAAa,QAAb,EAAwBE,MAAD,IAAY;AACjC;AACAA,MAAAA,MAAM,CAACF,EAAP,CAAU,OAAV,EAAoBP,GAAD,IAAS;AAC1BD,QAAAA,GAAG,CAACC,GAAJ,CAAQ,yBAAR,EAAmCA,GAAnC;AACD,OAFD;AAGA,WAAKQ,IAAL,CAAU,QAAV,EAAoB,IAAIb,UAAJ,CAAec,MAAf,EAAuB,KAAKL,IAA5B,CAApB;AACD,KAND;AAOD;AAED;;;;;;;AAKAM,EAAAA,SAAS,CAAEC,QAAF,EAAY;AACnBA,IAAAA,QAAQ,GAAGA,QAAQ,IAAIV,IAAvB;AACA,QAAIQ,MAAM,GAAG,KAAKJ,SAAL,CAAeO,YAAf,EAAb,CAFmB,CAGnB;;AACAH,IAAAA,MAAM,CAACF,EAAP,CAAU,OAAV,EAAoBP,GAAD,IAAS;AAC1BD,MAAAA,GAAG,CAACC,GAAJ,CAAQ,0BAAR,EAAoCA,GAApC;AACD,KAFD;AAGA,UAAMI,IAAI,GAAG,IAAIT,UAAJ,CAAec,MAAf,EAAuB,KAAKL,IAA5B,CAAb;AACAR,IAAAA,QAAQ,CAACe,QAAD,EAAW,IAAX,EAAiBP,IAAjB,CAAR;AACA,WAAOA,IAAP;AACD;AAED;;;;;;;AAKAS,EAAAA,GAAG,CAAEF,QAAF,EAAY;AACbA,IAAAA,QAAQ,GAAGA,QAAQ,IAAIV,IAAvB;;AACA,QAAI,KAAKI,SAAL,CAAeS,SAAnB,EAA8B;AAC5B,aAAOlB,QAAQ,CAACe,QAAD,CAAf;AACD;;AACD,SAAKN,SAAL,CAAeU,IAAf,CAAoB,OAApB,EAA6BJ,QAA7B;AACA,SAAKN,SAAL,CAAeW,KAAf;AACD;;AArDuC;;AAwD1CC,MAAM,CAACC,OAAP,GAAiBhB,cAAjB","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events').EventEmitter\nconst Connection = require('interface-connection').Connection\nconst nextTick = require('async/nextTick')\nconst debug = require('debug')\n\nconst MULTIPLEX_CODEC = require('./codec')\n\nconst log = debug('libp2p-mplex:muxer')\nlog.err = debug('libp2p-mplex:muxer:error')\n\nfunction noop () {}\n\nclass MultiplexMuxer extends EventEmitter {\n  /**\n   * @constructor\n   * @param {Connection} conn\n   * @param {Mplex} multiplex\n   */\n  constructor (conn, multiplex) {\n    super()\n    this.conn = conn\n    this.multiplex = multiplex\n    this.multicodec = MULTIPLEX_CODEC\n\n    multiplex.on('close', () => this.emit('close'))\n    multiplex.on('error', (err) => this.emit('error', err))\n\n    multiplex.on('stream', (stream) => {\n      // install default error handler so that it doesn't throw\n      stream.on('error', (err) => {\n        log.err('receiver stream errored', err)\n      })\n      this.emit('stream', new Connection(stream, this.conn))\n    })\n  }\n\n  /**\n   * Creates a new stream from the `Connection` used in creating the muxer\n   * @param {function(Error, Connection)} callback\n   * @returns {Connection}\n   */\n  newStream (callback) {\n    callback = callback || noop\n    let stream = this.multiplex.createStream()\n    // install default error handler so that it doesn't throw\n    stream.on('error', (err) => {\n      log.err('initiator stream errored', err)\n    })\n    const conn = new Connection(stream, this.conn)\n    nextTick(callback, null, conn)\n    return conn\n  }\n\n  /**\n   * Ends the connection and all of its streams\n   * @param {function(Error)} callback\n   * @returns {void}\n   */\n  end (callback) {\n    callback = callback || noop\n    if (this.multiplex.destroyed) {\n      return nextTick(callback)\n    }\n    this.multiplex.once('close', callback)\n    this.multiplex.close()\n  }\n}\n\nmodule.exports = MultiplexMuxer\n"]},"metadata":{},"sourceType":"script"}