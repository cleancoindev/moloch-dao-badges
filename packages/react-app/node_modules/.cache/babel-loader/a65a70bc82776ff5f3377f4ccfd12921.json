{"ast":null,"code":"'use strict';\n\nconst pull = require('pull-stream');\n\nconst EventEmitter = require('events');\n\nconst emitter = new EventEmitter();\n\nfunction handler(protocol, conn) {\n  conn.getPeerInfo((err, peerInfo) => {\n    if (err) {\n      console.log(err);\n      return;\n    }\n\n    const peerId = peerInfo.id.toB58String();\n    pull(conn, pull.map(message => {\n      let msg;\n\n      try {\n        msg = JSON.parse(message.toString());\n      } catch (err) {\n        emitter.emit('warning', err.message);\n        return; // early\n      }\n\n      if (peerId !== msg.from) {\n        emitter.emit('warning', 'no peerid match ' + msg.from);\n        return; // early\n      }\n\n      const topicIDs = msg.topicIDs;\n\n      if (!Array.isArray(topicIDs)) {\n        emitter.emit('warning', 'no topic IDs');\n        return; // early\n      }\n\n      msg.data = Buffer.from(msg.data, 'hex');\n      msg.seqno = Buffer.from(msg.seqno, 'hex');\n      topicIDs.forEach(topic => {\n        emitter.emit(topic, msg);\n      });\n      return msg;\n    }), pull.onEnd(() => {// do nothing\n    }));\n  });\n}\n\nexports = module.exports = {\n  handler: handler,\n  emitter: emitter\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs-pubsub-room/src/direct-connection-handler.js"],"names":["pull","require","EventEmitter","emitter","handler","protocol","conn","getPeerInfo","err","peerInfo","console","log","peerId","id","toB58String","map","message","msg","JSON","parse","toString","emit","from","topicIDs","Array","isArray","data","Buffer","seqno","forEach","topic","onEnd","exports","module"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAApB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAA5B;;AAEA,MAAME,OAAO,GAAG,IAAID,YAAJ,EAAhB;;AAEA,SAASE,OAAT,CAAkBC,QAAlB,EAA4BC,IAA5B,EAAkC;AAChCA,EAAAA,IAAI,CAACC,WAAL,CAAiB,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAClC,QAAID,GAAJ,EAAS;AACPE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA;AACD;;AAED,UAAMI,MAAM,GAAGH,QAAQ,CAACI,EAAT,CAAYC,WAAZ,EAAf;AAEAd,IAAAA,IAAI,CACFM,IADE,EAEFN,IAAI,CAACe,GAAL,CAAUC,OAAD,IAAa;AACpB,UAAIC,GAAJ;;AACA,UAAI;AACFA,QAAAA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACI,QAAR,EAAX,CAAN;AACD,OAFD,CAEE,OAAOZ,GAAP,EAAY;AACZL,QAAAA,OAAO,CAACkB,IAAR,CAAa,SAAb,EAAwBb,GAAG,CAACQ,OAA5B;AACA,eAFY,CAEL;AACR;;AAED,UAAIJ,MAAM,KAAKK,GAAG,CAACK,IAAnB,EAAyB;AACvBnB,QAAAA,OAAO,CAACkB,IAAR,CAAa,SAAb,EAAwB,qBAAqBJ,GAAG,CAACK,IAAjD;AACA,eAFuB,CAEhB;AACR;;AAED,YAAMC,QAAQ,GAAGN,GAAG,CAACM,QAArB;;AACA,UAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAL,EAA8B;AAC5BpB,QAAAA,OAAO,CAACkB,IAAR,CAAa,SAAb,EAAwB,cAAxB;AACA,eAF4B,CAErB;AACR;;AAEDJ,MAAAA,GAAG,CAACS,IAAJ,GAAWC,MAAM,CAACL,IAAP,CAAYL,GAAG,CAACS,IAAhB,EAAsB,KAAtB,CAAX;AACAT,MAAAA,GAAG,CAACW,KAAJ,GAAYD,MAAM,CAACL,IAAP,CAAYL,GAAG,CAACW,KAAhB,EAAuB,KAAvB,CAAZ;AAEAL,MAAAA,QAAQ,CAACM,OAAT,CAAkBC,KAAD,IAAW;AAC1B3B,QAAAA,OAAO,CAACkB,IAAR,CAAaS,KAAb,EAAoBb,GAApB;AACD,OAFD;AAIA,aAAOA,GAAP;AACD,KA5BD,CAFE,EA+BFjB,IAAI,CAAC+B,KAAL,CAAW,MAAM,CACf;AACD,KAFD,CA/BE,CAAJ;AAmCD,GA3CD;AA4CD;;AAEDC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB;AACzB5B,EAAAA,OAAO,EAAEA,OADgB;AAEzBD,EAAAA,OAAO,EAAEA;AAFgB,CAA3B","sourcesContent":["'use strict'\n\nconst pull = require('pull-stream')\nconst EventEmitter = require('events')\n\nconst emitter = new EventEmitter()\n\nfunction handler (protocol, conn) {\n  conn.getPeerInfo((err, peerInfo) => {\n    if (err) {\n      console.log(err)\n      return\n    }\n\n    const peerId = peerInfo.id.toB58String()\n\n    pull(\n      conn,\n      pull.map((message) => {\n        let msg\n        try {\n          msg = JSON.parse(message.toString())\n        } catch (err) {\n          emitter.emit('warning', err.message)\n          return // early\n        }\n\n        if (peerId !== msg.from) {\n          emitter.emit('warning', 'no peerid match ' + msg.from)\n          return // early\n        }\n\n        const topicIDs = msg.topicIDs\n        if (!Array.isArray(topicIDs)) {\n          emitter.emit('warning', 'no topic IDs')\n          return // early\n        }\n\n        msg.data = Buffer.from(msg.data, 'hex')\n        msg.seqno = Buffer.from(msg.seqno, 'hex')\n\n        topicIDs.forEach((topic) => {\n          emitter.emit(topic, msg)\n        })\n\n        return msg\n      }),\n      pull.onEnd(() => {\n        // do nothing\n      })\n    )\n  })\n}\n\nexports = module.exports = {\n  handler: handler,\n  emitter: emitter\n}\n"]},"metadata":{},"sourceType":"script"}