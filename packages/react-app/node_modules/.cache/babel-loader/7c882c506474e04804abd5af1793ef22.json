{"ast":null,"code":"const CID = require('cids');\n\nconst dagPB = require('ipld-dag-pb');\n\nconst defaultBase = 'base58btc';\n\nconst cidifyString = str => {\n  if (!str) {\n    return str;\n  }\n\n  if (Array.isArray(str)) {\n    return str.map(cidifyString);\n  }\n\n  return new CID(str);\n};\n\nconst stringifyCid = (cid, options) => {\n  if (!cid) {\n    return cid;\n  }\n\n  if (Array.isArray(cid)) {\n    return cid.map(stringifyCid);\n  }\n\n  if (cid['/']) {\n    return cid['/'];\n  }\n\n  const base = options.base || defaultBase;\n  return cid.toBaseEncodedString(base);\n};\n\nconst writePb = async (ipfs, obj) => {\n  const buffer = Buffer.from(JSON.stringify(obj));\n  const dagNode = dagPB.DAGNode.create(buffer);\n  const cid = await ipfs.dag.put(dagNode, {\n    format: 'dag-pb',\n    hashAlg: 'sha2-256'\n  });\n  return cid.toV0().toBaseEncodedString();\n};\n\nconst readPb = async (ipfs, cid) => {\n  const result = await ipfs.dag.get(cid);\n  const dagNode = result.value;\n  return JSON.parse(dagNode.toJSON().data);\n};\n\nconst writeCbor = async (ipfs, obj, options) => {\n  const dagNode = Object.assign({}, obj);\n  const links = options.links || [];\n  links.forEach(prop => {\n    dagNode[prop] = cidifyString(dagNode[prop]);\n  });\n  const base = options.base || defaultBase;\n  const onlyHash = options.onlyHash || false;\n  const cid = await ipfs.dag.put(dagNode, {\n    onlyHash\n  });\n  return cid.toBaseEncodedString(base);\n};\n\nconst readCbor = async (ipfs, cid, options) => {\n  const result = await ipfs.dag.get(cid);\n  const obj = result.value;\n  const links = options.links || [];\n  links.forEach(prop => {\n    obj[prop] = stringifyCid(obj[prop], options);\n  });\n  return obj;\n};\n\nconst writeObj = async (ipfs, obj, options) => {\n  const onlyHash = options.onlyHash || false;\n  const base = options.base || defaultBase;\n  const opts = Object.assign({}, {\n    onlyHash: onlyHash\n  }, options.format ? {\n    format: options.format,\n    hashAlg: 'sha2-256'\n  } : {});\n\n  if (opts.format === 'dag-pb') {\n    obj = dagPB.DAGNode.create(obj);\n  }\n\n  const cid = await ipfs.dag.put(obj, opts);\n  return cid.toBaseEncodedString(base);\n};\n\nconst formats = {\n  'dag-pb': {\n    read: readPb,\n    write: writePb\n  },\n  'dag-cbor': {\n    write: writeCbor,\n    read: readCbor\n  },\n  'raw': {\n    write: writeObj\n  }\n};\n\nconst write = (ipfs, codec, obj, options = {}) => {\n  const format = formats[codec];\n  if (!format) throw new Error('Unsupported codec');\n  return format.write(ipfs, obj, options);\n};\n\nconst read = (ipfs, cid, options = {}) => {\n  cid = new CID(cid);\n  const format = formats[cid.codec];\n  if (!format) throw new Error('Unsupported codec');\n  return format.read(ipfs, cid, options);\n};\n\nmodule.exports = {\n  read,\n  write\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/orbit-db-access-controllers/node_modules/orbit-db-io/index.js"],"names":["CID","require","dagPB","defaultBase","cidifyString","str","Array","isArray","map","stringifyCid","cid","options","base","toBaseEncodedString","writePb","ipfs","obj","buffer","Buffer","from","JSON","stringify","dagNode","DAGNode","create","dag","put","format","hashAlg","toV0","readPb","result","get","value","parse","toJSON","data","writeCbor","Object","assign","links","forEach","prop","onlyHash","readCbor","writeObj","opts","formats","read","write","codec","Error","module","exports"],"mappings":"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","sourcesContent":["const CID = require('cids')\nconst dagPB = require('ipld-dag-pb')\nconst defaultBase = 'base58btc'\n\nconst cidifyString = (str) => {\n  if (!str) {\n    return str\n  }\n\n  if (Array.isArray(str)) {\n    return str.map(cidifyString)\n  }\n\n  return new CID(str)\n}\n\nconst stringifyCid = (cid, options) => {\n  if (!cid) {\n    return cid\n  }\n\n  if (Array.isArray(cid)) {\n    return cid.map(stringifyCid)\n  }\n  \n  if (cid['/']) {\n    return cid['/']\n  }\n\n  const base = options.base || defaultBase\n  return cid.toBaseEncodedString(base)\n}\n\nconst writePb = async (ipfs, obj) => {\n  const buffer = Buffer.from(JSON.stringify(obj))\n  const dagNode = dagPB.DAGNode.create(buffer)\n  const cid = await ipfs.dag.put(dagNode, {\n    format: 'dag-pb',\n    hashAlg: 'sha2-256'\n  })\n\n  return cid.toV0().toBaseEncodedString()\n}\n\nconst readPb = async (ipfs, cid) => {\n  const result = await ipfs.dag.get(cid)\n  const dagNode = result.value\n\n  return JSON.parse(dagNode.toJSON().data)\n}\n\nconst writeCbor = async (ipfs, obj, options) => {\n  const dagNode = Object.assign({}, obj)\n  const links = options.links || []\n  links.forEach((prop) => {\n    dagNode[prop] = cidifyString(dagNode[prop])\n  })\n\n  const base = options.base || defaultBase\n  const onlyHash = options.onlyHash || false\n  const cid = await ipfs.dag.put(dagNode, { onlyHash })\n  return cid.toBaseEncodedString(base)\n}\n\nconst readCbor = async (ipfs, cid, options) => {\n  const result = await ipfs.dag.get(cid)\n  const obj = result.value\n  const links = options.links || []\n  links.forEach((prop) => {\n    obj[prop] = stringifyCid(obj[prop], options)\n  })\n\n  return obj\n}\n\nconst writeObj = async (ipfs, obj, options) => {\n  const onlyHash = options.onlyHash || false\n  const base = options.base || defaultBase\n  const opts = Object.assign({}, { onlyHash: onlyHash }, options.format ? { format: options.format, hashAlg: 'sha2-256' } : {})\n  if (opts.format === 'dag-pb') {\n    obj = dagPB.DAGNode.create(obj)\n  }\n\n  const cid = await ipfs.dag.put(obj, opts)\n  return cid.toBaseEncodedString(base)\n}\n\nconst formats = {\n  'dag-pb': { read: readPb, write: writePb },\n  'dag-cbor': { write: writeCbor, read: readCbor },\n  'raw': { write: writeObj }\n}\n\nconst write = (ipfs, codec, obj, options = {}) => {\n  const format = formats[codec]\n  if (!format) throw new Error('Unsupported codec')\n\n  return format.write(ipfs, obj, options)\n}\n\nconst read = (ipfs, cid, options = {}) => {\n  cid = new CID(cid)\n  const format = formats[cid.codec]\n\n  if (!format) throw new Error('Unsupported codec')\n\n  return format.read(ipfs, cid, options)\n}\n\nmodule.exports = {\n  read,\n  write\n}\n"]},"metadata":{},"sourceType":"script"}