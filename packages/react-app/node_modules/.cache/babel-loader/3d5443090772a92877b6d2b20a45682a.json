{"ast":null,"code":"'use strict';\n\nconst Bitswap = require('ipfs-bitswap');\n\nconst callbackify = require('callbackify');\n\nconst IPNS = require('../ipns');\n\nconst routingConfig = require('../ipns/routing/config');\n\nconst createLibp2pBundle = require('./libp2p');\n\nmodule.exports = self => {\n  return callbackify(async () => {\n    if (self.state.state() !== 'stopped') {\n      throw new Error(`Not able to start from state: ${self.state.state()}`);\n    }\n\n    self.log('starting');\n    self.state.start(); // The repo may be closed if previously stopped\n\n    if (self._repo.closed) {\n      await self._repo.open();\n    }\n\n    const config = await self._repo.config.get();\n    const libp2p = createLibp2pBundle(self, config);\n    await libp2p.start();\n    self.libp2p = libp2p;\n    const ipnsRouting = routingConfig(self);\n    self._ipns = new IPNS(ipnsRouting, self._repo.datastore, self._peerInfo, self._keychain, self._options);\n    self._bitswap = new Bitswap(self.libp2p, self._repo.blocks, {\n      statsEnabled: true\n    });\n    await self._bitswap.start();\n\n    self._blockService.setExchange(self._bitswap);\n\n    await self._preload.start();\n    await self._ipns.republisher.start();\n    await self._mfsPreload.start();\n    self.state.started();\n    self.emit('start');\n  });\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipfs/src/core/components/start.js"],"names":["Bitswap","require","callbackify","IPNS","routingConfig","createLibp2pBundle","module","exports","self","state","Error","log","start","_repo","closed","open","config","get","libp2p","ipnsRouting","_ipns","datastore","_peerInfo","_keychain","_options","_bitswap","blocks","statsEnabled","_blockService","setExchange","_preload","republisher","_mfsPreload","started","emit"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;;AAEA,MAAME,IAAI,GAAGF,OAAO,CAAC,SAAD,CAApB;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,wBAAD,CAA7B;;AACA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,UAAD,CAAlC;;AAEAK,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAON,WAAW,CAAC,YAAY;AAC7B,QAAIM,IAAI,CAACC,KAAL,CAAWA,KAAX,OAAuB,SAA3B,EAAsC;AACpC,YAAM,IAAIC,KAAJ,CAAW,iCAAgCF,IAAI,CAACC,KAAL,CAAWA,KAAX,EAAmB,EAA9D,CAAN;AACD;;AAEDD,IAAAA,IAAI,CAACG,GAAL,CAAS,UAAT;AACAH,IAAAA,IAAI,CAACC,KAAL,CAAWG,KAAX,GAN6B,CAQ7B;;AACA,QAAIJ,IAAI,CAACK,KAAL,CAAWC,MAAf,EAAuB;AACrB,YAAMN,IAAI,CAACK,KAAL,CAAWE,IAAX,EAAN;AACD;;AAED,UAAMC,MAAM,GAAG,MAAMR,IAAI,CAACK,KAAL,CAAWG,MAAX,CAAkBC,GAAlB,EAArB;AACA,UAAMC,MAAM,GAAGb,kBAAkB,CAACG,IAAD,EAAOQ,MAAP,CAAjC;AAEA,UAAME,MAAM,CAACN,KAAP,EAAN;AACAJ,IAAAA,IAAI,CAACU,MAAL,GAAcA,MAAd;AAEA,UAAMC,WAAW,GAAGf,aAAa,CAACI,IAAD,CAAjC;AACAA,IAAAA,IAAI,CAACY,KAAL,GAAa,IAAIjB,IAAJ,CAASgB,WAAT,EAAsBX,IAAI,CAACK,KAAL,CAAWQ,SAAjC,EAA4Cb,IAAI,CAACc,SAAjD,EAA4Dd,IAAI,CAACe,SAAjE,EAA4Ef,IAAI,CAACgB,QAAjF,CAAb;AAEAhB,IAAAA,IAAI,CAACiB,QAAL,GAAgB,IAAIzB,OAAJ,CACdQ,IAAI,CAACU,MADS,EAEdV,IAAI,CAACK,KAAL,CAAWa,MAFG,EAEK;AACjBC,MAAAA,YAAY,EAAE;AADG,KAFL,CAAhB;AAOA,UAAMnB,IAAI,CAACiB,QAAL,CAAcb,KAAd,EAAN;;AAEAJ,IAAAA,IAAI,CAACoB,aAAL,CAAmBC,WAAnB,CAA+BrB,IAAI,CAACiB,QAApC;;AAEA,UAAMjB,IAAI,CAACsB,QAAL,CAAclB,KAAd,EAAN;AACA,UAAMJ,IAAI,CAACY,KAAL,CAAWW,WAAX,CAAuBnB,KAAvB,EAAN;AACA,UAAMJ,IAAI,CAACwB,WAAL,CAAiBpB,KAAjB,EAAN;AAEAJ,IAAAA,IAAI,CAACC,KAAL,CAAWwB,OAAX;AACAzB,IAAAA,IAAI,CAAC0B,IAAL,CAAU,OAAV;AACD,GAvCiB,CAAlB;AAwCD,CAzCD","sourcesContent":["'use strict'\n\nconst Bitswap = require('ipfs-bitswap')\nconst callbackify = require('callbackify')\n\nconst IPNS = require('../ipns')\nconst routingConfig = require('../ipns/routing/config')\nconst createLibp2pBundle = require('./libp2p')\n\nmodule.exports = (self) => {\n  return callbackify(async () => {\n    if (self.state.state() !== 'stopped') {\n      throw new Error(`Not able to start from state: ${self.state.state()}`)\n    }\n\n    self.log('starting')\n    self.state.start()\n\n    // The repo may be closed if previously stopped\n    if (self._repo.closed) {\n      await self._repo.open()\n    }\n\n    const config = await self._repo.config.get()\n    const libp2p = createLibp2pBundle(self, config)\n\n    await libp2p.start()\n    self.libp2p = libp2p\n\n    const ipnsRouting = routingConfig(self)\n    self._ipns = new IPNS(ipnsRouting, self._repo.datastore, self._peerInfo, self._keychain, self._options)\n\n    self._bitswap = new Bitswap(\n      self.libp2p,\n      self._repo.blocks, {\n        statsEnabled: true\n      }\n    )\n\n    await self._bitswap.start()\n\n    self._blockService.setExchange(self._bitswap)\n\n    await self._preload.start()\n    await self._ipns.republisher.start()\n    await self._mfsPreload.start()\n\n    self.state.started()\n    self.emit('start')\n  })\n}\n"]},"metadata":{},"sourceType":"script"}