{"ast":null,"code":"'use strict';\n\nconst handshake = require('pull-handshake');\n\nconst pullLP = require('pull-length-prefixed');\n\nconst util = require('./util');\n\nconst writeEncoded = util.writeEncoded;\n\nconst errCode = require('err-code');\n\nconst {\n  errors\n} = require('./constants');\n\nfunction select(multicodec, callback, log) {\n  const stream = handshake({\n    timeout: 60 * 1000\n  }, callback);\n  const shake = stream.handshake;\n  log('writing multicodec: ' + multicodec);\n  writeEncoded(shake, Buffer.from(multicodec + '\\n'), callback);\n  pullLP.decodeFromReader(shake, (err, data) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const protocol = data.toString().slice(0, -1);\n\n    if (protocol !== multicodec) {\n      const err = errCode(new Error(`\"${multicodec}\" not supported`), errors.MULTICODEC_NOT_SUPPORTED);\n      return callback(err, shake.rest());\n    }\n\n    log('received ack: ' + protocol);\n    callback(null, shake.rest());\n  });\n  return stream;\n}\n\nmodule.exports = select;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/multistream-select/src/select.js"],"names":["handshake","require","pullLP","util","writeEncoded","errCode","errors","select","multicodec","callback","log","stream","timeout","shake","Buffer","from","decodeFromReader","err","data","protocol","toString","slice","Error","MULTICODEC_NOT_SUPPORTED","rest","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,sBAAD,CAAtB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMG,YAAY,GAAGD,IAAI,CAACC,YAA1B;;AAEA,MAAMC,OAAO,GAAGJ,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAaL,OAAO,CAAC,aAAD,CAA1B;;AAEA,SAASM,MAAT,CAAiBC,UAAjB,EAA6BC,QAA7B,EAAuCC,GAAvC,EAA4C;AAC1C,QAAMC,MAAM,GAAGX,SAAS,CAAC;AACvBY,IAAAA,OAAO,EAAE,KAAK;AADS,GAAD,EAErBH,QAFqB,CAAxB;AAIA,QAAMI,KAAK,GAAGF,MAAM,CAACX,SAArB;AAEAU,EAAAA,GAAG,CAAC,yBAAyBF,UAA1B,CAAH;AACAJ,EAAAA,YAAY,CAACS,KAAD,EAAQC,MAAM,CAACC,IAAP,CAAYP,UAAU,GAAG,IAAzB,CAAR,EAAwCC,QAAxC,CAAZ;AAEAP,EAAAA,MAAM,CAACc,gBAAP,CAAwBH,KAAxB,EAA+B,CAACI,GAAD,EAAMC,IAAN,KAAe;AAC5C,QAAID,GAAJ,EAAS;AACP,aAAOR,QAAQ,CAACQ,GAAD,CAAf;AACD;;AACD,UAAME,QAAQ,GAAGD,IAAI,CAACE,QAAL,GAAgBC,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,CAAjB;;AAEA,QAAIF,QAAQ,KAAKX,UAAjB,EAA6B;AAC3B,YAAMS,GAAG,GAAGZ,OAAO,CAAC,IAAIiB,KAAJ,CAAW,IAAGd,UAAW,iBAAzB,CAAD,EAA6CF,MAAM,CAACiB,wBAApD,CAAnB;AAEA,aAAOd,QAAQ,CAACQ,GAAD,EAAMJ,KAAK,CAACW,IAAN,EAAN,CAAf;AACD;;AAEDd,IAAAA,GAAG,CAAC,mBAAmBS,QAApB,CAAH;AACAV,IAAAA,QAAQ,CAAC,IAAD,EAAOI,KAAK,CAACW,IAAN,EAAP,CAAR;AACD,GAdD;AAgBA,SAAOb,MAAP;AACD;;AAEDc,MAAM,CAACC,OAAP,GAAiBnB,MAAjB","sourcesContent":["'use strict'\n\nconst handshake = require('pull-handshake')\nconst pullLP = require('pull-length-prefixed')\nconst util = require('./util')\nconst writeEncoded = util.writeEncoded\n\nconst errCode = require('err-code')\nconst { errors } = require('./constants')\n\nfunction select (multicodec, callback, log) {\n  const stream = handshake({\n    timeout: 60 * 1000\n  }, callback)\n\n  const shake = stream.handshake\n\n  log('writing multicodec: ' + multicodec)\n  writeEncoded(shake, Buffer.from(multicodec + '\\n'), callback)\n\n  pullLP.decodeFromReader(shake, (err, data) => {\n    if (err) {\n      return callback(err)\n    }\n    const protocol = data.toString().slice(0, -1)\n\n    if (protocol !== multicodec) {\n      const err = errCode(new Error(`\"${multicodec}\" not supported`), errors.MULTICODEC_NOT_SUPPORTED)\n\n      return callback(err, shake.rest())\n    }\n\n    log('received ack: ' + protocol)\n    callback(null, shake.rest())\n  })\n\n  return stream\n}\n\nmodule.exports = select\n"]},"metadata":{},"sourceType":"script"}