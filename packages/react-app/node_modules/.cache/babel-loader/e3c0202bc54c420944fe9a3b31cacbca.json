{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst updateTree = require('./utils/update-tree');\n\nconst updateMfsRoot = require('./utils/update-mfs-root');\n\nconst toSources = require('./utils/to-sources');\n\nconst removeLink = require('./utils/remove-link');\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst toTrail = require('./utils/to-trail');\n\nconst applyDefaultOptions = require('./utils/apply-default-options');\n\nconst {\n  FILE_SEPARATOR\n} = require('./utils/constants');\n\nconst defaultOptions = {\n  recursive: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  format: 'dag-pb',\n  flush: true\n};\n\nmodule.exports = context => {\n  return async function mfsRm() {\n    const args = Array.from(arguments);\n    const {\n      sources\n    } = await toSources(context, args, defaultOptions);\n    const options = applyDefaultOptions(args, defaultOptions);\n\n    if (!sources.length) {\n      throw errCode(new Error('Please supply at least one path to remove'), 'ERR_INVALID_PARAMS');\n    }\n\n    sources.forEach(source => {\n      if (source.path === FILE_SEPARATOR) {\n        throw errCode(new Error('Cannot delete root'), 'ERR_INVALID_PARAMS');\n      }\n    });\n\n    for (const source of sources) {\n      await removePath(context, source.path, options);\n    }\n  };\n};\n\nconst removePath = async (context, path, options) => {\n  const mfsPath = await toMfsPath(context, path);\n  const trail = await toTrail(context, mfsPath.mfsPath, options);\n  const child = trail.pop();\n  const parent = trail[trail.length - 1];\n\n  if (!parent) {\n    throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND');\n  }\n\n  if (child.type === 'directory' && !options.recursive) {\n    throw errCode(new Error(`${path} is a directory, use -r to remove directories`), 'ERR_WAS_DIR');\n  }\n\n  const {\n    cid\n  } = await removeLink(context, {\n    parentCid: parent.cid,\n    name: child.name,\n    format: options.format,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush\n  });\n  parent.cid = cid; // update the tree with the new child\n\n  const newRootCid = await updateTree(context, trail, options); // Update the MFS record with the new CID for the root of the tree\n\n  await updateMfsRoot(context, newRootCid);\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipfs-mfs/src/core/rm.js"],"names":["errCode","require","updateTree","updateMfsRoot","toSources","removeLink","toMfsPath","toTrail","applyDefaultOptions","FILE_SEPARATOR","defaultOptions","recursive","cidVersion","hashAlg","format","flush","module","exports","context","mfsRm","args","Array","from","arguments","sources","options","length","Error","forEach","source","path","removePath","mfsPath","trail","child","pop","parent","type","cid","parentCid","name","newRootCid"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst updateTree = require('./utils/update-tree')\nconst updateMfsRoot = require('./utils/update-mfs-root')\nconst toSources = require('./utils/to-sources')\nconst removeLink = require('./utils/remove-link')\nconst toMfsPath = require('./utils/to-mfs-path')\nconst toTrail = require('./utils/to-trail')\nconst applyDefaultOptions = require('./utils/apply-default-options')\nconst {\n  FILE_SEPARATOR\n} = require('./utils/constants')\n\nconst defaultOptions = {\n  recursive: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  format: 'dag-pb',\n  flush: true\n}\n\nmodule.exports = (context) => {\n  return async function mfsRm () {\n    const args = Array.from(arguments)\n\n    const {\n      sources\n    } = await toSources(context, args, defaultOptions)\n    const options = applyDefaultOptions(args, defaultOptions)\n\n    if (!sources.length) {\n      throw errCode(new Error('Please supply at least one path to remove'), 'ERR_INVALID_PARAMS')\n    }\n\n    sources.forEach(source => {\n      if (source.path === FILE_SEPARATOR) {\n        throw errCode(new Error('Cannot delete root'), 'ERR_INVALID_PARAMS')\n      }\n    })\n\n    for (const source of sources) {\n      await removePath(context, source.path, options)\n    }\n  }\n}\n\nconst removePath = async (context, path, options) => {\n  const mfsPath = await toMfsPath(context, path)\n  const trail = await toTrail(context, mfsPath.mfsPath, options)\n  const child = trail.pop()\n  const parent = trail[trail.length - 1]\n\n  if (!parent) {\n    throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n  }\n\n  if (child.type === 'directory' && !options.recursive) {\n    throw errCode(new Error(`${path} is a directory, use -r to remove directories`), 'ERR_WAS_DIR')\n  }\n\n  const {\n    cid\n  } = await removeLink(context, {\n    parentCid: parent.cid,\n    name: child.name,\n    format: options.format,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush\n  })\n\n  parent.cid = cid\n\n  // update the tree with the new child\n  const newRootCid = await updateTree(context, trail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid)\n}\n"]},"metadata":{},"sourceType":"script"}