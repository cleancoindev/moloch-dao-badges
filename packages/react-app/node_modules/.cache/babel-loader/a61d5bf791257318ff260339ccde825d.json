{"ast":null,"code":"'use strict';\n\nconst Multiaddr = require('multiaddr');\n\nconst mafmt = require('mafmt');\n\nconst {\n  struct,\n  superstruct\n} = require('superstruct');\n\nconst {\n  isTest\n} = require('ipfs-utils/src/env');\n\nconst {\n  optional,\n  union\n} = struct;\nconst s = superstruct({\n  types: {\n    multiaddr: v => {\n      if (v === null) {\n        return `multiaddr invalid, value must be a string, Buffer, or another Multiaddr got ${v}`;\n      }\n\n      try {\n        Multiaddr(v);\n      } catch (err) {\n        return `multiaddr invalid, ${err.message}`;\n      }\n\n      return true;\n    },\n    'multiaddr-ipfs': v => mafmt.IPFS.matches(v) ? true : 'multiaddr IPFS invalid'\n  }\n});\nconst configSchema = s({\n  repo: optional(s('object|string')),\n  repoOwner: 'boolean?',\n  repoAutoMigrate: 'boolean?',\n  preload: s({\n    enabled: 'boolean?',\n    addresses: optional(s(['multiaddr'])),\n    interval: 'number?'\n  }, {\n    enabled: !isTest,\n    interval: 30 * 1000\n  }),\n  init: optional(union(['boolean', s({\n    bits: 'number?',\n    emptyRepo: 'boolean?',\n    privateKey: optional(s('object|string')),\n    // object should be a custom type for PeerId using 'kind-of'\n    pass: 'string?',\n    profiles: 'array?'\n  })])),\n  start: 'boolean?',\n  offline: 'boolean?',\n  pass: 'string?',\n  silent: 'boolean?',\n  relay: 'object?',\n  // relay validates in libp2p\n  EXPERIMENTAL: optional(s({\n    pubsub: 'boolean?',\n    ipnsPubsub: 'boolean?',\n    sharding: 'boolean?',\n    dht: 'boolean?'\n  })),\n  connectionManager: 'object?',\n  config: optional(s({\n    API: 'object?',\n    Addresses: optional(s({\n      Delegates: optional(s(['multiaddr'])),\n      Swarm: optional(s(['multiaddr'])),\n      API: optional(union([s('multiaddr'), s(['multiaddr'])])),\n      Gateway: optional(union([s('multiaddr'), s(['multiaddr'])]))\n    })),\n    Discovery: optional(s({\n      MDNS: optional(s({\n        Enabled: 'boolean?',\n        Interval: 'number?'\n      })),\n      webRTCStar: optional(s({\n        Enabled: 'boolean?'\n      }))\n    })),\n    Bootstrap: optional(s(['multiaddr-ipfs'])),\n    Pubsub: optional(s({\n      Router: 'string?',\n      Enabled: 'boolean?'\n    })),\n    Swarm: optional(s({\n      ConnMgr: optional(s({\n        LowWater: 'number?',\n        HighWater: 'number?'\n      }))\n    }))\n  })),\n  ipld: 'object?',\n  libp2p: optional(union(['function', 'object'])) // libp2p validates this\n\n}, {\n  repoOwner: true\n});\n\nconst validate = opts => {\n  const [err, options] = configSchema.validate(opts);\n\n  if (err) {\n    throw err;\n  }\n\n  return options;\n};\n\nmodule.exports = {\n  validate\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs/src/core/config.js"],"names":["Multiaddr","require","mafmt","struct","superstruct","isTest","optional","union","s","types","multiaddr","v","err","message","IPFS","matches","configSchema","repo","repoOwner","repoAutoMigrate","preload","enabled","addresses","interval","init","bits","emptyRepo","privateKey","pass","profiles","start","offline","silent","relay","EXPERIMENTAL","pubsub","ipnsPubsub","sharding","dht","connectionManager","config","API","Addresses","Delegates","Swarm","Gateway","Discovery","MDNS","Enabled","Interval","webRTCStar","Bootstrap","Pubsub","Router","ConnMgr","LowWater","HighWater","ipld","libp2p","validate","opts","options","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Multiaddr = require('multiaddr')\nconst mafmt = require('mafmt')\nconst { struct, superstruct } = require('superstruct')\nconst { isTest } = require('ipfs-utils/src/env')\n\nconst { optional, union } = struct\nconst s = superstruct({\n  types: {\n    multiaddr: v => {\n      if (v === null) {\n        return `multiaddr invalid, value must be a string, Buffer, or another Multiaddr got ${v}`\n      }\n\n      try {\n        Multiaddr(v)\n      } catch (err) {\n        return `multiaddr invalid, ${err.message}`\n      }\n\n      return true\n    },\n    'multiaddr-ipfs': v => mafmt.IPFS.matches(v) ? true : 'multiaddr IPFS invalid'\n  }\n})\n\nconst configSchema = s({\n  repo: optional(s('object|string')),\n  repoOwner: 'boolean?',\n  repoAutoMigrate: 'boolean?',\n  preload: s({\n    enabled: 'boolean?',\n    addresses: optional(s(['multiaddr'])),\n    interval: 'number?'\n  }, { enabled: !isTest, interval: 30 * 1000 }),\n  init: optional(union(['boolean', s({\n    bits: 'number?',\n    emptyRepo: 'boolean?',\n    privateKey: optional(s('object|string')), // object should be a custom type for PeerId using 'kind-of'\n    pass: 'string?',\n    profiles: 'array?'\n  })])),\n  start: 'boolean?',\n  offline: 'boolean?',\n  pass: 'string?',\n  silent: 'boolean?',\n  relay: 'object?', // relay validates in libp2p\n  EXPERIMENTAL: optional(s({\n    pubsub: 'boolean?',\n    ipnsPubsub: 'boolean?',\n    sharding: 'boolean?',\n    dht: 'boolean?'\n  })),\n  connectionManager: 'object?',\n  config: optional(s({\n    API: 'object?',\n    Addresses: optional(s({\n      Delegates: optional(s(['multiaddr'])),\n      Swarm: optional(s(['multiaddr'])),\n      API: optional(union([s('multiaddr'), s(['multiaddr'])])),\n      Gateway: optional(union([s('multiaddr'), s(['multiaddr'])]))\n    })),\n    Discovery: optional(s({\n      MDNS: optional(s({\n        Enabled: 'boolean?',\n        Interval: 'number?'\n      })),\n      webRTCStar: optional(s({\n        Enabled: 'boolean?'\n      }))\n    })),\n    Bootstrap: optional(s(['multiaddr-ipfs'])),\n    Pubsub: optional(s({\n      Router: 'string?',\n      Enabled: 'boolean?'\n    })),\n    Swarm: optional(s({\n      ConnMgr: optional(s({\n        LowWater: 'number?',\n        HighWater: 'number?'\n      }))\n    }))\n  })),\n  ipld: 'object?',\n  libp2p: optional(union(['function', 'object'])) // libp2p validates this\n}, {\n  repoOwner: true\n})\n\nconst validate = (opts) => {\n  const [err, options] = configSchema.validate(opts)\n\n  if (err) {\n    throw err\n  }\n\n  return options\n}\n\nmodule.exports = { validate }\n"]},"metadata":{},"sourceType":"script"}