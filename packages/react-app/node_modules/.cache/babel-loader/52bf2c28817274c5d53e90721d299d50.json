{"ast":null,"code":"var _jsxFileName = \"/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/packages/react-app/src/components/badges/BadgeList.js\";\nimport React, { useEffect, useContext, useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Flex, Heading, Text, Box } from \"rebass\";\nimport { GET_BADGES } from \"../../utils/Queries\";\nimport { hydrateBadgeData, getLog } from \"../../utils/Helpers\";\nimport BadgeRegistry from \"../../assets/data/badges.json\";\nimport BadgeItem from \"./BadgeItem\";\nimport { Web3ModalContext } from \"../../contexts/Store\";\nimport { addresses, abis } from \"@project/contracts\";\n\nconst BadgeList = ({\n  playerAddr\n}) => {\n  const [badges, setBadges] = React.useState([]);\n  const [web3Modal] = useContext(Web3ModalContext);\n  const [txloading, setTxloading] = useState(false);\n  const [contract, setContract] = useState();\n  const [events, setEvents] = useState();\n  const [playerNFTs, setPlayerNFTs] = useState([]);\n  console.log('rerender', web3Modal);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_BADGES, {\n    variables: {\n      addr: `${playerAddr}`\n    }\n  }); // get mint log events for player and nft contract\n\n  useEffect(() => {\n    const asyncGetLogs = async () => {\n      const nftContract = new web3Modal.web3.eth.Contract(abis.NFT, addresses.badgeNFT);\n      setContract(nftContract);\n      const events = await getLog(nftContract, playerAddr);\n      setEvents(events);\n    };\n\n    if (web3Modal.web3) {\n      asyncGetLogs();\n    }\n  }, [web3Modal.web3, playerAddr]); // get token deatils (uri) for each token.\n\n  useEffect(() => {\n    const getDetails = async () => {\n      const promises = [];\n      events.forEach(ev => {\n        const prom = contract.methods.tokenURI(ev.returnValues.tokenId).call();\n        promises.push(prom);\n      });\n      const tokenURIs = await Promise.all(promises);\n      setPlayerNFTs(tokenURIs.map(uri => uri.split(\"/\")[uri.split(\"/\").length - 1].split(\"-\")));\n    };\n\n    if (events && events.length) {\n      getDetails();\n    }\n  }, [events, contract]); // hydrate data for badge item\n\n  useEffect(() => {\n    if (!loading && !error && data && playerNFTs) {\n      const hydratedBadgeData = hydrateBadgeData(BadgeRegistry, data.badges, playerNFTs);\n      setBadges(hydratedBadgeData);\n    }\n  }, [loading, error, data, playerNFTs]);\n\n  const mintNFT = async badgeHash => {\n    setTxloading(true);\n\n    try {\n      const txReceipt = await contract.methods.awardBadge(playerAddr, \"https://gateway.pinata.cloud/ipfs/\" + badgeHash).send({\n        from: playerAddr\n      });\n      console.log('txReceipt', txReceipt);\n    } catch {\n      console.log('rejected');\n    } finally {\n      await getEventsFromLog();\n      setTxloading(false);\n    }\n  };\n\n  const getEventsFromLog = async () => {\n    const nftContract = new web3Modal.web3.eth.Contract(abis.NFT, addresses.badgeNFT);\n    setContract(nftContract);\n    const events = await getLog(nftContract, playerAddr);\n    setEvents(events);\n  };\n\n  const renderBadges = () => {\n    return badges.map((badge, idx) => {\n      return /*#__PURE__*/React.createElement(Box, {\n        mb: 5,\n        key: idx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Heading, {\n        fontSize: 5,\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }\n      }, badge.title), /*#__PURE__*/React.createElement(Text, {\n        fontSize: 3,\n        fontWeight: \"bold\",\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }, badge.description), /*#__PURE__*/React.createElement(Flex, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }\n      }, renderBadgeItems(badge)));\n    });\n  };\n\n  const renderBadgeItems = badge => {\n    return badge.thresholds.map((step, idx) => {\n      return /*#__PURE__*/React.createElement(BadgeItem, {\n        mintNFT: mintNFT,\n        badge: badge,\n        step: step,\n        idx: idx,\n        key: idx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 14\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 10\n    }\n  }, (loading || txloading) && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 42\n    }\n  }, \"loading...\"), badges.length && renderBadges());\n};\n\nexport default BadgeList;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/packages/react-app/src/components/badges/BadgeList.js"],"names":["React","useEffect","useContext","useState","useQuery","Flex","Heading","Text","Box","GET_BADGES","hydrateBadgeData","getLog","BadgeRegistry","BadgeItem","Web3ModalContext","addresses","abis","BadgeList","playerAddr","badges","setBadges","web3Modal","txloading","setTxloading","contract","setContract","events","setEvents","playerNFTs","setPlayerNFTs","console","log","loading","error","data","variables","addr","asyncGetLogs","nftContract","web3","eth","Contract","NFT","badgeNFT","getDetails","promises","forEach","ev","prom","methods","tokenURI","returnValues","tokenId","call","push","tokenURIs","Promise","all","map","uri","split","length","hydratedBadgeData","mintNFT","badgeHash","txReceipt","awardBadge","send","from","getEventsFromLog","renderBadges","badge","idx","title","description","renderBadgeItems","thresholds","step"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Flex, Heading, Text, Box } from \"rebass\";\n\nimport { GET_BADGES } from \"../../utils/Queries\";\nimport { hydrateBadgeData, getLog } from \"../../utils/Helpers\";\nimport BadgeRegistry from \"../../assets/data/badges.json\";\nimport BadgeItem from \"./BadgeItem\";\nimport { Web3ModalContext } from \"../../contexts/Store\";\nimport { addresses, abis } from \"@project/contracts\";\n\nconst BadgeList = ({ playerAddr }) => {\n  const [badges, setBadges] = React.useState([]);\n  const [web3Modal] = useContext(Web3ModalContext)\n  const [txloading, setTxloading] = useState(false)\n  const [contract, setContract] = useState()\n  const [events, setEvents] = useState()\n  const [playerNFTs, setPlayerNFTs] = useState([])\n  console.log('rerender', web3Modal);\n\n  const { loading, error, data } = useQuery(GET_BADGES, {\n    variables: {\n      addr: `${playerAddr}`,\n    },\n  });\n\n  // get mint log events for player and nft contract\n  useEffect(() => {\n    const asyncGetLogs = async () => {\n      const nftContract = new web3Modal.web3.eth.Contract(abis.NFT, addresses.badgeNFT);\n      setContract(nftContract);\n      const events = await getLog(nftContract, playerAddr)\n      setEvents(events);\n    }\n    if (web3Modal.web3) {\n      asyncGetLogs();\n    }\n  }, [web3Modal.web3, playerAddr])\n\n  // get token deatils (uri) for each token.\n  useEffect(() => {\n    const getDetails = async () => {\n      const promises = [];\n      \n      events.forEach((ev) => {\n        const prom = contract.methods.tokenURI(ev.returnValues.tokenId).call();\n        promises.push(prom)\n      })\n      const tokenURIs = await Promise.all(promises);\n      setPlayerNFTs(tokenURIs.map((uri) => (\n        uri.split(\"/\")[uri.split(\"/\").length - 1].split(\"-\")\n      )))\n    }\n    if (events && events.length) {\n      getDetails();\n    }\n  }, [events, contract])\n\n  // hydrate data for badge item\n  useEffect(() => {\n    if (!loading && !error && data && playerNFTs) {\n      const hydratedBadgeData = hydrateBadgeData(BadgeRegistry, data.badges, playerNFTs);\n      setBadges(hydratedBadgeData);\n    }\n  }, [loading, error, data, playerNFTs]);\n\n  const mintNFT = async (badgeHash) => {\n    setTxloading(true);\n    try {\n      const txReceipt = await contract.methods\n        .awardBadge(playerAddr, \"https://gateway.pinata.cloud/ipfs/\" + badgeHash)\n        .send({ from: playerAddr });\n      console.log('txReceipt', txReceipt);\n    } catch {\n      console.log('rejected');\n    } finally {\n      await getEventsFromLog();\n      setTxloading(false);\n    }\n\n  }\n\n  const getEventsFromLog = async () => {\n    const nftContract = new web3Modal.web3.eth.Contract(abis.NFT, addresses.badgeNFT);\n    setContract(nftContract);\n    const events = await getLog(nftContract, playerAddr);\n    setEvents(events);\n  }\n\n  const renderBadges = () => {\n    return badges.map((badge, idx) => {\n      return (\n        <Box mb={5} key={idx}>\n          <Heading fontSize={5} color=\"primary\">\n            {badge.title}\n          </Heading>\n          <Text fontSize={3} fontWeight=\"bold\" color=\"primary\">\n            {badge.description}\n          </Text>\n          <Flex>{renderBadgeItems(badge)}</Flex>\n        </Box>\n      );\n    });\n  };\n\n  const renderBadgeItems = (badge) => {\n    return badge.thresholds.map((step, idx) => {\n      return <BadgeItem\n        mintNFT={mintNFT}\n        badge={badge}\n        step={step}\n        idx={idx}\n        key={idx} />;\n    });\n  };\n\n  return <div>{(loading || txloading) && <p>loading...</p>}{badges.length && renderBadges()}</div>;\n};\n\nexport default BadgeList;\n"]},"metadata":{},"sourceType":"module"}