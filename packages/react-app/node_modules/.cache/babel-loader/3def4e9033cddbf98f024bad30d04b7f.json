{"ast":null,"code":"'use strict';\n\nconst abortable = require('pull-abortable');\n\nconst pull = require('pull-stream');\n\nconst debug = require('debug');\n\nconst MULTIPLEX_CODEC = require('./codec');\n\nconst Mplex = require('./mplex');\n\nconst Muxer = require('./muxer');\n\nconst log = debug('pull-plex');\nlog.err = debug('pull-plex:err');\n/**\n * Wraps `conn` with a `StreamMuxer` and returns the `StreamMuxer`\n * @param {Connection} conn An `interface-connection` compliant connection\n * @param {boolean} isListener Whether or not the muxer is the listener\n * @returns {StreamMuxer}\n */\n\nfunction create(conn, isListener) {\n  const mpx = new Mplex(!isListener);\n  const aborter = abortable();\n  pull(conn, mpx, aborter, conn);\n  const muxer = new Muxer(conn, mpx);\n  muxer.once('error', err => {\n    log.err('got error', err);\n    aborter.abort(err); // TODO: should we do the abort here or just ignore?\n  });\n  muxer.on('close', () => {\n    log('closing muxer');\n    aborter.abort();\n  });\n  return muxer;\n}\n\nexports = module.exports = create;\nexports.pullMplex = Mplex;\nexports.multicodec = MULTIPLEX_CODEC;\n\nexports.dialer = conn => create(conn, false);\n\nexports.listener = conn => create(conn, true);","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/pull-mplex/src/index.js"],"names":["abortable","require","pull","debug","MULTIPLEX_CODEC","Mplex","Muxer","log","err","create","conn","isListener","mpx","aborter","muxer","once","abort","on","exports","module","pullMplex","multicodec","dialer","listener"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,aAAD,CAApB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMG,eAAe,GAAGH,OAAO,CAAC,SAAD,CAA/B;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,SAAD,CAArB;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAMM,GAAG,GAAGJ,KAAK,CAAC,WAAD,CAAjB;AACAI,GAAG,CAACC,GAAJ,GAAUL,KAAK,CAAC,eAAD,CAAf;AAEA;;;;;;;AAMA,SAASM,MAAT,CAAiBC,IAAjB,EAAuBC,UAAvB,EAAmC;AACjC,QAAMC,GAAG,GAAG,IAAIP,KAAJ,CAAU,CAACM,UAAX,CAAZ;AACA,QAAME,OAAO,GAAGb,SAAS,EAAzB;AAEAE,EAAAA,IAAI,CACFQ,IADE,EAEFE,GAFE,EAGFC,OAHE,EAIFH,IAJE,CAAJ;AAOA,QAAMI,KAAK,GAAG,IAAIR,KAAJ,CAAUI,IAAV,EAAgBE,GAAhB,CAAd;AACAE,EAAAA,KAAK,CAACC,IAAN,CAAW,OAAX,EAAqBP,GAAD,IAAS;AAC3BD,IAAAA,GAAG,CAACC,GAAJ,CAAQ,WAAR,EAAqBA,GAArB;AACAK,IAAAA,OAAO,CAACG,KAAR,CAAcR,GAAd,EAF2B,CAER;AACpB,GAHD;AAKAM,EAAAA,KAAK,CAACG,EAAN,CAAS,OAAT,EAAkB,MAAM;AACtBV,IAAAA,GAAG,CAAC,eAAD,CAAH;AACAM,IAAAA,OAAO,CAACG,KAAR;AACD,GAHD;AAKA,SAAOF,KAAP;AACD;;AAEDI,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBT,MAA3B;AACAS,OAAO,CAACE,SAAR,GAAoBf,KAApB;AACAa,OAAO,CAACG,UAAR,GAAqBjB,eAArB;;AACAc,OAAO,CAACI,MAAR,GAAkBZ,IAAD,IAAUD,MAAM,CAACC,IAAD,EAAO,KAAP,CAAjC;;AACAQ,OAAO,CAACK,QAAR,GAAoBb,IAAD,IAAUD,MAAM,CAACC,IAAD,EAAO,IAAP,CAAnC","sourcesContent":["'use strict'\n\nconst abortable = require('pull-abortable')\nconst pull = require('pull-stream')\nconst debug = require('debug')\n\nconst MULTIPLEX_CODEC = require('./codec')\nconst Mplex = require('./mplex')\nconst Muxer = require('./muxer')\n\nconst log = debug('pull-plex')\nlog.err = debug('pull-plex:err')\n\n/**\n * Wraps `conn` with a `StreamMuxer` and returns the `StreamMuxer`\n * @param {Connection} conn An `interface-connection` compliant connection\n * @param {boolean} isListener Whether or not the muxer is the listener\n * @returns {StreamMuxer}\n */\nfunction create (conn, isListener) {\n  const mpx = new Mplex(!isListener)\n  const aborter = abortable()\n\n  pull(\n    conn,\n    mpx,\n    aborter,\n    conn\n  )\n\n  const muxer = new Muxer(conn, mpx)\n  muxer.once('error', (err) => {\n    log.err('got error', err)\n    aborter.abort(err) // TODO: should we do the abort here or just ignore?\n  })\n\n  muxer.on('close', () => {\n    log('closing muxer')\n    aborter.abort()\n  })\n\n  return muxer\n}\n\nexports = module.exports = create\nexports.pullMplex = Mplex\nexports.multicodec = MULTIPLEX_CODEC\nexports.dialer = (conn) => create(conn, false)\nexports.listener = (conn) => create(conn, true)\n"]},"metadata":{},"sourceType":"script"}