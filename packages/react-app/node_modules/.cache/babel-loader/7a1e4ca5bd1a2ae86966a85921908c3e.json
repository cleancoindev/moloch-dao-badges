{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _require = require('./index'),\n    fetchText = _require.fetchText,\n    getMessageConsent = _require.getMessageConsent;\n\nvar didJWT = require('did-jwt');\n\nvar _require2 = require('@ethersproject/wallet'),\n    verifyMessage = _require2.verifyMessage;\n\nvar config = require('../config.js');\n\nvar utils = require('./index');\n\nvar registerResolver = require('3id-resolver');\n\nrequire('https-did-resolver')[\"default\"]();\n\nrequire('muport-did-resolver')();\n\nvar PROFILE_SERVER_URL = config.profile_server_url; // Mocks ipfs obj for 3id resolve, to resolve through api, until ipfs instance is available\n\nvar ipfs = function ipfs(didServerUrl) {\n  return {\n    dag: {\n      get: function () {\n        var _get = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(cid) {\n          var req;\n          return _regenerator[\"default\"].wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  req = \"\".concat(didServerUrl, \"/did-doc?cid=\").concat(encodeURIComponent(cid));\n                  return _context.abrupt(\"return\", utils.fetchJson(req));\n\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function get(_x) {\n          return _get.apply(this, arguments);\n        }\n\n        return get;\n      }()\n    }\n  };\n};\n\nregisterResolver(ipfs(PROFILE_SERVER_URL), {\n  pin: false\n});\nmodule.exports = {\n  /**\n   * Verifies that the gist contains the given 3ID and returns the users github username.\n   * Throws an error otherwise.\n   *\n   * @param     {String}            did                     The 3ID of the user (or array of equivalent dids)\n   * @param     {Object}            gistUrl                 URL of the proof\n   * @return    {Object}                                    Object containing username, and proof\n   */\n  verifyGithub: function () {\n    var _verifyGithub = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(did, gistUrl) {\n      var dids, gistFileContent, includeDid, username;\n      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dids = typeof did === 'string' ? [did] : did;\n\n              if (!(!gistUrl || gistUrl.trim() === '')) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", null);\n\n            case 3:\n              _context2.next = 5;\n              return fetchText(gistUrl);\n\n            case 5:\n              gistFileContent = _context2.sent;\n              includeDid = dids.reduce(function (acc, val) {\n                return acc || gistFileContent.indexOf(val) !== -1;\n              }, false);\n\n              if (includeDid) {\n                _context2.next = 9;\n                break;\n              }\n\n              throw new Error('Gist File provided does not contain the correct DID of the user');\n\n            case 9:\n              username = gistUrl.split('/')[3];\n              return _context2.abrupt(\"return\", {\n                username: username,\n                proof: gistUrl\n              });\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function verifyGithub(_x2, _x3) {\n      return _verifyGithub.apply(this, arguments);\n    }\n\n    return verifyGithub;\n  }(),\n\n  /**\n   * Verifies that the tweet contains the given 3ID and returns the users twitter username.\n   * Throws an error otherwise.\n   *\n   * @param     {String}            did             The 3ID of the user (or array of equivalent dids)\n   * @param     {String}            claim           A did-JWT with claim\n   * @return    {Object}                            Object containing username, proof, and the verifier\n   */\n  verifyTwitter: function () {\n    var _verifyTwitter = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(did, claim) {\n      var dids, verified, claimData;\n      return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dids = typeof did === 'string' ? [did] : did;\n\n              if (claim) {\n                _context3.next = 3;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", null);\n\n            case 3:\n              _context3.next = 5;\n              return didJWT.verifyJWT(claim);\n\n            case 5:\n              verified = _context3.sent;\n\n              if (dids.includes(verified.payload.sub)) {\n                _context3.next = 8;\n                break;\n              }\n\n              throw new Error('Verification not valid for given user');\n\n            case 8:\n              claimData = verified.payload.claim;\n\n              if (!(!claimData.twitter_handle || !claimData.twitter_proof)) {\n                _context3.next = 11;\n                break;\n              }\n\n              throw new Error('The claim for your twitter is not correct');\n\n            case 11:\n              return _context3.abrupt(\"return\", {\n                username: claimData.twitter_handle,\n                proof: claimData.twitter_proof,\n                verifiedBy: verified.payload.iss\n              });\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function verifyTwitter(_x4, _x5) {\n      return _verifyTwitter.apply(this, arguments);\n    }\n\n    return verifyTwitter;\n  }(),\n\n  /**\n   * Verifies that the code entered by the user is the same one that was sent via email.\n   * Throws an error otherwise.\n   *\n   * @param     {String}            did             The 3ID of the user (or array of equivalent dids)\n   * @param     {String}            claim           A did-JWT with claim\n   * @return    {Object}                            Object containing username, proof, and the verifier\n   */\n  verifyEmail: function () {\n    var _verifyEmail = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(did, claim) {\n      var dids, verified, claimData;\n      return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              dids = typeof did === 'string' ? [did] : did;\n\n              if (claim) {\n                _context4.next = 3;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", null);\n\n            case 3:\n              _context4.next = 5;\n              return didJWT.verifyJWT(claim);\n\n            case 5:\n              verified = _context4.sent;\n\n              if (dids.includes(verified.payload.sub)) {\n                _context4.next = 8;\n                break;\n              }\n\n              throw new Error('Verification not valid for given user');\n\n            case 8:\n              claimData = verified.payload.claim;\n\n              if (claimData.email_address) {\n                _context4.next = 11;\n                break;\n              }\n\n              throw new Error('The claim for your email address is not correct');\n\n            case 11:\n              return _context4.abrupt(\"return\", {\n                email_address: claimData.email_address,\n                verifiedBy: verified.payload.iss\n              });\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function verifyEmail(_x6, _x7) {\n      return _verifyEmail.apply(this, arguments);\n    }\n\n    return verifyEmail;\n  }(),\n\n  /**\n   * Verifies that the proof for a did is correct\n   *\n   * @param     {String}            claim           A did-JWT with claim\n   * @return    {String}                            The DID of the user\n   */\n  verifyDID: function () {\n    var _verifyDID = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5(claim) {\n      var verified, muport, res, muportDID;\n      return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return didJWT.verifyJWT(claim);\n\n            case 2:\n              verified = _context5.sent;\n              muport = verified.payload.muport;\n              res = {};\n\n              if (!muport) {\n                _context5.next = 10;\n                break;\n              }\n\n              _context5.next = 8;\n              return didJWT.verifyJWT(muport);\n\n            case 8:\n              muportDID = _context5.sent.payload.iss;\n              res.muport = muportDID;\n\n            case 10:\n              res.did = verified.payload.iss;\n              return _context5.abrupt(\"return\", res);\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function verifyDID(_x8) {\n      return _verifyDID.apply(this, arguments);\n    }\n\n    return verifyDID;\n  }(),\n\n  /**\n   * Verifies that the proof for an ethereum address is correct\n   *\n   * @param     {Object}    ethProof                      The claim generated by getLinkConsent\n   * @param     {string}    ethProof.consent_msg\n   * @param     {string}    ethProof.consent_signature\n   * @param     {string}    ethProof.linked_did\n   * @param     {String}    did                           The box' did\n   * @return    {String}                                  The ethereum address used to sign the message\n   */\n  verifyEthereum: function () {\n    var _verifyEthereum = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee6(ethProof, did) {\n      var dids, consentMsg, consentSig, expected;\n      return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              dids = typeof did === 'string' ? [did] : did; // TODO - is this function needed? Can it be removed in\n              // favour of proofs that are in the rootstore?\n\n              consentMsg = ethProof.version ? ethProof.message : ethProof['consent_msg'];\n              consentSig = ethProof.version ? ethProof.signature : ethProof['consent_signature']; // Make sure the message matches our expectation\n\n              expected = getMessageConsent(did);\n\n              if (!(consentMsg !== expected)) {\n                _context6.next = 6;\n                break;\n              }\n\n              throw new Error(\"Invalid consent message, got: \\\"\".concat(consentMsg, \"\\\", expected: \\\"\").concat(expected, \"\\\"\"));\n\n            case 6:\n              return _context6.abrupt(\"return\", verifyMessage(consentMsg, consentSig));\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function verifyEthereum(_x9, _x10) {\n      return _verifyEthereum.apply(this, arguments);\n    }\n\n    return verifyEthereum;\n  }()\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/3box/lib/utils/verifier.js"],"names":["_interopRequireDefault","require","_regenerator","_asyncToGenerator2","_require","fetchText","getMessageConsent","didJWT","_require2","verifyMessage","config","utils","registerResolver","PROFILE_SERVER_URL","profile_server_url","ipfs","didServerUrl","dag","get","_get","mark","_callee","cid","req","wrap","_callee$","_context","prev","next","concat","encodeURIComponent","abrupt","fetchJson","stop","_x","apply","arguments","pin","module","exports","verifyGithub","_verifyGithub","_callee2","did","gistUrl","dids","gistFileContent","includeDid","username","_callee2$","_context2","trim","sent","reduce","acc","val","indexOf","Error","split","proof","_x2","_x3","verifyTwitter","_verifyTwitter","_callee3","claim","verified","claimData","_callee3$","_context3","verifyJWT","includes","payload","sub","twitter_handle","twitter_proof","verifiedBy","iss","_x4","_x5","verifyEmail","_verifyEmail","_callee4","_callee4$","_context4","email_address","_x6","_x7","verifyDID","_verifyDID","_callee5","muport","res","muportDID","_callee5$","_context5","_x8","verifyEthereum","_verifyEthereum","_callee6","ethProof","consentMsg","consentSig","expected","_callee6$","_context6","version","message","signature","_x9","_x10"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _require = require('./index'),\n    fetchText = _require.fetchText,\n    getMessageConsent = _require.getMessageConsent;\n\nvar didJWT = require('did-jwt');\n\nvar _require2 = require('@ethersproject/wallet'),\n    verifyMessage = _require2.verifyMessage;\n\nvar config = require('../config.js');\n\nvar utils = require('./index');\n\nvar registerResolver = require('3id-resolver');\n\nrequire('https-did-resolver')[\"default\"]();\n\nrequire('muport-did-resolver')();\n\nvar PROFILE_SERVER_URL = config.profile_server_url; // Mocks ipfs obj for 3id resolve, to resolve through api, until ipfs instance is available\n\nvar ipfs = function ipfs(didServerUrl) {\n  return {\n    dag: {\n      get: function () {\n        var _get = (0, _asyncToGenerator2[\"default\"])(\n        /*#__PURE__*/\n        _regenerator[\"default\"].mark(function _callee(cid) {\n          var req;\n          return _regenerator[\"default\"].wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  req = \"\".concat(didServerUrl, \"/did-doc?cid=\").concat(encodeURIComponent(cid));\n                  return _context.abrupt(\"return\", utils.fetchJson(req));\n\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function get(_x) {\n          return _get.apply(this, arguments);\n        }\n\n        return get;\n      }()\n    }\n  };\n};\n\nregisterResolver(ipfs(PROFILE_SERVER_URL), {\n  pin: false\n});\nmodule.exports = {\n  /**\n   * Verifies that the gist contains the given 3ID and returns the users github username.\n   * Throws an error otherwise.\n   *\n   * @param     {String}            did                     The 3ID of the user (or array of equivalent dids)\n   * @param     {Object}            gistUrl                 URL of the proof\n   * @return    {Object}                                    Object containing username, and proof\n   */\n  verifyGithub: function () {\n    var _verifyGithub = (0, _asyncToGenerator2[\"default\"])(\n    /*#__PURE__*/\n    _regenerator[\"default\"].mark(function _callee2(did, gistUrl) {\n      var dids, gistFileContent, includeDid, username;\n      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dids = typeof did === 'string' ? [did] : did;\n\n              if (!(!gistUrl || gistUrl.trim() === '')) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", null);\n\n            case 3:\n              _context2.next = 5;\n              return fetchText(gistUrl);\n\n            case 5:\n              gistFileContent = _context2.sent;\n              includeDid = dids.reduce(function (acc, val) {\n                return acc || gistFileContent.indexOf(val) !== -1;\n              }, false);\n\n              if (includeDid) {\n                _context2.next = 9;\n                break;\n              }\n\n              throw new Error('Gist File provided does not contain the correct DID of the user');\n\n            case 9:\n              username = gistUrl.split('/')[3];\n              return _context2.abrupt(\"return\", {\n                username: username,\n                proof: gistUrl\n              });\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function verifyGithub(_x2, _x3) {\n      return _verifyGithub.apply(this, arguments);\n    }\n\n    return verifyGithub;\n  }(),\n\n  /**\n   * Verifies that the tweet contains the given 3ID and returns the users twitter username.\n   * Throws an error otherwise.\n   *\n   * @param     {String}            did             The 3ID of the user (or array of equivalent dids)\n   * @param     {String}            claim           A did-JWT with claim\n   * @return    {Object}                            Object containing username, proof, and the verifier\n   */\n  verifyTwitter: function () {\n    var _verifyTwitter = (0, _asyncToGenerator2[\"default\"])(\n    /*#__PURE__*/\n    _regenerator[\"default\"].mark(function _callee3(did, claim) {\n      var dids, verified, claimData;\n      return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dids = typeof did === 'string' ? [did] : did;\n\n              if (claim) {\n                _context3.next = 3;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", null);\n\n            case 3:\n              _context3.next = 5;\n              return didJWT.verifyJWT(claim);\n\n            case 5:\n              verified = _context3.sent;\n\n              if (dids.includes(verified.payload.sub)) {\n                _context3.next = 8;\n                break;\n              }\n\n              throw new Error('Verification not valid for given user');\n\n            case 8:\n              claimData = verified.payload.claim;\n\n              if (!(!claimData.twitter_handle || !claimData.twitter_proof)) {\n                _context3.next = 11;\n                break;\n              }\n\n              throw new Error('The claim for your twitter is not correct');\n\n            case 11:\n              return _context3.abrupt(\"return\", {\n                username: claimData.twitter_handle,\n                proof: claimData.twitter_proof,\n                verifiedBy: verified.payload.iss\n              });\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function verifyTwitter(_x4, _x5) {\n      return _verifyTwitter.apply(this, arguments);\n    }\n\n    return verifyTwitter;\n  }(),\n\n  /**\n   * Verifies that the code entered by the user is the same one that was sent via email.\n   * Throws an error otherwise.\n   *\n   * @param     {String}            did             The 3ID of the user (or array of equivalent dids)\n   * @param     {String}            claim           A did-JWT with claim\n   * @return    {Object}                            Object containing username, proof, and the verifier\n   */\n  verifyEmail: function () {\n    var _verifyEmail = (0, _asyncToGenerator2[\"default\"])(\n    /*#__PURE__*/\n    _regenerator[\"default\"].mark(function _callee4(did, claim) {\n      var dids, verified, claimData;\n      return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              dids = typeof did === 'string' ? [did] : did;\n\n              if (claim) {\n                _context4.next = 3;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", null);\n\n            case 3:\n              _context4.next = 5;\n              return didJWT.verifyJWT(claim);\n\n            case 5:\n              verified = _context4.sent;\n\n              if (dids.includes(verified.payload.sub)) {\n                _context4.next = 8;\n                break;\n              }\n\n              throw new Error('Verification not valid for given user');\n\n            case 8:\n              claimData = verified.payload.claim;\n\n              if (claimData.email_address) {\n                _context4.next = 11;\n                break;\n              }\n\n              throw new Error('The claim for your email address is not correct');\n\n            case 11:\n              return _context4.abrupt(\"return\", {\n                email_address: claimData.email_address,\n                verifiedBy: verified.payload.iss\n              });\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function verifyEmail(_x6, _x7) {\n      return _verifyEmail.apply(this, arguments);\n    }\n\n    return verifyEmail;\n  }(),\n\n  /**\n   * Verifies that the proof for a did is correct\n   *\n   * @param     {String}            claim           A did-JWT with claim\n   * @return    {String}                            The DID of the user\n   */\n  verifyDID: function () {\n    var _verifyDID = (0, _asyncToGenerator2[\"default\"])(\n    /*#__PURE__*/\n    _regenerator[\"default\"].mark(function _callee5(claim) {\n      var verified, muport, res, muportDID;\n      return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return didJWT.verifyJWT(claim);\n\n            case 2:\n              verified = _context5.sent;\n              muport = verified.payload.muport;\n              res = {};\n\n              if (!muport) {\n                _context5.next = 10;\n                break;\n              }\n\n              _context5.next = 8;\n              return didJWT.verifyJWT(muport);\n\n            case 8:\n              muportDID = _context5.sent.payload.iss;\n              res.muport = muportDID;\n\n            case 10:\n              res.did = verified.payload.iss;\n              return _context5.abrupt(\"return\", res);\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function verifyDID(_x8) {\n      return _verifyDID.apply(this, arguments);\n    }\n\n    return verifyDID;\n  }(),\n\n  /**\n   * Verifies that the proof for an ethereum address is correct\n   *\n   * @param     {Object}    ethProof                      The claim generated by getLinkConsent\n   * @param     {string}    ethProof.consent_msg\n   * @param     {string}    ethProof.consent_signature\n   * @param     {string}    ethProof.linked_did\n   * @param     {String}    did                           The box' did\n   * @return    {String}                                  The ethereum address used to sign the message\n   */\n  verifyEthereum: function () {\n    var _verifyEthereum = (0, _asyncToGenerator2[\"default\"])(\n    /*#__PURE__*/\n    _regenerator[\"default\"].mark(function _callee6(ethProof, did) {\n      var dids, consentMsg, consentSig, expected;\n      return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              dids = typeof did === 'string' ? [did] : did; // TODO - is this function needed? Can it be removed in\n              // favour of proofs that are in the rootstore?\n\n              consentMsg = ethProof.version ? ethProof.message : ethProof['consent_msg'];\n              consentSig = ethProof.version ? ethProof.signature : ethProof['consent_signature']; // Make sure the message matches our expectation\n\n              expected = getMessageConsent(did);\n\n              if (!(consentMsg !== expected)) {\n                _context6.next = 6;\n                break;\n              }\n\n              throw new Error(\"Invalid consent message, got: \\\"\".concat(consentMsg, \"\\\", expected: \\\"\").concat(expected, \"\\\"\"));\n\n            case 6:\n              return _context6.abrupt(\"return\", verifyMessage(consentMsg, consentSig));\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function verifyEthereum(_x9, _x10) {\n      return _verifyEthereum.apply(this, arguments);\n    }\n\n    return verifyEthereum;\n  }()\n};"]},"metadata":{},"sourceType":"script"}