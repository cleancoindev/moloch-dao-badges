{"ast":null,"code":"'use strict';\n\nconst Connection = require('interface-connection').Connection;\n\nconst pull = require('pull-stream/pull');\n/**\n * Creates a pull stream to run the given Connection stream through\n * the given Observer. This provides a way to more easily monitor connections\n * and their metadata. A new Connection will be returned that contains\n * has the attached Observer.\n *\n * @param {Transport} transport\n * @param {string} protocol\n * @param {Connection} connection\n * @param {Observer} observer\n * @returns {Connection}\n */\n\n\nmodule.exports = (transport, protocol, connection, observer) => {\n  const peerInfo = new Promise((resolve, reject) => {\n    connection.getPeerInfo((err, peerInfo) => {\n      if (!err && peerInfo) {\n        resolve(peerInfo);\n        return;\n      }\n\n      const setPeerInfo = connection.setPeerInfo;\n\n      connection.setPeerInfo = pi => {\n        setPeerInfo.call(connection, pi);\n        resolve(pi);\n      };\n    });\n  });\n  const stream = {\n    source: pull(connection, observer.incoming(transport, protocol, peerInfo)),\n    sink: pull(observer.outgoing(transport, protocol, peerInfo), connection)\n  };\n  return new Connection(stream, connection);\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/libp2p/src/switch/observe-connection.js"],"names":["Connection","require","pull","module","exports","transport","protocol","connection","observer","peerInfo","Promise","resolve","reject","getPeerInfo","err","setPeerInfo","pi","call","stream","source","incoming","sink","outgoing"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,sBAAD,CAAP,CAAgCD,UAAnD;;AACA,MAAME,IAAI,GAAGD,OAAO,CAAC,kBAAD,CAApB;AAEA;;;;;;;;;;;;;;AAYAE,MAAM,CAACC,OAAP,GAAiB,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,UAAtB,EAAkCC,QAAlC,KAA+C;AAC9D,QAAMC,QAAQ,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAChDL,IAAAA,UAAU,CAACM,WAAX,CAAuB,CAACC,GAAD,EAAML,QAAN,KAAmB;AACxC,UAAI,CAACK,GAAD,IAAQL,QAAZ,EAAsB;AACpBE,QAAAA,OAAO,CAACF,QAAD,CAAP;AACA;AACD;;AAED,YAAMM,WAAW,GAAGR,UAAU,CAACQ,WAA/B;;AACAR,MAAAA,UAAU,CAACQ,WAAX,GAA0BC,EAAD,IAAQ;AAC/BD,QAAAA,WAAW,CAACE,IAAZ,CAAiBV,UAAjB,EAA6BS,EAA7B;AACAL,QAAAA,OAAO,CAACK,EAAD,CAAP;AACD,OAHD;AAID,KAXD;AAYD,GAbgB,CAAjB;AAeA,QAAME,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAEjB,IAAI,CACVK,UADU,EAEVC,QAAQ,CAACY,QAAT,CAAkBf,SAAlB,EAA6BC,QAA7B,EAAuCG,QAAvC,CAFU,CADC;AAIbY,IAAAA,IAAI,EAAEnB,IAAI,CACRM,QAAQ,CAACc,QAAT,CAAkBjB,SAAlB,EAA6BC,QAA7B,EAAuCG,QAAvC,CADQ,EAERF,UAFQ;AAJG,GAAf;AASA,SAAO,IAAIP,UAAJ,CAAekB,MAAf,EAAuBX,UAAvB,CAAP;AACD,CA1BD","sourcesContent":["'use strict'\n\nconst Connection = require('interface-connection').Connection\nconst pull = require('pull-stream/pull')\n\n/**\n * Creates a pull stream to run the given Connection stream through\n * the given Observer. This provides a way to more easily monitor connections\n * and their metadata. A new Connection will be returned that contains\n * has the attached Observer.\n *\n * @param {Transport} transport\n * @param {string} protocol\n * @param {Connection} connection\n * @param {Observer} observer\n * @returns {Connection}\n */\nmodule.exports = (transport, protocol, connection, observer) => {\n  const peerInfo = new Promise((resolve, reject) => {\n    connection.getPeerInfo((err, peerInfo) => {\n      if (!err && peerInfo) {\n        resolve(peerInfo)\n        return\n      }\n\n      const setPeerInfo = connection.setPeerInfo\n      connection.setPeerInfo = (pi) => {\n        setPeerInfo.call(connection, pi)\n        resolve(pi)\n      }\n    })\n  })\n\n  const stream = {\n    source: pull(\n      connection,\n      observer.incoming(transport, protocol, peerInfo)),\n    sink: pull(\n      observer.outgoing(transport, protocol, peerInfo),\n      connection)\n  }\n\n  return new Connection(stream, connection)\n}\n"]},"metadata":{},"sourceType":"script"}