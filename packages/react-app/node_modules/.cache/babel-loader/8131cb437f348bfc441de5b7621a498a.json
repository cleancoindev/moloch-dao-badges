{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst waterfall = require('async/waterfall');\n\nconst support = require('../support');\n\nconst crypto = require('./crypto');\n\nconst log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error'); // step 1. Propose\n// -- propose cipher suite + send pubkeys + nonce\n\nmodule.exports = function propose(state, callback) {\n  log('1. propose - start');\n  log('1. propose - writing proposal');\n  support.write(state, crypto.createProposal(state));\n  waterfall([cb => support.read(state.shake, cb), (msg, cb) => {\n    log('1. propose - reading proposal', msg);\n    crypto.identify(state, msg, cb);\n  }, cb => crypto.selectProtocols(state, cb)], err => {\n    if (err) {\n      return callback(err);\n    }\n\n    log('1. propose - finish');\n    callback();\n  });\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/libp2p-secio/src/handshake/propose.js"],"names":["debug","require","waterfall","support","crypto","log","error","module","exports","propose","state","callback","write","createProposal","cb","read","shake","msg","identify","selectProtocols","err"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,iBAAD,CAAzB;;AAEA,MAAME,OAAO,GAAGF,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAMI,GAAG,GAAGL,KAAK,CAAC,cAAD,CAAjB;AACAK,GAAG,CAACC,KAAJ,GAAYN,KAAK,CAAC,oBAAD,CAAjB,C,CAEA;AACA;;AACAO,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmC;AAClDN,EAAAA,GAAG,CAAC,oBAAD,CAAH;AAEAA,EAAAA,GAAG,CAAC,+BAAD,CAAH;AACAF,EAAAA,OAAO,CAACS,KAAR,CAAcF,KAAd,EAAqBN,MAAM,CAACS,cAAP,CAAsBH,KAAtB,CAArB;AAEAR,EAAAA,SAAS,CAAC,CACPY,EAAD,IAAQX,OAAO,CAACY,IAAR,CAAaL,KAAK,CAACM,KAAnB,EAA0BF,EAA1B,CADA,EAER,CAACG,GAAD,EAAMH,EAAN,KAAa;AACXT,IAAAA,GAAG,CAAC,+BAAD,EAAkCY,GAAlC,CAAH;AACAb,IAAAA,MAAM,CAACc,QAAP,CAAgBR,KAAhB,EAAuBO,GAAvB,EAA4BH,EAA5B;AACD,GALO,EAMPA,EAAD,IAAQV,MAAM,CAACe,eAAP,CAAuBT,KAAvB,EAA8BI,EAA9B,CANA,CAAD,EAOLM,GAAD,IAAS;AACV,QAAIA,GAAJ,EAAS;AACP,aAAOT,QAAQ,CAACS,GAAD,CAAf;AACD;;AAEDf,IAAAA,GAAG,CAAC,qBAAD,CAAH;AACAM,IAAAA,QAAQ;AACT,GAdQ,CAAT;AAeD,CArBD","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst waterfall = require('async/waterfall')\n\nconst support = require('../support')\nconst crypto = require('./crypto')\n\nconst log = debug('libp2p:secio')\nlog.error = debug('libp2p:secio:error')\n\n// step 1. Propose\n// -- propose cipher suite + send pubkeys + nonce\nmodule.exports = function propose (state, callback) {\n  log('1. propose - start')\n\n  log('1. propose - writing proposal')\n  support.write(state, crypto.createProposal(state))\n\n  waterfall([\n    (cb) => support.read(state.shake, cb),\n    (msg, cb) => {\n      log('1. propose - reading proposal', msg)\n      crypto.identify(state, msg, cb)\n    },\n    (cb) => crypto.selectProtocols(state, cb)\n  ], (err) => {\n    if (err) {\n      return callback(err)\n    }\n\n    log('1. propose - finish')\n    callback()\n  })\n}\n"]},"metadata":{},"sourceType":"script"}