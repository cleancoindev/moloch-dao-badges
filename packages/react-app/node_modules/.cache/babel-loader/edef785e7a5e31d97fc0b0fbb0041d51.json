{"ast":null,"code":"'use strict';\n\nconst {\n  DAGLink,\n  DAGNode\n} = require('ipld-dag-pb');\n\nconst UnixFS = require('ipfs-unixfs');\n\nconst Dir = require('./dir');\n\nconst persist = require('./utils/persist');\n\nclass DirFlat extends Dir {\n  constructor(props, options) {\n    super(props, options);\n    this._children = {};\n  }\n\n  put(name, value) {\n    this.cid = undefined;\n    this.size = undefined;\n    this._children[name] = value;\n  }\n\n  get(name) {\n    return this._children[name];\n  }\n\n  childCount() {\n    return Object.keys(this._children).length;\n  }\n\n  directChildrenCount() {\n    return this.childCount();\n  }\n\n  onlyChild() {\n    return this._children[Object.keys(this._children)[0]];\n  }\n\n  *eachChildSeries() {\n    const keys = Object.keys(this._children);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      yield {\n        key: key,\n        child: this._children[key]\n      };\n    }\n  }\n\n  async *flush(path, ipld) {\n    const children = Object.keys(this._children);\n    const links = [];\n\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]];\n\n      if (typeof child.flush === 'function') {\n        for await (const entry of child.flush(child.path, ipld)) {\n          child = entry;\n          yield child;\n        }\n      }\n\n      links.push(new DAGLink(children[i], child.node.length || child.node.size, child.cid));\n    }\n\n    const unixfs = new UnixFS('directory');\n    const node = new DAGNode(unixfs.marshal(), links);\n    const cid = await persist(node, ipld, this.options);\n    this.cid = cid;\n    this.size = node.size;\n    yield {\n      cid,\n      unixfs,\n      path,\n      node\n    };\n  }\n\n}\n\nmodule.exports = DirFlat;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs-unixfs-importer/src/dir-flat.js"],"names":["DAGLink","DAGNode","require","UnixFS","Dir","persist","DirFlat","constructor","props","options","_children","put","name","value","cid","undefined","size","get","childCount","Object","keys","length","directChildrenCount","onlyChild","eachChildSeries","i","key","child","flush","path","ipld","children","links","entry","push","node","unixfs","marshal","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst {\n  DAGLink,\n  DAGNode\n} = require('ipld-dag-pb')\nconst UnixFS = require('ipfs-unixfs')\nconst Dir = require('./dir')\nconst persist = require('./utils/persist')\n\nclass DirFlat extends Dir {\n  constructor (props, options) {\n    super(props, options)\n    this._children = {}\n  }\n\n  put (name, value) {\n    this.cid = undefined\n    this.size = undefined\n    this._children[name] = value\n  }\n\n  get (name) {\n    return this._children[name]\n  }\n\n  childCount () {\n    return Object.keys(this._children).length\n  }\n\n  directChildrenCount () {\n    return this.childCount()\n  }\n\n  onlyChild () {\n    return this._children[Object.keys(this._children)[0]]\n  }\n\n  * eachChildSeries () {\n    const keys = Object.keys(this._children)\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n\n      yield {\n        key: key,\n        child: this._children[key]\n      }\n    }\n  }\n\n  async * flush (path, ipld) {\n    const children = Object.keys(this._children)\n    const links = []\n\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]]\n\n      if (typeof child.flush === 'function') {\n        for await (const entry of child.flush(child.path, ipld)) {\n          child = entry\n\n          yield child\n        }\n      }\n\n      links.push(new DAGLink(children[i], child.node.length || child.node.size, child.cid))\n    }\n\n    const unixfs = new UnixFS('directory')\n    const node = new DAGNode(unixfs.marshal(), links)\n    const cid = await persist(node, ipld, this.options)\n\n    this.cid = cid\n    this.size = node.size\n\n    yield {\n      cid,\n      unixfs,\n      path,\n      node\n    }\n  }\n}\n\nmodule.exports = DirFlat\n"]},"metadata":{},"sourceType":"script"}