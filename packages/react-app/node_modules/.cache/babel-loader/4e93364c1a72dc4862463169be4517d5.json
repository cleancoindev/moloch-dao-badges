{"ast":null,"code":"'use strict';\n\nvar schema = require('protocol-buffers-schema');\n\nvar compile = require('./compile');\n\nvar flatten = function (values) {\n  if (!values) return null;\n  var result = {};\n  Object.keys(values).forEach(function (k) {\n    result[k] = values[k].value;\n  });\n  return result;\n};\n\nmodule.exports = function (proto, opts) {\n  if (!opts) opts = {};\n  if (!proto) throw new Error('Pass in a .proto string or a protobuf-schema parsed object');\n  var sch = typeof proto === 'object' && !Buffer.isBuffer(proto) ? proto : schema.parse(proto); // to not make toString,toJSON enumarable we make a fire-and-forget prototype\n\n  var Messages = function () {\n    var self = this;\n    compile(sch, opts.encodings || {}).forEach(function (m) {\n      self[m.name] = flatten(m.values) || m;\n    });\n  };\n\n  Messages.prototype.toString = function () {\n    return schema.stringify(sch);\n  };\n\n  Messages.prototype.toJSON = function () {\n    return sch;\n  };\n\n  return new Messages();\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipld-dag-pb/node_modules/protons/src/index.js"],"names":["schema","require","compile","flatten","values","result","Object","keys","forEach","k","value","module","exports","proto","opts","Error","sch","Buffer","isBuffer","parse","Messages","self","encodings","m","name","prototype","toString","stringify","toJSON"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,yBAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAIE,OAAO,GAAG,UAAUC,MAAV,EAAkB;AAC9B,MAAI,CAACA,MAAL,EAAa,OAAO,IAAP;AACb,MAAIC,MAAM,GAAG,EAAb;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA4B,UAAUC,CAAV,EAAa;AACvCJ,IAAAA,MAAM,CAACI,CAAD,CAAN,GAAYL,MAAM,CAACK,CAAD,CAAN,CAAUC,KAAtB;AACD,GAFD;AAGA,SAAOL,MAAP;AACD,CAPD;;AASAM,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AACtC,MAAI,CAACA,IAAL,EAAWA,IAAI,GAAG,EAAP;AACX,MAAI,CAACD,KAAL,EAAY,MAAM,IAAIE,KAAJ,CAAU,4DAAV,CAAN;AAEZ,MAAIC,GAAG,GAAI,OAAOH,KAAP,KAAiB,QAAjB,IAA6B,CAACI,MAAM,CAACC,QAAP,CAAgBL,KAAhB,CAA/B,GAAyDA,KAAzD,GAAiEb,MAAM,CAACmB,KAAP,CAAaN,KAAb,CAA3E,CAJsC,CAMtC;;AACA,MAAIO,QAAQ,GAAG,YAAY;AACzB,QAAIC,IAAI,GAAG,IAAX;AAEAnB,IAAAA,OAAO,CAACc,GAAD,EAAMF,IAAI,CAACQ,SAAL,IAAkB,EAAxB,CAAP,CAAmCd,OAAnC,CAA2C,UAAUe,CAAV,EAAa;AACtDF,MAAAA,IAAI,CAACE,CAAC,CAACC,IAAH,CAAJ,GAAerB,OAAO,CAACoB,CAAC,CAACnB,MAAH,CAAP,IAAqBmB,CAApC;AACD,KAFD;AAGD,GAND;;AAQAH,EAAAA,QAAQ,CAACK,SAAT,CAAmBC,QAAnB,GAA8B,YAAY;AACxC,WAAO1B,MAAM,CAAC2B,SAAP,CAAiBX,GAAjB,CAAP;AACD,GAFD;;AAIAI,EAAAA,QAAQ,CAACK,SAAT,CAAmBG,MAAnB,GAA4B,YAAY;AACtC,WAAOZ,GAAP;AACD,GAFD;;AAIA,SAAO,IAAII,QAAJ,EAAP;AACD,CAxBD","sourcesContent":["'use strict'\n\nvar schema = require('protocol-buffers-schema')\nvar compile = require('./compile')\n\nvar flatten = function (values) {\n  if (!values) return null\n  var result = {}\n  Object.keys(values).forEach(function (k) {\n    result[k] = values[k].value\n  })\n  return result\n}\n\nmodule.exports = function (proto, opts) {\n  if (!opts) opts = {}\n  if (!proto) throw new Error('Pass in a .proto string or a protobuf-schema parsed object')\n\n  var sch = (typeof proto === 'object' && !Buffer.isBuffer(proto)) ? proto : schema.parse(proto)\n\n  // to not make toString,toJSON enumarable we make a fire-and-forget prototype\n  var Messages = function () {\n    var self = this\n\n    compile(sch, opts.encodings || {}).forEach(function (m) {\n      self[m.name] = flatten(m.values) || m\n    })\n  }\n\n  Messages.prototype.toString = function () {\n    return schema.stringify(sch)\n  }\n\n  Messages.prototype.toJSON = function () {\n    return sch\n  }\n\n  return new Messages()\n}\n"]},"metadata":{},"sourceType":"script"}