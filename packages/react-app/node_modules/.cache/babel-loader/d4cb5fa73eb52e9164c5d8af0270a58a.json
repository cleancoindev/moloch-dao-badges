{"ast":null,"code":"/**\n  ### `source(socket)`\n\n  Create a pull-stream `Source` that will read data from the `socket`.\n\n  <<< examples/read.js\n\n**/\nvar Buffer = require('safe-buffer').Buffer; // copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\n\n\nfunction isArrayBuffer(obj) {\n  return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' && typeof obj.byteLength === 'number';\n}\n\nmodule.exports = function (socket, cb) {\n  var buffer = [];\n  var receiver;\n  var ended;\n  var started = false;\n  socket.addEventListener('message', function (evt) {\n    var data = evt.data;\n\n    if (isArrayBuffer(data)) {\n      data = Buffer.from(data);\n    }\n\n    if (receiver) {\n      return receiver(null, data);\n    }\n\n    buffer.push(data);\n  });\n  socket.addEventListener('close', function (evt) {\n    if (ended) return;\n\n    if (receiver) {\n      receiver(ended = true);\n    }\n  });\n  socket.addEventListener('error', function (evt) {\n    if (ended) return;\n    ended = evt;\n\n    if (!started) {\n      started = true;\n      cb && cb(evt);\n    }\n\n    if (receiver) {\n      receiver(ended);\n    }\n  });\n  socket.addEventListener('open', function (evt) {\n    if (started || ended) return;\n    started = true;\n  });\n\n  function read(abort, cb) {\n    receiver = null; //if stream has already ended.\n\n    if (ended) return cb(ended); // if ended, abort\n    else if (abort) {\n        //this will callback when socket closes\n        receiver = cb;\n        socket.close();\n      } // return data, if any\n      else if (buffer.length > 0) cb(null, buffer.shift()); // wait for more data (or end)\n        else receiver = cb;\n  }\n\n  ;\n  return read;\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/pull-ws/source.js"],"names":["Buffer","require","isArrayBuffer","obj","ArrayBuffer","constructor","name","byteLength","module","exports","socket","cb","buffer","receiver","ended","started","addEventListener","evt","data","from","push","read","abort","close","length","shift"],"mappings":"AAAA;;;;;;;;AAQA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,MAApC,C,CAEA;AACA;;;AACA,SAASE,aAAT,CAAwBC,GAAxB,EAA6B;AAC3B,SAAOA,GAAG,YAAYC,WAAf,IACJD,GAAG,IAAI,IAAP,IAAeA,GAAG,CAACE,WAAJ,IAAmB,IAAlC,IAA0CF,GAAG,CAACE,WAAJ,CAAgBC,IAAhB,KAAyB,aAAnE,IACC,OAAOH,GAAG,CAACI,UAAX,KAA0B,QAF9B;AAGD;;AAEDC,MAAM,CAACC,OAAP,GAAiB,UAASC,MAAT,EAAiBC,EAAjB,EAAqB;AACpC,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,QAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,OAAO,GAAG,KAAd;AACAL,EAAAA,MAAM,CAACM,gBAAP,CAAwB,SAAxB,EAAmC,UAASC,GAAT,EAAc;AAC/C,QAAIC,IAAI,GAAGD,GAAG,CAACC,IAAf;;AACA,QAAIhB,aAAa,CAACgB,IAAD,CAAjB,EAAyB;AACvBA,MAAAA,IAAI,GAAGlB,MAAM,CAACmB,IAAP,CAAYD,IAAZ,CAAP;AACD;;AAED,QAAIL,QAAJ,EAAc;AACZ,aAAOA,QAAQ,CAAC,IAAD,EAAOK,IAAP,CAAf;AACD;;AAEDN,IAAAA,MAAM,CAACQ,IAAP,CAAYF,IAAZ;AACD,GAXD;AAaAR,EAAAA,MAAM,CAACM,gBAAP,CAAwB,OAAxB,EAAiC,UAASC,GAAT,EAAc;AAC7C,QAAIH,KAAJ,EAAW;;AACX,QAAID,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACC,KAAK,GAAG,IAAT,CAAR;AACD;AACF,GALD;AAOAJ,EAAAA,MAAM,CAACM,gBAAP,CAAwB,OAAxB,EAAiC,UAAUC,GAAV,EAAe;AAC9C,QAAIH,KAAJ,EAAW;AACXA,IAAAA,KAAK,GAAGG,GAAR;;AACA,QAAG,CAACF,OAAJ,EAAa;AACXA,MAAAA,OAAO,GAAG,IAAV;AACAJ,MAAAA,EAAE,IAAIA,EAAE,CAACM,GAAD,CAAR;AACD;;AACD,QAAIJ,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACC,KAAD,CAAR;AACD;AACF,GAVD;AAYAJ,EAAAA,MAAM,CAACM,gBAAP,CAAwB,MAAxB,EAAgC,UAAUC,GAAV,EAAe;AAC7C,QAAGF,OAAO,IAAID,KAAd,EAAqB;AACrBC,IAAAA,OAAO,GAAG,IAAV;AACD,GAHD;;AAKA,WAASM,IAAT,CAAcC,KAAd,EAAqBX,EAArB,EAAyB;AACvBE,IAAAA,QAAQ,GAAG,IAAX,CADuB,CAGvB;;AACA,QAAIC,KAAJ,EACE,OAAOH,EAAE,CAACG,KAAD,CAAT,CADF,CAGA;AAHA,SAIK,IAAIQ,KAAJ,EAAW;AACd;AACAT,QAAAA,QAAQ,GAAGF,EAAX;AACAD,QAAAA,MAAM,CAACa,KAAP;AACD,OAJI,CAML;AANK,WAOA,IAAGX,MAAM,CAACY,MAAP,GAAgB,CAAnB,EACHb,EAAE,CAAC,IAAD,EAAOC,MAAM,CAACa,KAAP,EAAP,CAAF,CADG,CAGL;AAHK,aAKHZ,QAAQ,GAAGF,EAAX;AAEH;;AAAA;AAED,SAAOU,IAAP;AACD,CAnED","sourcesContent":["/**\n  ### `source(socket)`\n\n  Create a pull-stream `Source` that will read data from the `socket`.\n\n  <<< examples/read.js\n\n**/\nvar Buffer = require('safe-buffer').Buffer;\n\n// copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\nfunction isArrayBuffer (obj) {\n  return obj instanceof ArrayBuffer ||\n    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n      typeof obj.byteLength === 'number')\n}\n\nmodule.exports = function(socket, cb) {\n  var buffer = [];\n  var receiver;\n  var ended;\n  var started = false;\n  socket.addEventListener('message', function(evt) {\n    var data = evt.data;\n    if (isArrayBuffer(data)) {\n      data = Buffer.from(data);\n    }\n\n    if (receiver) {\n      return receiver(null, data);\n    }\n\n    buffer.push(data);\n  });\n\n  socket.addEventListener('close', function(evt) {\n    if (ended) return\n    if (receiver) {\n      receiver(ended = true)\n    }\n  });\n\n  socket.addEventListener('error', function (evt) {\n    if (ended) return;\n    ended = evt;\n    if(!started) {\n      started = true\n      cb && cb(evt)\n    }\n    if (receiver) {\n      receiver(ended)\n    }\n  });\n\n  socket.addEventListener('open', function (evt) {\n    if(started || ended) return\n    started = true\n  })\n\n  function read(abort, cb) {\n    receiver = null;\n\n    //if stream has already ended.\n    if (ended)\n      return cb(ended);\n\n    // if ended, abort\n    else if (abort) {\n      //this will callback when socket closes\n      receiver = cb\n      socket.close()\n    }\n\n    // return data, if any\n    else if(buffer.length > 0)\n      cb(null, buffer.shift());\n\n    // wait for more data (or end)\n    else\n      receiver = cb;\n\n  };\n\n  return read;\n};\n"]},"metadata":{},"sourceType":"script"}