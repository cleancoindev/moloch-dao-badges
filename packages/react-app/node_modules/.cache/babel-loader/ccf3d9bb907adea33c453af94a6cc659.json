{"ast":null,"code":"'use strict';\n\nconst peerId = require('peer-id');\n\nconst mergeOptions = require('merge-options');\n\nconst callbackify = require('callbackify');\n\nconst promisify = require('promisify-es6');\n\nconst defaultConfig = require('../runtime/config-nodejs.js');\n\nconst Keychain = require('libp2p-keychain');\n\nconst {\n  DAGNode\n} = require('ipld-dag-pb');\n\nconst UnixFs = require('ipfs-unixfs');\n\nconst multicodec = require('multicodec');\n\nconst IPNS = require('../ipns');\n\nconst OfflineDatastore = require('../ipns/routing/offline-datastore');\n\nconst addDefaultAssets = require('./init-assets');\n\nconst {\n  profiles\n} = require('./config');\n\nfunction createPeerId(self, opts) {\n  if (opts.privateKey) {\n    self.log('using user-supplied private-key');\n\n    if (typeof opts.privateKey === 'object') {\n      return opts.privateKey;\n    } else {\n      return promisify(peerId.createFromPrivKey)(Buffer.from(opts.privateKey, 'base64'));\n    }\n  } else {\n    // Generate peer identity keypair + transform to desired format + add to config.\n    opts.log(`generating ${opts.bits}-bit RSA keypair...`, false);\n    self.log('generating peer id: %s bits', opts.bits);\n    return promisify(peerId.create)({\n      bits: opts.bits\n    });\n  }\n}\n\nasync function createRepo(self, opts) {\n  if (self.state.state() !== 'uninitialized') {\n    throw new Error('Not able to init from state: ' + self.state.state());\n  }\n\n  self.state.init();\n  self.log('init'); // An initialized, open repo was passed, use this one!\n\n  if (opts.repo) {\n    self._repo = opts.repo;\n    return;\n  }\n\n  opts.emptyRepo = opts.emptyRepo || false;\n  opts.bits = Number(opts.bits) || 2048;\n\n  opts.log = opts.log || function () {};\n\n  const config = mergeOptions(defaultConfig(), self._options.config);\n  applyProfile(self, config, opts); // Verify repo does not exist yet\n\n  const exists = await self._repo.exists();\n  self.log('repo exists?', exists);\n\n  if (exists === true) {\n    throw Error('repo already exists');\n  }\n\n  const peerId = await createPeerId(self, opts);\n  self.log('identity generated');\n  config.Identity = {\n    PeerID: peerId.toB58String(),\n    PrivKey: peerId.privKey.bytes.toString('base64')\n  };\n  const privateKey = peerId.privKey;\n\n  if (opts.pass) {\n    config.Keychain = Keychain.generateOptions();\n  }\n\n  opts.log('done');\n  opts.log('peer identity: ' + config.Identity.PeerID);\n  await self._repo.init(config);\n  await self._repo.open();\n  self.log('repo opened');\n\n  if (opts.pass) {\n    self.log('creating keychain');\n    const keychainOptions = Object.assign({\n      passPhrase: opts.pass\n    }, config.Keychain);\n    self._keychain = new Keychain(self._repo.keys, keychainOptions);\n    await self._keychain.importPeer('self', {\n      privKey: privateKey\n    });\n  } // Setup the offline routing for IPNS.\n  // This is primarily used for offline ipns modifications, such as the initializeKeyspace feature.\n\n\n  const offlineDatastore = new OfflineDatastore(self._repo);\n  self._ipns = new IPNS(offlineDatastore, self._repo.datastore, self._peerInfo, self._keychain, self._options); // add empty unixfs dir object (go-ipfs assumes this exists)\n\n  return addRepoAssets(self, privateKey, opts);\n}\n\nasync function addRepoAssets(self, privateKey, opts) {\n  if (opts.emptyRepo) {\n    return;\n  }\n\n  self.log('adding assets');\n  const node = new DAGNode(new UnixFs('directory').marshal());\n  const cid = await self.dag.put(node, {\n    version: 0,\n    format: multicodec.DAG_PB,\n    hashAlg: multicodec.SHA2_256,\n    preload: false\n  });\n  await self._ipns.initializeKeyspace(privateKey, cid.toBaseEncodedString());\n  self.log('Initialised keyspace');\n\n  if (typeof addDefaultAssets === 'function') {\n    self.log('Adding default assets'); // addDefaultAssets is undefined on browsers.\n    // See package.json browser config\n\n    return addDefaultAssets(self, opts.log);\n  }\n} // Apply profiles (eg \"server,lowpower\") to config\n\n\nfunction applyProfile(self, config, opts) {\n  if (opts.profiles) {\n    for (const name of opts.profiles) {\n      const profile = profiles[name];\n\n      if (!profile) {\n        throw new Error(`Could not find profile with name '${name}'`);\n      }\n\n      self.log(`applying profile ${name}`);\n      profile.transform(config);\n    }\n  }\n}\n\nmodule.exports = function init(self) {\n  return callbackify.variadic(async opts => {\n    opts = opts || {};\n    await createRepo(self, opts);\n    self.log('Created repo');\n    await self.preStart();\n    self.log('Done pre-start');\n    self.state.initialized();\n    self.emit('init');\n  });\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipfs/src/core/components/init.js"],"names":["peerId","require","mergeOptions","callbackify","promisify","defaultConfig","Keychain","DAGNode","UnixFs","multicodec","IPNS","OfflineDatastore","addDefaultAssets","profiles","createPeerId","self","opts","privateKey","log","createFromPrivKey","Buffer","from","bits","create","createRepo","state","Error","init","repo","_repo","emptyRepo","Number","config","_options","applyProfile","exists","Identity","PeerID","toB58String","PrivKey","privKey","bytes","toString","pass","generateOptions","open","keychainOptions","Object","assign","passPhrase","_keychain","keys","importPeer","offlineDatastore","_ipns","datastore","_peerInfo","addRepoAssets","node","marshal","cid","dag","put","version","format","DAG_PB","hashAlg","SHA2_256","preload","initializeKeyspace","toBaseEncodedString","name","profile","transform","module","exports","variadic","preStart","initialized","emit"],"mappings":"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","sourcesContent":["'use strict'\n\nconst peerId = require('peer-id')\nconst mergeOptions = require('merge-options')\nconst callbackify = require('callbackify')\nconst promisify = require('promisify-es6')\nconst defaultConfig = require('../runtime/config-nodejs.js')\nconst Keychain = require('libp2p-keychain')\nconst {\n  DAGNode\n} = require('ipld-dag-pb')\nconst UnixFs = require('ipfs-unixfs')\nconst multicodec = require('multicodec')\n\nconst IPNS = require('../ipns')\nconst OfflineDatastore = require('../ipns/routing/offline-datastore')\n\nconst addDefaultAssets = require('./init-assets')\nconst { profiles } = require('./config')\n\nfunction createPeerId (self, opts) {\n  if (opts.privateKey) {\n    self.log('using user-supplied private-key')\n    if (typeof opts.privateKey === 'object') {\n      return opts.privateKey\n    } else {\n      return promisify(peerId.createFromPrivKey)(Buffer.from(opts.privateKey, 'base64'))\n    }\n  } else {\n    // Generate peer identity keypair + transform to desired format + add to config.\n    opts.log(`generating ${opts.bits}-bit RSA keypair...`, false)\n    self.log('generating peer id: %s bits', opts.bits)\n\n    return promisify(peerId.create)({ bits: opts.bits })\n  }\n}\n\nasync function createRepo (self, opts) {\n  if (self.state.state() !== 'uninitialized') {\n    throw new Error('Not able to init from state: ' + self.state.state())\n  }\n\n  self.state.init()\n  self.log('init')\n\n  // An initialized, open repo was passed, use this one!\n  if (opts.repo) {\n    self._repo = opts.repo\n\n    return\n  }\n\n  opts.emptyRepo = opts.emptyRepo || false\n  opts.bits = Number(opts.bits) || 2048\n  opts.log = opts.log || function () {}\n\n  const config = mergeOptions(defaultConfig(), self._options.config)\n\n  applyProfile(self, config, opts)\n\n  // Verify repo does not exist yet\n  const exists = await self._repo.exists()\n  self.log('repo exists?', exists)\n  if (exists === true) {\n    throw Error('repo already exists')\n  }\n\n  const peerId = await createPeerId(self, opts)\n\n  self.log('identity generated')\n\n  config.Identity = {\n    PeerID: peerId.toB58String(),\n    PrivKey: peerId.privKey.bytes.toString('base64')\n  }\n  const privateKey = peerId.privKey\n\n  if (opts.pass) {\n    config.Keychain = Keychain.generateOptions()\n  }\n\n  opts.log('done')\n  opts.log('peer identity: ' + config.Identity.PeerID)\n\n  await self._repo.init(config)\n  await self._repo.open()\n\n  self.log('repo opened')\n\n  if (opts.pass) {\n    self.log('creating keychain')\n    const keychainOptions = Object.assign({ passPhrase: opts.pass }, config.Keychain)\n    self._keychain = new Keychain(self._repo.keys, keychainOptions)\n\n    await self._keychain.importPeer('self', { privKey: privateKey })\n  }\n\n  // Setup the offline routing for IPNS.\n  // This is primarily used for offline ipns modifications, such as the initializeKeyspace feature.\n  const offlineDatastore = new OfflineDatastore(self._repo)\n\n  self._ipns = new IPNS(offlineDatastore, self._repo.datastore, self._peerInfo, self._keychain, self._options)\n\n  // add empty unixfs dir object (go-ipfs assumes this exists)\n  return addRepoAssets(self, privateKey, opts)\n}\n\nasync function addRepoAssets (self, privateKey, opts) {\n  if (opts.emptyRepo) {\n    return\n  }\n\n  self.log('adding assets')\n\n  const node = new DAGNode(new UnixFs('directory').marshal())\n  const cid = await self.dag.put(node, {\n    version: 0,\n    format: multicodec.DAG_PB,\n    hashAlg: multicodec.SHA2_256,\n    preload: false\n  })\n\n  await self._ipns.initializeKeyspace(privateKey, cid.toBaseEncodedString())\n\n  self.log('Initialised keyspace')\n\n  if (typeof addDefaultAssets === 'function') {\n    self.log('Adding default assets')\n    // addDefaultAssets is undefined on browsers.\n    // See package.json browser config\n    return addDefaultAssets(self, opts.log)\n  }\n}\n\n// Apply profiles (eg \"server,lowpower\") to config\nfunction applyProfile (self, config, opts) {\n  if (opts.profiles) {\n    for (const name of opts.profiles) {\n      const profile = profiles[name]\n\n      if (!profile) {\n        throw new Error(`Could not find profile with name '${name}'`)\n      }\n\n      self.log(`applying profile ${name}`)\n      profile.transform(config)\n    }\n  }\n}\n\nmodule.exports = function init (self) {\n  return callbackify.variadic(async (opts) => {\n    opts = opts || {}\n\n    await createRepo(self, opts)\n    self.log('Created repo')\n\n    await self.preStart()\n    self.log('Done pre-start')\n\n    self.state.initialized()\n    self.emit('init')\n  })\n}\n"]},"metadata":{},"sourceType":"script"}