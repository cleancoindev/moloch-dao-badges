{"ast":null,"code":"'use strict';\n\nconst withIs = require('class-is');\n\nconst sortLinks = require('./sortLinks');\n\nconst DAGLink = require('../dag-link/dagLink');\n\nconst {\n  serializeDAGNode\n} = require('../serialize.js');\n\nconst toDAGLink = require('./toDagLink');\n\nconst addLink = require('./addLink');\n\nconst rmLink = require('./rmLink');\n\nclass DAGNode {\n  constructor(data, links = [], serializedSize = null) {\n    if (!data) {\n      data = Buffer.alloc(0);\n    }\n\n    if (typeof data === 'string') {\n      data = Buffer.from(data);\n    }\n\n    if (!Buffer.isBuffer(data)) {\n      throw new Error('Passed \\'data\\' is not a buffer or a string!');\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!');\n    }\n\n    links = links.map(link => {\n      return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);\n    });\n    links = sortLinks(links);\n    this._data = data;\n    this._links = links;\n    this._serializedSize = serializedSize;\n    this._size = null;\n  }\n\n  toJSON() {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this._links.map(l => l.toJSON()),\n        size: this.size\n      });\n    }\n\n    return Object.assign({}, this._json);\n  }\n\n  toString() {\n    return `DAGNode <data: \"${this.Data.toString('base64')}\", links: ${this.Links.length}, size: ${this.size}>`;\n  }\n\n  _invalidateCached() {\n    this._serializedSize = null;\n    this._size = null;\n  }\n\n  addLink(link) {\n    this._invalidateCached();\n\n    return addLink(this, link);\n  }\n\n  rmLink(link) {\n    this._invalidateCached();\n\n    return rmLink(this, link);\n  } // @returns {Promise.<DAGLink>}\n\n\n  toDAGLink(options) {\n    return toDAGLink(this, options);\n  }\n\n  serialize() {\n    return serializeDAGNode({\n      Data: this._data,\n      Links: this._links\n    });\n  }\n\n  get size() {\n    if (this._size === null) {\n      if (this._serializedSize === null) {\n        this._serializedSize = this.serialize().length;\n      }\n\n      this._size = this._links.reduce((sum, l) => sum + l.Tsize, this._serializedSize);\n    }\n\n    return this._size;\n  }\n\n  set size(size) {\n    throw new Error(\"Can't set property: 'size' is immutable\");\n  } // Getters for backwards compatible path resolving\n\n\n  get Data() {\n    return this._data;\n  }\n\n  set Data(_) {\n    throw new Error(\"Can't set property: 'Data' is immutable\");\n  }\n\n  get Links() {\n    return this._links.map(link => {\n      return {\n        Name: link.Name,\n        Tsize: link.Tsize,\n        Hash: link.Hash\n      };\n    });\n  }\n\n  set Links(_) {\n    throw new Error(\"Can't set property: 'Links' is immutable\");\n  }\n\n}\n\nexports = module.exports = withIs(DAGNode, {\n  className: 'DAGNode',\n  symbolName: '@ipld/js-ipld-dag-pb/dagnode'\n});","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipld-dag-pb/src/dag-node/dagNode.js"],"names":["withIs","require","sortLinks","DAGLink","serializeDAGNode","toDAGLink","addLink","rmLink","DAGNode","constructor","data","links","serializedSize","Buffer","alloc","from","isBuffer","Error","map","link","isDAGLink","util","createDagLinkFromB58EncodedHash","_data","_links","_serializedSize","_size","toJSON","_json","Object","freeze","Data","l","size","assign","toString","Links","length","_invalidateCached","options","serialize","reduce","sum","Tsize","_","Name","Hash","exports","module","className","symbolName"],"mappings":"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","sourcesContent":["'use strict'\n\nconst withIs = require('class-is')\nconst sortLinks = require('./sortLinks')\nconst DAGLink = require('../dag-link/dagLink')\nconst { serializeDAGNode } = require('../serialize.js')\nconst toDAGLink = require('./toDagLink')\nconst addLink = require('./addLink')\nconst rmLink = require('./rmLink')\n\nclass DAGNode {\n  constructor (data, links = [], serializedSize = null) {\n    if (!data) {\n      data = Buffer.alloc(0)\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data)\n    }\n    if (!Buffer.isBuffer(data)) {\n      throw new Error('Passed \\'data\\' is not a buffer or a string!')\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!')\n    }\n\n    links = links.map((link) => {\n      return DAGLink.isDAGLink(link)\n        ? link\n        : DAGLink.util.createDagLinkFromB58EncodedHash(link)\n    })\n    links = sortLinks(links)\n\n    this._data = data\n    this._links = links\n    this._serializedSize = serializedSize\n    this._size = null\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this._links.map((l) => l.toJSON()),\n        size: this.size\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  toString () {\n    return `DAGNode <data: \"${this.Data.toString('base64')}\", links: ${this.Links.length}, size: ${this.size}>`\n  }\n\n  _invalidateCached () {\n    this._serializedSize = null\n    this._size = null\n  }\n\n  addLink (link) {\n    this._invalidateCached()\n    return addLink(this, link)\n  }\n\n  rmLink (link) {\n    this._invalidateCached()\n    return rmLink(this, link)\n  }\n\n  // @returns {Promise.<DAGLink>}\n  toDAGLink (options) {\n    return toDAGLink(this, options)\n  }\n\n  serialize () {\n    return serializeDAGNode({\n      Data: this._data,\n      Links: this._links\n    })\n  }\n\n  get size () {\n    if (this._size === null) {\n      if (this._serializedSize === null) {\n        this._serializedSize = this.serialize().length\n      }\n      this._size = this._links.reduce((sum, l) => sum + l.Tsize, this._serializedSize)\n    }\n\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  // Getters for backwards compatible path resolving\n  get Data () {\n    return this._data\n  }\n\n  set Data (_) {\n    throw new Error(\"Can't set property: 'Data' is immutable\")\n  }\n\n  get Links () {\n    return this._links.map((link) => {\n      return {\n        Name: link.Name,\n        Tsize: link.Tsize,\n        Hash: link.Hash\n      }\n    })\n  }\n\n  set Links (_) {\n    throw new Error(\"Can't set property: 'Links' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGNode, { className: 'DAGNode', symbolName: '@ipld/js-ipld-dag-pb/dagnode' })\n"]},"metadata":{},"sourceType":"script"}