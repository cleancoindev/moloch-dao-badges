{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst Big = require('bignumber.js');\n\nconst MovingAverage = require('moving-average');\n\nconst retimer = require('retimer');\n/**\n * A queue based manager for stat processing\n *\n * @param {Array<string>} initialCounters\n * @param {any} options\n */\n\n\nclass Stats extends EventEmitter {\n  constructor(initialCounters, options) {\n    super();\n    this._options = options;\n    this._queue = [];\n    this._stats = {};\n    this._frequencyLastTime = Date.now();\n    this._frequencyAccumulators = {};\n    this._movingAverages = {};\n    this._update = this._update.bind(this);\n    const intervals = this._options.movingAverageIntervals;\n\n    for (var i = 0; i < initialCounters.length; i++) {\n      var key = initialCounters[i];\n      this._stats[key] = Big(0);\n      this._movingAverages[key] = {};\n\n      for (var k = 0; k < intervals.length; k++) {\n        var interval = intervals[k];\n        var ma = this._movingAverages[key][interval] = MovingAverage(interval);\n        ma.push(this._frequencyLastTime, 0);\n      }\n    }\n  }\n  /**\n   * Initializes the internal timer if there are items in the queue. This\n   * should only need to be called if `Stats.stop` was previously called, as\n   * `Stats.push` will also start the processing.\n   *\n   * @returns {void}\n   */\n\n\n  start() {\n    if (this._queue.length) {\n      this._resetComputeTimeout();\n    }\n  }\n  /**\n   * Stops processing and computing of stats by clearing the internal\n   * timer.\n   *\n   * @returns {void}\n   */\n\n\n  stop() {\n    if (this._timeout) {\n      this._timeout.clear();\n\n      this._timeout = null;\n    }\n  }\n  /**\n   * Returns a clone of the current stats.\n   *\n   * @returns {Map<string, Stat>}\n   */\n\n\n  get snapshot() {\n    return Object.assign({}, this._stats);\n  }\n  /**\n   * Returns a clone of the internal movingAverages\n   *\n   * @returns {Array<MovingAverage>}\n   */\n\n\n  get movingAverages() {\n    return Object.assign({}, this._movingAverages);\n  }\n  /**\n   * Pushes the given operation data to the queue, along with the\n   * current Timestamp, then resets the update timer.\n   *\n   * @param {string} counter\n   * @param {number} inc\n   * @returns {void}\n   */\n\n\n  push(counter, inc) {\n    this._queue.push([counter, inc, Date.now()]);\n\n    this._resetComputeTimeout();\n  }\n  /**\n   * Resets the timeout for triggering updates.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  _resetComputeTimeout() {\n    if (this._timeout) {\n      this._timeout.reschedule(this._nextTimeout());\n    } else {\n      this._timeout = retimer(this._update, this._nextTimeout());\n    }\n  }\n  /**\n   * Calculates and returns the timeout for the next update based on\n   * the urgency of the update.\n   *\n   * @private\n   * @returns {number}\n   */\n\n\n  _nextTimeout() {\n    // calculate the need for an update, depending on the queue length\n    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;\n    const timeout = Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);\n    return timeout;\n  }\n  /**\n   * If there are items in the queue, they will will be processed and\n   * the frequency for all items will be updated based on the Timestamp\n   * of the last item in the queue. The `update` event will also be emitted\n   * with the latest stats.\n   *\n   * If there are no items in the queue, no action is taken.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  _update() {\n    this._timeout = null;\n\n    if (this._queue.length) {\n      let last;\n\n      while (this._queue.length) {\n        const op = last = this._queue.shift();\n\n        this._applyOp(op);\n      }\n\n      this._updateFrequency(last[2]); // contains timestamp of last op\n\n\n      this.emit('update', this._stats);\n    }\n  }\n  /**\n   * For each key in the stats, the frequncy and moving averages\n   * will be updated via Stats._updateFrequencyFor based on the time\n   * difference between calls to this method.\n   *\n   * @private\n   * @param {Timestamp} latestTime\n   * @returns {void}\n   */\n\n\n  _updateFrequency(latestTime) {\n    const timeDiff = latestTime - this._frequencyLastTime;\n    Object.keys(this._stats).forEach(key => {\n      this._updateFrequencyFor(key, timeDiff, latestTime);\n    });\n    this._frequencyLastTime = latestTime;\n  }\n  /**\n   * Updates the `movingAverages` for the given `key` and also\n   * resets the `frequencyAccumulator` for the `key`.\n   *\n   * @private\n   * @param {string} key\n   * @param {number} timeDiffMS Time in milliseconds\n   * @param {Timestamp} latestTime Time in ticks\n   * @returns {void}\n   */\n\n\n  _updateFrequencyFor(key, timeDiffMS, latestTime) {\n    const count = this._frequencyAccumulators[key] || 0;\n    this._frequencyAccumulators[key] = 0; // if `timeDiff` is zero, `hz` becomes Infinity, so we fallback to 1ms\n\n    const safeTimeDiff = timeDiffMS || 1;\n    const hz = count / safeTimeDiff * 1000;\n    let movingAverages = this._movingAverages[key];\n\n    if (!movingAverages) {\n      movingAverages = this._movingAverages[key] = {};\n    }\n\n    const intervals = this._options.movingAverageIntervals;\n\n    for (var i = 0; i < intervals.length; i++) {\n      var movingAverageInterval = intervals[i];\n      var movingAverage = movingAverages[movingAverageInterval];\n\n      if (!movingAverage) {\n        movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval);\n      }\n\n      movingAverage.push(latestTime, hz);\n    }\n  }\n  /**\n   * For the given operation, `op`, the stats and `frequencyAccumulator`\n   * will be updated or initialized if they don't already exist.\n   *\n   * @private\n   * @param {Array<string, number>} op\n   * @throws {InvalidNumber}\n   * @returns {void}\n   */\n\n\n  _applyOp(op) {\n    const key = op[0];\n    const inc = op[1];\n\n    if (typeof inc !== 'number') {\n      throw new Error('invalid increment number:', inc);\n    }\n\n    let n;\n\n    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n      n = this._stats[key] = Big(0);\n    } else {\n      n = this._stats[key];\n    }\n\n    this._stats[key] = n.plus(inc);\n\n    if (!this._frequencyAccumulators[key]) {\n      this._frequencyAccumulators[key] = 0;\n    }\n\n    this._frequencyAccumulators[key] += inc;\n  }\n\n}\n\nmodule.exports = Stats;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/libp2p/src/switch/stats/stat.js"],"names":["EventEmitter","require","Big","MovingAverage","retimer","Stats","constructor","initialCounters","options","_options","_queue","_stats","_frequencyLastTime","Date","now","_frequencyAccumulators","_movingAverages","_update","bind","intervals","movingAverageIntervals","i","length","key","k","interval","ma","push","start","_resetComputeTimeout","stop","_timeout","clear","snapshot","Object","assign","movingAverages","counter","inc","reschedule","_nextTimeout","urgency","computeThrottleMaxQueueSize","timeout","Math","max","computeThrottleTimeout","last","op","shift","_applyOp","_updateFrequency","emit","latestTime","timeDiff","keys","forEach","_updateFrequencyFor","timeDiffMS","count","safeTimeDiff","hz","movingAverageInterval","movingAverage","Error","n","prototype","hasOwnProperty","call","plus","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events')\nconst Big = require('bignumber.js')\nconst MovingAverage = require('moving-average')\nconst retimer = require('retimer')\n\n/**\n * A queue based manager for stat processing\n *\n * @param {Array<string>} initialCounters\n * @param {any} options\n */\nclass Stats extends EventEmitter {\n  constructor (initialCounters, options) {\n    super()\n\n    this._options = options\n    this._queue = []\n    this._stats = {}\n\n    this._frequencyLastTime = Date.now()\n    this._frequencyAccumulators = {}\n    this._movingAverages = {}\n\n    this._update = this._update.bind(this)\n\n    const intervals = this._options.movingAverageIntervals\n\n    for (var i = 0; i < initialCounters.length; i++) {\n      var key = initialCounters[i]\n      this._stats[key] = Big(0)\n      this._movingAverages[key] = {}\n      for (var k = 0; k < intervals.length; k++) {\n        var interval = intervals[k]\n        var ma = this._movingAverages[key][interval] = MovingAverage(interval)\n        ma.push(this._frequencyLastTime, 0)\n      }\n    }\n  }\n\n  /**\n   * Initializes the internal timer if there are items in the queue. This\n   * should only need to be called if `Stats.stop` was previously called, as\n   * `Stats.push` will also start the processing.\n   *\n   * @returns {void}\n   */\n  start () {\n    if (this._queue.length) {\n      this._resetComputeTimeout()\n    }\n  }\n\n  /**\n   * Stops processing and computing of stats by clearing the internal\n   * timer.\n   *\n   * @returns {void}\n   */\n  stop () {\n    if (this._timeout) {\n      this._timeout.clear()\n      this._timeout = null\n    }\n  }\n\n  /**\n   * Returns a clone of the current stats.\n   *\n   * @returns {Map<string, Stat>}\n   */\n  get snapshot () {\n    return Object.assign({}, this._stats)\n  }\n\n  /**\n   * Returns a clone of the internal movingAverages\n   *\n   * @returns {Array<MovingAverage>}\n   */\n  get movingAverages () {\n    return Object.assign({}, this._movingAverages)\n  }\n\n  /**\n   * Pushes the given operation data to the queue, along with the\n   * current Timestamp, then resets the update timer.\n   *\n   * @param {string} counter\n   * @param {number} inc\n   * @returns {void}\n   */\n  push (counter, inc) {\n    this._queue.push([counter, inc, Date.now()])\n    this._resetComputeTimeout()\n  }\n\n  /**\n   * Resets the timeout for triggering updates.\n   *\n   * @private\n   * @returns {void}\n   */\n  _resetComputeTimeout () {\n    if (this._timeout) {\n      this._timeout.reschedule(this._nextTimeout())\n    } else {\n      this._timeout = retimer(this._update, this._nextTimeout())\n    }\n  }\n\n  /**\n   * Calculates and returns the timeout for the next update based on\n   * the urgency of the update.\n   *\n   * @private\n   * @returns {number}\n   */\n  _nextTimeout () {\n    // calculate the need for an update, depending on the queue length\n    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize\n    const timeout = Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0)\n    return timeout\n  }\n\n  /**\n   * If there are items in the queue, they will will be processed and\n   * the frequency for all items will be updated based on the Timestamp\n   * of the last item in the queue. The `update` event will also be emitted\n   * with the latest stats.\n   *\n   * If there are no items in the queue, no action is taken.\n   *\n   * @private\n   * @returns {void}\n   */\n  _update () {\n    this._timeout = null\n    if (this._queue.length) {\n      let last\n      while (this._queue.length) {\n        const op = last = this._queue.shift()\n        this._applyOp(op)\n      }\n\n      this._updateFrequency(last[2]) // contains timestamp of last op\n\n      this.emit('update', this._stats)\n    }\n  }\n\n  /**\n   * For each key in the stats, the frequncy and moving averages\n   * will be updated via Stats._updateFrequencyFor based on the time\n   * difference between calls to this method.\n   *\n   * @private\n   * @param {Timestamp} latestTime\n   * @returns {void}\n   */\n  _updateFrequency (latestTime) {\n    const timeDiff = latestTime - this._frequencyLastTime\n\n    Object.keys(this._stats).forEach((key) => {\n      this._updateFrequencyFor(key, timeDiff, latestTime)\n    })\n\n    this._frequencyLastTime = latestTime\n  }\n\n  /**\n   * Updates the `movingAverages` for the given `key` and also\n   * resets the `frequencyAccumulator` for the `key`.\n   *\n   * @private\n   * @param {string} key\n   * @param {number} timeDiffMS Time in milliseconds\n   * @param {Timestamp} latestTime Time in ticks\n   * @returns {void}\n   */\n  _updateFrequencyFor (key, timeDiffMS, latestTime) {\n    const count = this._frequencyAccumulators[key] || 0\n    this._frequencyAccumulators[key] = 0\n    // if `timeDiff` is zero, `hz` becomes Infinity, so we fallback to 1ms\n    const safeTimeDiff = timeDiffMS || 1\n    const hz = (count / safeTimeDiff) * 1000\n\n    let movingAverages = this._movingAverages[key]\n    if (!movingAverages) {\n      movingAverages = this._movingAverages[key] = {}\n    }\n\n    const intervals = this._options.movingAverageIntervals\n\n    for (var i = 0; i < intervals.length; i++) {\n      var movingAverageInterval = intervals[i]\n      var movingAverage = movingAverages[movingAverageInterval]\n      if (!movingAverage) {\n        movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval)\n      }\n      movingAverage.push(latestTime, hz)\n    }\n  }\n\n  /**\n   * For the given operation, `op`, the stats and `frequencyAccumulator`\n   * will be updated or initialized if they don't already exist.\n   *\n   * @private\n   * @param {Array<string, number>} op\n   * @throws {InvalidNumber}\n   * @returns {void}\n   */\n  _applyOp (op) {\n    const key = op[0]\n    const inc = op[1]\n\n    if (typeof inc !== 'number') {\n      throw new Error('invalid increment number:', inc)\n    }\n\n    let n\n\n    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n      n = this._stats[key] = Big(0)\n    } else {\n      n = this._stats[key]\n    }\n    this._stats[key] = n.plus(inc)\n\n    if (!this._frequencyAccumulators[key]) {\n      this._frequencyAccumulators[key] = 0\n    }\n    this._frequencyAccumulators[key] += inc\n  }\n}\n\nmodule.exports = Stats\n"]},"metadata":{},"sourceType":"script"}