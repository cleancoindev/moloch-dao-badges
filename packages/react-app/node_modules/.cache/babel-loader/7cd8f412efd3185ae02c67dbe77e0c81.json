{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _elliptic = require(\"elliptic\");\n\nvar _Digest = require(\"./Digest\");\n\nvar secp256k1 = new _elliptic.ec('secp256k1');\n\nfunction leftpad(data) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n  if (data.length === size) return data;\n  return '0'.repeat(size - data.length) + data;\n}\n/**\n*  The SimpleSigner returns a configured function for signing data. It also defines\n*  an interface that you can also implement yourself and use in our other modules.\n*\n*  @example\n*  const signer = SimpleSigner(process.env.PRIVATE_KEY)\n*  signer(data, (err, signature) => {\n*    ...\n*  })\n*\n*  @param    {String}         hexPrivateKey    a hex encoded private key\n*  @return   {Function}                     a configured signer function\n*/\n\n\nfunction SimpleSigner(hexPrivateKey) {\n  var privateKey = secp256k1.keyFromPrivate(hexPrivateKey);\n  return /*#__PURE__*/function () {\n    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(data) {\n      var _privateKey$sign, r, s, recoveryParam;\n\n      return _regenerator.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _privateKey$sign = privateKey.sign((0, _Digest.sha256)(data)), r = _privateKey$sign.r, s = _privateKey$sign.s, recoveryParam = _privateKey$sign.recoveryParam;\n              return _context.abrupt(\"return\", {\n                r: leftpad(r.toString('hex')),\n                s: leftpad(s.toString('hex')),\n                recoveryParam: recoveryParam\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n\nmodule.exports = SimpleSigner;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/did-jwt/lib/SimpleSigner.js"],"names":["_interopRequireDefault","require","_regenerator","_asyncToGenerator2","_elliptic","_Digest","secp256k1","ec","leftpad","data","size","arguments","length","undefined","repeat","SimpleSigner","hexPrivateKey","privateKey","keyFromPrivate","_ref","default","mark","_callee","_privateKey$sign","r","s","recoveryParam","wrap","_callee$","_context","prev","next","sign","sha256","abrupt","toString","stop","_x","apply","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,YAAY,GAAGF,sBAAsB,CAACC,OAAO,CAAC,4BAAD,CAAR,CAAzC;;AAEA,IAAIE,kBAAkB,GAAGH,sBAAsB,CAACC,OAAO,CAAC,yCAAD,CAAR,CAA/C;;AAEA,IAAIG,SAAS,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAII,OAAO,GAAGJ,OAAO,CAAC,UAAD,CAArB;;AAEA,IAAIK,SAAS,GAAG,IAAIF,SAAS,CAACG,EAAd,CAAiB,WAAjB,CAAhB;;AAEA,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,MAAIC,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AACA,MAAIF,IAAI,CAACG,MAAL,KAAgBF,IAApB,EAA0B,OAAOD,IAAP;AAC1B,SAAO,IAAIK,MAAJ,CAAWJ,IAAI,GAAGD,IAAI,CAACG,MAAvB,IAAiCH,IAAxC;AACD;AACD;;;;;;;;;;;;;;;AAeA,SAASM,YAAT,CAAsBC,aAAtB,EAAqC;AACnC,MAAIC,UAAU,GAAGX,SAAS,CAACY,cAAV,CAAyBF,aAAzB,CAAjB;AACA,SACE,aACA,YAAY;AACV,QAAIG,IAAI,GAAG,CAAC,GAAGhB,kBAAkB,CAACiB,OAAvB,GACX,aACAlB,YAAY,CAACkB,OAAb,CAAqBC,IAArB,CAA0B,SAASC,OAAT,CAAiBb,IAAjB,EAAuB;AAC/C,UAAIc,gBAAJ,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4BC,aAA5B;;AAEA,aAAOxB,YAAY,CAACkB,OAAb,CAAqBO,IAArB,CAA0B,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC3D,eAAO,CAAP,EAAU;AACR,kBAAQA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACE,IAAjC;AACE,iBAAK,CAAL;AACER,cAAAA,gBAAgB,GAAGN,UAAU,CAACe,IAAX,CAAgB,CAAC,GAAG3B,OAAO,CAAC4B,MAAZ,EAAoBxB,IAApB,CAAhB,CAAnB,EAA+De,CAAC,GAAGD,gBAAgB,CAACC,CAApF,EAAuFC,CAAC,GAAGF,gBAAgB,CAACE,CAA5G,EAA+GC,aAAa,GAAGH,gBAAgB,CAACG,aAAhJ;AACA,qBAAOG,QAAQ,CAACK,MAAT,CAAgB,QAAhB,EAA0B;AAC/BV,gBAAAA,CAAC,EAAEhB,OAAO,CAACgB,CAAC,CAACW,QAAF,CAAW,KAAX,CAAD,CADqB;AAE/BV,gBAAAA,CAAC,EAAEjB,OAAO,CAACiB,CAAC,CAACU,QAAF,CAAW,KAAX,CAAD,CAFqB;AAG/BT,gBAAAA,aAAa,EAAEA;AAHgB,eAA1B,CAAP;;AAMF,iBAAK,CAAL;AACA,iBAAK,KAAL;AACE,qBAAOG,QAAQ,CAACO,IAAT,EAAP;AAXJ;AAaD;AACF,OAhBM,EAgBJd,OAhBI,EAgBK,IAhBL,CAAP;AAiBD,KApBD,CAFW,CAAX;;AAwBA,WAAO,UAAUe,EAAV,EAAc;AACnB,aAAOlB,IAAI,CAACmB,KAAL,CAAW,IAAX,EAAiB3B,SAAjB,CAAP;AACD,KAFD;AAGD,GA5BD,EAFF;AAgCD;;AAED4B,MAAM,CAACC,OAAP,GAAiBzB,YAAjB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _elliptic = require(\"elliptic\");\n\nvar _Digest = require(\"./Digest\");\n\nvar secp256k1 = new _elliptic.ec('secp256k1');\n\nfunction leftpad(data) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n  if (data.length === size) return data;\n  return '0'.repeat(size - data.length) + data;\n}\n/**\n*  The SimpleSigner returns a configured function for signing data. It also defines\n*  an interface that you can also implement yourself and use in our other modules.\n*\n*  @example\n*  const signer = SimpleSigner(process.env.PRIVATE_KEY)\n*  signer(data, (err, signature) => {\n*    ...\n*  })\n*\n*  @param    {String}         hexPrivateKey    a hex encoded private key\n*  @return   {Function}                     a configured signer function\n*/\n\n\nfunction SimpleSigner(hexPrivateKey) {\n  var privateKey = secp256k1.keyFromPrivate(hexPrivateKey);\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(data) {\n        var _privateKey$sign, r, s, recoveryParam;\n\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _privateKey$sign = privateKey.sign((0, _Digest.sha256)(data)), r = _privateKey$sign.r, s = _privateKey$sign.s, recoveryParam = _privateKey$sign.recoveryParam;\n                return _context.abrupt(\"return\", {\n                  r: leftpad(r.toString('hex')),\n                  s: leftpad(s.toString('hex')),\n                  recoveryParam: recoveryParam\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\n\nmodule.exports = SimpleSigner;"]},"metadata":{},"sourceType":"script"}