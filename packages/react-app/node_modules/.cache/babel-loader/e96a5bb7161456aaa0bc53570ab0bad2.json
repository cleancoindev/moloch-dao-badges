{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n\nconst PeerInfo = require('peer-info');\n\nconst multiaddr = require('multiaddr');\n\nconst mafmt = require('mafmt');\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst debug = require('debug');\n\nconst nextTick = require('async/nextTick');\n\nconst log = debug('libp2p:bootstrap');\nlog.error = debug('libp2p:bootstrap:error');\n\nfunction isIPFS(addr) {\n  try {\n    return mafmt.IPFS.matches(addr);\n  } catch (e) {\n    return false;\n  }\n}\n\nclass Bootstrap extends EventEmitter {\n  constructor(options) {\n    super();\n    this._list = options.list;\n    this._interval = options.interval || 10000;\n    this._timer = null;\n  }\n\n  start(callback) {\n    if (this._timer) {\n      return nextTick(() => callback());\n    }\n\n    this._timer = setInterval(() => this._discoverBootstrapPeers(), this._interval);\n    nextTick(() => {\n      callback();\n\n      this._discoverBootstrapPeers();\n    });\n  }\n\n  _discoverBootstrapPeers() {\n    this._list.forEach(candidate => {\n      if (!isIPFS(candidate)) {\n        return log.error('Invalid multiaddr');\n      }\n\n      const ma = multiaddr(candidate);\n      const peerId = PeerId.createFromB58String(ma.getPeerId());\n      PeerInfo.create(peerId, (err, peerInfo) => {\n        if (err) {\n          return log.error('Invalid bootstrap peer id', err);\n        }\n\n        peerInfo.multiaddrs.add(ma);\n        this.emit('peer', peerInfo);\n      });\n    });\n  }\n\n  stop(callback) {\n    nextTick(callback);\n\n    if (this._timer) {\n      clearInterval(this._timer);\n      this._timer = null;\n    }\n  }\n\n}\n\nexports = module.exports = Bootstrap;\nexports.tag = 'bootstrap';","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/libp2p-bootstrap/src/index.js"],"names":["PeerId","require","PeerInfo","multiaddr","mafmt","EventEmitter","debug","nextTick","log","error","isIPFS","addr","IPFS","matches","e","Bootstrap","constructor","options","_list","list","_interval","interval","_timer","start","callback","setInterval","_discoverBootstrapPeers","forEach","candidate","ma","peerId","createFromB58String","getPeerId","create","err","peerInfo","multiaddrs","add","emit","stop","clearInterval","exports","module","tag"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,QAAD,CAAP,CAAkBI,YAAvC;;AACA,MAAMC,KAAK,GAAGL,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,gBAAD,CAAxB;;AAEA,MAAMO,GAAG,GAAGF,KAAK,CAAC,kBAAD,CAAjB;AACAE,GAAG,CAACC,KAAJ,GAAYH,KAAK,CAAC,wBAAD,CAAjB;;AAEA,SAASI,MAAT,CAAiBC,IAAjB,EAAuB;AACrB,MAAI;AACF,WAAOP,KAAK,CAACQ,IAAN,CAAWC,OAAX,CAAmBF,IAAnB,CAAP;AACD,GAFD,CAEE,OAAOG,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;AAED,MAAMC,SAAN,SAAwBV,YAAxB,CAAqC;AACnCW,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB;AACA,SAAKC,KAAL,GAAaD,OAAO,CAACE,IAArB;AACA,SAAKC,SAAL,GAAiBH,OAAO,CAACI,QAAR,IAAoB,KAArC;AACA,SAAKC,MAAL,GAAc,IAAd;AACD;;AAEDC,EAAAA,KAAK,CAAEC,QAAF,EAAY;AACf,QAAI,KAAKF,MAAT,EAAiB;AACf,aAAOf,QAAQ,CAAC,MAAMiB,QAAQ,EAAf,CAAf;AACD;;AAED,SAAKF,MAAL,GAAcG,WAAW,CAAC,MAAM,KAAKC,uBAAL,EAAP,EAAuC,KAAKN,SAA5C,CAAzB;AAEAb,IAAAA,QAAQ,CAAC,MAAM;AACbiB,MAAAA,QAAQ;;AACR,WAAKE,uBAAL;AACD,KAHO,CAAR;AAID;;AAEDA,EAAAA,uBAAuB,GAAI;AACzB,SAAKR,KAAL,CAAWS,OAAX,CAAoBC,SAAD,IAAe;AAChC,UAAI,CAAClB,MAAM,CAACkB,SAAD,CAAX,EAAwB;AAAE,eAAOpB,GAAG,CAACC,KAAJ,CAAU,mBAAV,CAAP;AAAuC;;AAEjE,YAAMoB,EAAE,GAAG1B,SAAS,CAACyB,SAAD,CAApB;AAEA,YAAME,MAAM,GAAG9B,MAAM,CAAC+B,mBAAP,CAA2BF,EAAE,CAACG,SAAH,EAA3B,CAAf;AAEA9B,MAAAA,QAAQ,CAAC+B,MAAT,CAAgBH,MAAhB,EAAwB,CAACI,GAAD,EAAMC,QAAN,KAAmB;AACzC,YAAID,GAAJ,EAAS;AAAE,iBAAO1B,GAAG,CAACC,KAAJ,CAAU,2BAAV,EAAuCyB,GAAvC,CAAP;AAAoD;;AAC/DC,QAAAA,QAAQ,CAACC,UAAT,CAAoBC,GAApB,CAAwBR,EAAxB;AACA,aAAKS,IAAL,CAAU,MAAV,EAAkBH,QAAlB;AACD,OAJD;AAKD,KAZD;AAaD;;AAEDI,EAAAA,IAAI,CAAEf,QAAF,EAAY;AACdjB,IAAAA,QAAQ,CAACiB,QAAD,CAAR;;AAEA,QAAI,KAAKF,MAAT,EAAiB;AACfkB,MAAAA,aAAa,CAAC,KAAKlB,MAAN,CAAb;AACA,WAAKA,MAAL,GAAc,IAAd;AACD;AACF;;AA5CkC;;AA+CrCmB,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB1B,SAA3B;AACA0B,OAAO,CAACE,GAAR,GAAc,WAAd","sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst multiaddr = require('multiaddr')\nconst mafmt = require('mafmt')\nconst EventEmitter = require('events').EventEmitter\nconst debug = require('debug')\nconst nextTick = require('async/nextTick')\n\nconst log = debug('libp2p:bootstrap')\nlog.error = debug('libp2p:bootstrap:error')\n\nfunction isIPFS (addr) {\n  try {\n    return mafmt.IPFS.matches(addr)\n  } catch (e) {\n    return false\n  }\n}\n\nclass Bootstrap extends EventEmitter {\n  constructor (options) {\n    super()\n    this._list = options.list\n    this._interval = options.interval || 10000\n    this._timer = null\n  }\n\n  start (callback) {\n    if (this._timer) {\n      return nextTick(() => callback())\n    }\n\n    this._timer = setInterval(() => this._discoverBootstrapPeers(), this._interval)\n\n    nextTick(() => {\n      callback()\n      this._discoverBootstrapPeers()\n    })\n  }\n\n  _discoverBootstrapPeers () {\n    this._list.forEach((candidate) => {\n      if (!isIPFS(candidate)) { return log.error('Invalid multiaddr') }\n\n      const ma = multiaddr(candidate)\n\n      const peerId = PeerId.createFromB58String(ma.getPeerId())\n\n      PeerInfo.create(peerId, (err, peerInfo) => {\n        if (err) { return log.error('Invalid bootstrap peer id', err) }\n        peerInfo.multiaddrs.add(ma)\n        this.emit('peer', peerInfo)\n      })\n    })\n  }\n\n  stop (callback) {\n    nextTick(callback)\n\n    if (this._timer) {\n      clearInterval(this._timer)\n      this._timer = null\n    }\n  }\n}\n\nexports = module.exports = Bootstrap\nexports.tag = 'bootstrap'\n"]},"metadata":{},"sourceType":"script"}