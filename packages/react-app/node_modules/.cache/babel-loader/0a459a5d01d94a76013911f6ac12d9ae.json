{"ast":null,"code":"'use strict';\n\nconst WS = require('libp2p-websockets');\n\nconst WebRTCStar = require('libp2p-webrtc-star');\n\nconst WebSocketStarMulti = require('libp2p-websocket-star-multi');\n\nconst Multiplex = require('pull-mplex');\n\nconst SECIO = require('libp2p-secio');\n\nconst Bootstrap = require('libp2p-bootstrap');\n\nconst KadDHT = require('libp2p-kad-dht');\n\nconst GossipSub = require('libp2p-gossipsub');\n\nconst libp2p = require('libp2p');\n\nconst mergeOptions = require('merge-options');\n\nconst multiaddr = require('multiaddr');\n\nclass Node extends libp2p {\n  constructor(_options) {\n    const wrtcstar = new WebRTCStar({\n      id: _options.peerInfo.id\n    }); // this can be replaced once optional listening is supported with the below code. ref: https://github.com/libp2p/interface-transport/issues/41\n    // const wsstar = new WebSocketStar({ id: _options.peerInfo.id })\n\n    const wsstarServers = _options.peerInfo.multiaddrs.toArray().map(String).filter(addr => addr.includes('p2p-websocket-star'));\n\n    _options.peerInfo.multiaddrs.replace(wsstarServers.map(multiaddr), '/p2p-websocket-star'); // the ws-star-multi module will replace this with the chosen ws-star servers\n\n\n    const wsstar = new WebSocketStarMulti({\n      servers: wsstarServers,\n      id: _options.peerInfo.id,\n      ignore_no_online: !wsstarServers.length || _options.wsStarIgnoreErrors\n    });\n    const defaults = {\n      switch: {\n        denyTTL: 2 * 60 * 1e3,\n        // 2 minute base\n        denyAttempts: 5,\n        // back off 5 times\n        maxParallelDials: 100,\n        maxColdCalls: 25,\n        dialTimeout: 20e3\n      },\n      modules: {\n        transport: [WS, wrtcstar, wsstar],\n        streamMuxer: [Multiplex],\n        connEncryption: [SECIO],\n        peerDiscovery: [wrtcstar.discovery, wsstar.discovery, Bootstrap],\n        dht: KadDHT,\n        pubsub: GossipSub\n      },\n      config: {\n        peerDiscovery: {\n          autoDial: true,\n          bootstrap: {\n            enabled: true\n          },\n          webRTCStar: {\n            enabled: true\n          },\n          websocketStar: {\n            enabled: true\n          }\n        },\n        dht: {\n          enabled: false\n        },\n        pubsub: {\n          enabled: true,\n          emitSelf: true\n        }\n      }\n    };\n    super(mergeOptions(defaults, _options));\n  }\n\n}\n\nmodule.exports = Node;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs/src/core/runtime/libp2p-browser.js"],"names":["WS","require","WebRTCStar","WebSocketStarMulti","Multiplex","SECIO","Bootstrap","KadDHT","GossipSub","libp2p","mergeOptions","multiaddr","Node","constructor","_options","wrtcstar","id","peerInfo","wsstarServers","multiaddrs","toArray","map","String","filter","addr","includes","replace","wsstar","servers","ignore_no_online","length","wsStarIgnoreErrors","defaults","switch","denyTTL","denyAttempts","maxParallelDials","maxColdCalls","dialTimeout","modules","transport","streamMuxer","connEncryption","peerDiscovery","discovery","dht","pubsub","config","autoDial","bootstrap","enabled","webRTCStar","websocketStar","emitSelf","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst WS = require('libp2p-websockets')\nconst WebRTCStar = require('libp2p-webrtc-star')\nconst WebSocketStarMulti = require('libp2p-websocket-star-multi')\nconst Multiplex = require('pull-mplex')\nconst SECIO = require('libp2p-secio')\nconst Bootstrap = require('libp2p-bootstrap')\nconst KadDHT = require('libp2p-kad-dht')\nconst GossipSub = require('libp2p-gossipsub')\nconst libp2p = require('libp2p')\nconst mergeOptions = require('merge-options')\nconst multiaddr = require('multiaddr')\n\nclass Node extends libp2p {\n  constructor (_options) {\n    const wrtcstar = new WebRTCStar({ id: _options.peerInfo.id })\n\n    // this can be replaced once optional listening is supported with the below code. ref: https://github.com/libp2p/interface-transport/issues/41\n    // const wsstar = new WebSocketStar({ id: _options.peerInfo.id })\n    const wsstarServers = _options.peerInfo.multiaddrs.toArray().map(String).filter(addr => addr.includes('p2p-websocket-star'))\n    _options.peerInfo.multiaddrs.replace(wsstarServers.map(multiaddr), '/p2p-websocket-star') // the ws-star-multi module will replace this with the chosen ws-star servers\n    const wsstar = new WebSocketStarMulti({ servers: wsstarServers, id: _options.peerInfo.id, ignore_no_online: !wsstarServers.length || _options.wsStarIgnoreErrors })\n\n    const defaults = {\n      switch: {\n        denyTTL: 2 * 60 * 1e3, // 2 minute base\n        denyAttempts: 5, // back off 5 times\n        maxParallelDials: 100,\n        maxColdCalls: 25,\n        dialTimeout: 20e3\n      },\n      modules: {\n        transport: [\n          WS,\n          wrtcstar,\n          wsstar\n        ],\n        streamMuxer: [\n          Multiplex\n        ],\n        connEncryption: [\n          SECIO\n        ],\n        peerDiscovery: [\n          wrtcstar.discovery,\n          wsstar.discovery,\n          Bootstrap\n        ],\n        dht: KadDHT,\n        pubsub: GossipSub\n      },\n      config: {\n        peerDiscovery: {\n          autoDial: true,\n          bootstrap: {\n            enabled: true\n          },\n          webRTCStar: {\n            enabled: true\n          },\n          websocketStar: {\n            enabled: true\n          }\n        },\n        dht: {\n          enabled: false\n        },\n        pubsub: {\n          enabled: true,\n          emitSelf: true\n        }\n      }\n    }\n\n    super(mergeOptions(defaults, _options))\n  }\n}\n\nmodule.exports = Node\n"]},"metadata":{},"sourceType":"script"}