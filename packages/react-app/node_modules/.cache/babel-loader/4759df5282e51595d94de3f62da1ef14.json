{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst crypto = require('libp2p-crypto');\n\nconst multihashing = promisify(require('multihashing-async'));\n\nconst PeerId = require('peer-id');\n\nconst assert = require('assert');\n\nconst AbortController = require('abort-controller');\n\nconst errcode = require('err-code');\n\nconst times = require('p-times');\n\nconst c = require('./constants');\n\nconst {\n  logger\n} = require('./utils');\n\nclass RandomWalk {\n  /**\n   * @constructor\n   * @param {DHT} dht\n   * @param {object} options\n   * @param {randomWalkOptions.enabled} options.enabled\n   * @param {randomWalkOptions.queriesPerPeriod} options.queriesPerPeriod\n   * @param {randomWalkOptions.interval} options.interval\n   * @param {randomWalkOptions.timeout} options.timeout\n   * @param {randomWalkOptions.delay} options.delay\n   * @param {DHT} options.dht\n   */\n  constructor(dht, options) {\n    assert(dht, 'Random Walk needs an instance of the Kademlia DHT');\n    this._options = { ...c.defaultRandomWalk,\n      ...options\n    };\n    this._kadDHT = dht;\n    this.log = logger(dht.peerInfo.id, 'random-walk');\n    this._timeoutId = undefined;\n  }\n  /**\n   * Start the Random Walk process. This means running a number of queries\n   * every interval requesting random data. This is done to keep the dht\n   * healthy over time.\n   *\n   * @returns {void}\n   */\n\n\n  start() {\n    // Don't run twice\n    if (this._timeoutId || !this._options.enabled) {\n      return;\n    } // Start doing random walks after `this._options.delay`\n\n\n    this._timeoutId = setTimeout(() => {\n      // Start runner immediately\n      this._runPeriodically();\n    }, this._options.delay);\n  }\n  /**\n   * Stop the random-walk process. Any active\n   * queries will be aborted.\n   *\n   * @returns {void}\n   */\n\n\n  stop() {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n      this._timeoutId = undefined;\n    }\n\n    this._controller && this._controller.abort();\n  }\n  /**\n   * Run function `randomWalk._walk` on every `options.interval` ms\n   *\n   * @private\n   */\n\n\n  async _runPeriodically() {\n    // run until the walk has been stopped\n    while (this._timeoutId) {\n      try {\n        await this._walk(this._options.queriesPerPeriod, this._options.timeout);\n      } catch (err) {\n        this._kadDHT._log.error('random-walk:error', err);\n      } // Each subsequent walk should run on a `this._options.interval` interval\n\n\n      await new Promise(resolve => {\n        this._timeoutId = setTimeout(resolve, this._options.interval);\n      });\n    }\n  }\n  /**\n   * Do the random walk work.\n   *\n   * @param {number} queries\n   * @param {number} walkTimeout\n   * @returns {Promise}\n   *\n   * @private\n   */\n\n\n  async _walk(queries, walkTimeout) {\n    this.log('start');\n    this._controller = new AbortController();\n\n    try {\n      await times(queries, async index => {\n        this.log('running query %d', index);\n\n        try {\n          const id = await this._randomPeerId(); // Check if we've happened to already abort\n\n          if (!this._controller) return;\n          await this._query(id, {\n            timeout: walkTimeout,\n            signal: this._controller.signal\n          });\n        } catch (err) {\n          if (err && err.code !== 'ETIMEDOUT') {\n            this.log.error('query %d finished with error', index, err);\n            throw err;\n          }\n        }\n\n        this.log('finished query %d', index);\n      });\n    } finally {\n      this._controller = null;\n      this.log('finished queries');\n    }\n  }\n  /**\n   * The query run during a random walk request.\n   *\n   * TODO: While query currently supports an abort controller, it is not\n   * yet supported by `DHT.findPeer`. Once https://github.com/libp2p/js-libp2p-kad-dht/pull/82\n   * is complete, and AbortController support has been added to the\n   * DHT query functions, the abort here will just work, provided the\n   * functions support `options.signal`. Once done, this todo should be\n   * removed.\n   *\n   * @param {PeerId} id\n   * @param {object} options\n   * @param {number} options.timeout\n   * @param {AbortControllerSignal} options.signal\n   * @returns {Promise}\n   *\n   * @private\n   */\n\n\n  async _query(id, options) {\n    this.log('query:%s', id.toB58String());\n    let peer;\n\n    try {\n      peer = await promisify(cb => this._kadDHT.findPeer(id, options, cb))();\n    } catch (err) {\n      if (err && err.code === 'ERR_NOT_FOUND') {\n        // expected case, we asked for random stuff after all\n        return;\n      }\n\n      throw err;\n    }\n\n    this.log('query:found', peer); // wait what, there was something found? Lucky day!\n\n    throw errcode(`random-walk: ACTUALLY FOUND PEER: ${peer}, ${id.toB58String()}`, 'ERR_FOUND_RANDOM_PEER');\n  }\n  /**\n   * Generate a random peer id for random-walk purposes.\n   *\n   * @returns {Promise<PeerId>}\n   *\n   * @private\n   */\n\n\n  async _randomPeerId() {\n    const digest = await multihashing(crypto.randomBytes(16), 'sha2-256');\n    return new PeerId(digest);\n  }\n\n}\n\nmodule.exports = RandomWalk;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/libp2p-kad-dht/src/random-walk.js"],"names":["promisify","require","crypto","multihashing","PeerId","assert","AbortController","errcode","times","c","logger","RandomWalk","constructor","dht","options","_options","defaultRandomWalk","_kadDHT","log","peerInfo","id","_timeoutId","undefined","start","enabled","setTimeout","_runPeriodically","delay","stop","clearTimeout","_controller","abort","_walk","queriesPerPeriod","timeout","err","_log","error","Promise","resolve","interval","queries","walkTimeout","index","_randomPeerId","_query","signal","code","toB58String","peer","cb","findPeer","digest","randomBytes","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst promisify = require('promisify-es6')\nconst crypto = require('libp2p-crypto')\nconst multihashing = promisify(require('multihashing-async'))\nconst PeerId = require('peer-id')\nconst assert = require('assert')\nconst AbortController = require('abort-controller')\nconst errcode = require('err-code')\nconst times = require('p-times')\nconst c = require('./constants')\nconst { logger } = require('./utils')\n\nclass RandomWalk {\n  /**\n   * @constructor\n   * @param {DHT} dht\n   * @param {object} options\n   * @param {randomWalkOptions.enabled} options.enabled\n   * @param {randomWalkOptions.queriesPerPeriod} options.queriesPerPeriod\n   * @param {randomWalkOptions.interval} options.interval\n   * @param {randomWalkOptions.timeout} options.timeout\n   * @param {randomWalkOptions.delay} options.delay\n   * @param {DHT} options.dht\n   */\n  constructor (dht, options) {\n    assert(dht, 'Random Walk needs an instance of the Kademlia DHT')\n    this._options = { ...c.defaultRandomWalk, ...options }\n    this._kadDHT = dht\n    this.log = logger(dht.peerInfo.id, 'random-walk')\n    this._timeoutId = undefined\n  }\n\n  /**\n   * Start the Random Walk process. This means running a number of queries\n   * every interval requesting random data. This is done to keep the dht\n   * healthy over time.\n   *\n   * @returns {void}\n   */\n  start () {\n    // Don't run twice\n    if (this._timeoutId || !this._options.enabled) { return }\n\n    // Start doing random walks after `this._options.delay`\n    this._timeoutId = setTimeout(() => {\n      // Start runner immediately\n      this._runPeriodically()\n    }, this._options.delay)\n  }\n\n  /**\n   * Stop the random-walk process. Any active\n   * queries will be aborted.\n   *\n   * @returns {void}\n   */\n  stop () {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId)\n      this._timeoutId = undefined\n    }\n    this._controller && this._controller.abort()\n  }\n\n  /**\n   * Run function `randomWalk._walk` on every `options.interval` ms\n   *\n   * @private\n   */\n  async _runPeriodically () {\n    // run until the walk has been stopped\n    while (this._timeoutId) {\n      try {\n        await this._walk(this._options.queriesPerPeriod, this._options.timeout)\n      } catch (err) {\n        this._kadDHT._log.error('random-walk:error', err)\n      }\n      // Each subsequent walk should run on a `this._options.interval` interval\n      await new Promise(resolve => {\n        this._timeoutId = setTimeout(resolve, this._options.interval)\n      })\n    }\n  }\n\n  /**\n   * Do the random walk work.\n   *\n   * @param {number} queries\n   * @param {number} walkTimeout\n   * @returns {Promise}\n   *\n   * @private\n   */\n  async _walk (queries, walkTimeout) {\n    this.log('start')\n    this._controller = new AbortController()\n\n    try {\n      await times(queries, async (index) => {\n        this.log('running query %d', index)\n        try {\n          const id = await this._randomPeerId()\n\n          // Check if we've happened to already abort\n          if (!this._controller) return\n\n          await this._query(id, {\n            timeout: walkTimeout,\n            signal: this._controller.signal\n          })\n        } catch (err) {\n          if (err && err.code !== 'ETIMEDOUT') {\n            this.log.error('query %d finished with error', index, err)\n            throw err\n          }\n        }\n\n        this.log('finished query %d', index)\n      })\n    } finally {\n      this._controller = null\n      this.log('finished queries')\n    }\n  }\n\n  /**\n   * The query run during a random walk request.\n   *\n   * TODO: While query currently supports an abort controller, it is not\n   * yet supported by `DHT.findPeer`. Once https://github.com/libp2p/js-libp2p-kad-dht/pull/82\n   * is complete, and AbortController support has been added to the\n   * DHT query functions, the abort here will just work, provided the\n   * functions support `options.signal`. Once done, this todo should be\n   * removed.\n   *\n   * @param {PeerId} id\n   * @param {object} options\n   * @param {number} options.timeout\n   * @param {AbortControllerSignal} options.signal\n   * @returns {Promise}\n   *\n   * @private\n   */\n  async _query (id, options) {\n    this.log('query:%s', id.toB58String())\n\n    let peer\n    try {\n      peer = await promisify(cb => this._kadDHT.findPeer(id, options, cb))()\n    } catch (err) {\n      if (err && err.code === 'ERR_NOT_FOUND') {\n        // expected case, we asked for random stuff after all\n        return\n      }\n\n      throw err\n    }\n\n    this.log('query:found', peer)\n\n    // wait what, there was something found? Lucky day!\n    throw errcode(`random-walk: ACTUALLY FOUND PEER: ${peer}, ${id.toB58String()}`, 'ERR_FOUND_RANDOM_PEER')\n  }\n\n  /**\n   * Generate a random peer id for random-walk purposes.\n   *\n   * @returns {Promise<PeerId>}\n   *\n   * @private\n   */\n  async _randomPeerId () {\n    const digest = await multihashing(crypto.randomBytes(16), 'sha2-256')\n    return new PeerId(digest)\n  }\n}\n\nmodule.exports = RandomWalk\n"]},"metadata":{},"sourceType":"script"}