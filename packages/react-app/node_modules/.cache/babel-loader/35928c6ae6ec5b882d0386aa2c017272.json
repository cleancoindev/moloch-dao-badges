{"ast":null,"code":"'use strict';\n\nconst pull = require('pull-stream/pull');\n\nconst values = require('pull-stream/sources/values');\n\nconst pullLP = require('pull-length-prefixed');\n\nconst varint = require('varint');\n\nfunction lsHandler(self, conn) {\n  const protos = Object.keys(self.handlers).filter(key => key !== 'ls');\n  const nProtos = protos.length; // total size of the list of protocols, including varint and newline\n\n  const size = protos.reduce((size, proto) => {\n    const p = Buffer.from(proto + '\\n');\n    const el = varint.encodingLength(p.length);\n    return size + el;\n  }, 0);\n  const buf = Buffer.concat([Buffer.from(varint.encode(nProtos)), Buffer.from(varint.encode(size)), Buffer.from('\\n')]);\n  const encodedProtos = protos.map(proto => {\n    return Buffer.from(proto + '\\n');\n  });\n  pull(values([buf].concat(encodedProtos)), pullLP.encode(), conn);\n}\n\nmodule.exports = lsHandler;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/multistream-select/src/listener/ls-handler.js"],"names":["pull","require","values","pullLP","varint","lsHandler","self","conn","protos","Object","keys","handlers","filter","key","nProtos","length","size","reduce","proto","p","Buffer","from","el","encodingLength","buf","concat","encode","encodedProtos","map","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,4BAAD,CAAtB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,sBAAD,CAAtB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AAEA,SAASI,SAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;AAC9B,QAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYJ,IAAI,CAACK,QAAjB,EAA2BC,MAA3B,CAAmCC,GAAD,IAASA,GAAG,KAAK,IAAnD,CAAf;AAEA,QAAMC,OAAO,GAAGN,MAAM,CAACO,MAAvB,CAH8B,CAI9B;;AACA,QAAMC,IAAI,GAAGR,MAAM,CAACS,MAAP,CAAc,CAACD,IAAD,EAAOE,KAAP,KAAiB;AAC1C,UAAMC,CAAC,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,GAAG,IAApB,CAAV;AACA,UAAMI,EAAE,GAAGlB,MAAM,CAACmB,cAAP,CAAsBJ,CAAC,CAACJ,MAAxB,CAAX;AACA,WAAOC,IAAI,GAAGM,EAAd;AACD,GAJY,EAIV,CAJU,CAAb;AAMA,QAAME,GAAG,GAAGJ,MAAM,CAACK,MAAP,CAAc,CACxBL,MAAM,CAACC,IAAP,CAAYjB,MAAM,CAACsB,MAAP,CAAcZ,OAAd,CAAZ,CADwB,EAExBM,MAAM,CAACC,IAAP,CAAYjB,MAAM,CAACsB,MAAP,CAAcV,IAAd,CAAZ,CAFwB,EAGxBI,MAAM,CAACC,IAAP,CAAY,IAAZ,CAHwB,CAAd,CAAZ;AAMA,QAAMM,aAAa,GAAGnB,MAAM,CAACoB,GAAP,CAAYV,KAAD,IAAW;AAC1C,WAAOE,MAAM,CAACC,IAAP,CAAYH,KAAK,GAAG,IAApB,CAAP;AACD,GAFqB,CAAtB;AAIAlB,EAAAA,IAAI,CACFE,MAAM,CAAC,CAACsB,GAAD,EAAMC,MAAN,CAAaE,aAAb,CAAD,CADJ,EAEFxB,MAAM,CAACuB,MAAP,EAFE,EAGFnB,IAHE,CAAJ;AAKD;;AAEDsB,MAAM,CAACC,OAAP,GAAiBzB,SAAjB","sourcesContent":["'use strict'\n\nconst pull = require('pull-stream/pull')\nconst values = require('pull-stream/sources/values')\nconst pullLP = require('pull-length-prefixed')\nconst varint = require('varint')\n\nfunction lsHandler (self, conn) {\n  const protos = Object.keys(self.handlers).filter((key) => key !== 'ls')\n\n  const nProtos = protos.length\n  // total size of the list of protocols, including varint and newline\n  const size = protos.reduce((size, proto) => {\n    const p = Buffer.from(proto + '\\n')\n    const el = varint.encodingLength(p.length)\n    return size + el\n  }, 0)\n\n  const buf = Buffer.concat([\n    Buffer.from(varint.encode(nProtos)),\n    Buffer.from(varint.encode(size)),\n    Buffer.from('\\n')\n  ])\n\n  const encodedProtos = protos.map((proto) => {\n    return Buffer.from(proto + '\\n')\n  })\n\n  pull(\n    values([buf].concat(encodedProtos)),\n    pullLP.encode(),\n    conn\n  )\n}\n\nmodule.exports = lsHandler\n"]},"metadata":{},"sourceType":"script"}