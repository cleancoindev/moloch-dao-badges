{"ast":null,"code":"'use strict';\n\nconst Key = require('interface-datastore').Key;\n\nconst {\n  default: Queue\n} = require('p-queue');\n\nconst _get = require('just-safe-get');\n\nconst _set = require('just-safe-set');\n\nconst _has = require('lodash.has');\n\nconst errcode = require('err-code');\n\nconst errors = require('./errors');\n\nconst configKey = new Key('config');\n\nmodule.exports = store => {\n  const setQueue = new Queue({\n    concurrency: 1\n  });\n  const configStore = {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @param {String} key - the config key to get\n     * @returns {Promise<Object>}\n     */\n    async get(key) {\n      if (!key) {\n        key = undefined;\n      }\n\n      const encodedValue = await store.get(configKey);\n      const config = JSON.parse(encodedValue.toString());\n\n      if (key !== undefined && !_has(config, key)) {\n        throw new errors.NotFoundError(`Key ${key} does not exist in config`);\n      }\n\n      const value = key !== undefined ? _get(config, key) : config;\n      return value;\n    },\n\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {String} key - the config key to be written\n     * @param {Object} value - the config value to be written\n     * @returns {void}\n     */\n    async set(key, value) {\n      // eslint-disable-line require-await\n      if (arguments.length === 1) {\n        value = key;\n        key = undefined;\n      } else if (!key || typeof key !== 'string') {\n        throw errcode(new Error('Invalid key type: ' + typeof key), 'ERR_INVALID_KEY');\n      }\n\n      if (value === undefined || Buffer.isBuffer(value)) {\n        throw errcode(new Error('Invalid value type: ' + typeof value), 'ERR_INVALID_VALUE');\n      }\n\n      return setQueue.add(() => _doSet({\n        key: key,\n        value: value\n      }));\n    },\n\n    /**\n     * Check if a config file exists.\n     *\n     * @returns {Promise<bool>}\n     */\n    async exists() {\n      // eslint-disable-line require-await\n      return store.has(configKey);\n    }\n\n  };\n  return configStore;\n\n  async function _doSet(m) {\n    const key = m.key;\n    const value = m.value;\n\n    if (key) {\n      const config = await configStore.get();\n\n      _set(config, key, value);\n\n      return _saveAll(config);\n    }\n\n    return _saveAll(value);\n  }\n\n  function _saveAll(config) {\n    const buf = Buffer.from(JSON.stringify(config, null, 2));\n    return store.put(configKey, buf);\n  }\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs/node_modules/ipfs-repo/src/config.js"],"names":["Key","require","default","Queue","_get","_set","_has","errcode","errors","configKey","module","exports","store","setQueue","concurrency","configStore","get","key","undefined","encodedValue","config","JSON","parse","toString","NotFoundError","value","set","arguments","length","Error","Buffer","isBuffer","add","_doSet","exists","has","m","_saveAll","buf","from","stringify","put"],"mappings":"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","sourcesContent":["'use strict'\n\nconst Key = require('interface-datastore').Key\nconst { default: Queue } = require('p-queue')\nconst _get = require('just-safe-get')\nconst _set = require('just-safe-set')\nconst _has = require('lodash.has')\nconst errcode = require('err-code')\nconst errors = require('./errors')\n\nconst configKey = new Key('config')\n\nmodule.exports = (store) => {\n  const setQueue = new Queue({ concurrency: 1 })\n\n  const configStore = {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @param {String} key - the config key to get\n     * @returns {Promise<Object>}\n     */\n    async get (key) {\n      if (!key) {\n        key = undefined\n      }\n\n      const encodedValue = await store.get(configKey)\n      const config = JSON.parse(encodedValue.toString())\n      if (key !== undefined && !_has(config, key)) {\n        throw new errors.NotFoundError(`Key ${key} does not exist in config`)\n      }\n\n      const value = key !== undefined ? _get(config, key) : config\n      return value\n    },\n\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {String} key - the config key to be written\n     * @param {Object} value - the config value to be written\n     * @returns {void}\n     */\n    async set (key, value) { // eslint-disable-line require-await\n      if (arguments.length === 1) {\n        value = key\n        key = undefined\n      } else if (!key || typeof key !== 'string') {\n        throw errcode(new Error('Invalid key type: ' + typeof key), 'ERR_INVALID_KEY')\n      }\n\n      if (value === undefined || Buffer.isBuffer(value)) {\n        throw errcode(new Error('Invalid value type: ' + typeof value), 'ERR_INVALID_VALUE')\n      }\n\n      return setQueue.add(() => _doSet({\n        key: key,\n        value: value\n      }))\n    },\n\n    /**\n     * Check if a config file exists.\n     *\n     * @returns {Promise<bool>}\n     */\n    async exists () { // eslint-disable-line require-await\n      return store.has(configKey)\n    }\n  }\n\n  return configStore\n\n  async function _doSet (m) {\n    const key = m.key\n    const value = m.value\n    if (key) {\n      const config = await configStore.get()\n      _set(config, key, value)\n      return _saveAll(config)\n    }\n    return _saveAll(value)\n  }\n\n  function _saveAll (config) {\n    const buf = Buffer.from(JSON.stringify(config, null, 2))\n    return store.put(configKey, buf)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}