{"ast":null,"code":"'use strict';\n\nconst dirBuilder = require('./dir');\n\nconst fileBuilder = require('./file');\n\nconst createChunker = require('../chunker');\n\nconst validateChunks = require('./validate-chunks');\n\nasync function* dagBuilder(source, ipld, options) {\n  for await (const entry of source) {\n    if (entry.path) {\n      if (entry.path.substring(0, 2) === './') {\n        options.wrapWithDirectory = true;\n      }\n\n      entry.path = entry.path.split('/').filter(path => path && path !== '.').join('/');\n    }\n\n    if (entry.content) {\n      let source = entry.content; // wrap in iterator if it is array-like or not an iterator\n\n      if (!source[Symbol.asyncIterator] && !source[Symbol.iterator] || source.length !== undefined) {\n        source = {\n          [Symbol.iterator]: function* () {\n            yield entry.content;\n          }\n        };\n      }\n\n      const chunker = createChunker(options.chunker, validateChunks(source), options.chunkerOptions); // item is a file\n\n      yield fileBuilder(entry, chunker, ipld, options);\n    } else {\n      // item is a directory\n      yield dirBuilder(entry, ipld, options);\n    }\n  }\n}\n\nmodule.exports = dagBuilder;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipfs-unixfs-importer/src/dag-builder/index.js"],"names":["dirBuilder","require","fileBuilder","createChunker","validateChunks","dagBuilder","source","ipld","options","entry","path","substring","wrapWithDirectory","split","filter","join","content","Symbol","asyncIterator","iterator","length","undefined","chunker","chunkerOptions","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,OAAD,CAA1B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,QAAD,CAA3B;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,YAAD,CAA7B;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,mBAAD,CAA9B;;AAEA,gBAAiBI,UAAjB,CAA6BC,MAA7B,EAAqCC,IAArC,EAA2CC,OAA3C,EAAoD;AAClD,aAAW,MAAMC,KAAjB,IAA0BH,MAA1B,EAAkC;AAChC,QAAIG,KAAK,CAACC,IAAV,EAAgB;AACd,UAAID,KAAK,CAACC,IAAN,CAAWC,SAAX,CAAqB,CAArB,EAAwB,CAAxB,MAA+B,IAAnC,EAAyC;AACvCH,QAAAA,OAAO,CAACI,iBAAR,GAA4B,IAA5B;AACD;;AAEDH,MAAAA,KAAK,CAACC,IAAN,GAAaD,KAAK,CAACC,IAAN,CACVG,KADU,CACJ,GADI,EAEVC,MAFU,CAEHJ,IAAI,IAAIA,IAAI,IAAIA,IAAI,KAAK,GAFtB,EAGVK,IAHU,CAGL,GAHK,CAAb;AAID;;AAED,QAAIN,KAAK,CAACO,OAAV,EAAmB;AACjB,UAAIV,MAAM,GAAGG,KAAK,CAACO,OAAnB,CADiB,CAGjB;;AACA,UAAK,CAACV,MAAM,CAACW,MAAM,CAACC,aAAR,CAAP,IAAiC,CAACZ,MAAM,CAACW,MAAM,CAACE,QAAR,CAAzC,IAA+Db,MAAM,CAACc,MAAP,KAAkBC,SAArF,EAAgG;AAC9Ff,QAAAA,MAAM,GAAG;AACP,WAACW,MAAM,CAACE,QAAR,GAAmB,aAAc;AAC/B,kBAAMV,KAAK,CAACO,OAAZ;AACD;AAHM,SAAT;AAKD;;AAED,YAAMM,OAAO,GAAGnB,aAAa,CAACK,OAAO,CAACc,OAAT,EAAkBlB,cAAc,CAACE,MAAD,CAAhC,EAA0CE,OAAO,CAACe,cAAlD,CAA7B,CAZiB,CAcjB;;AACA,YAAMrB,WAAW,CAACO,KAAD,EAAQa,OAAR,EAAiBf,IAAjB,EAAuBC,OAAvB,CAAjB;AACD,KAhBD,MAgBO;AACL;AACA,YAAMR,UAAU,CAACS,KAAD,EAAQF,IAAR,EAAcC,OAAd,CAAhB;AACD;AACF;AACF;;AAEDgB,MAAM,CAACC,OAAP,GAAiBpB,UAAjB","sourcesContent":["'use strict'\n\nconst dirBuilder = require('./dir')\nconst fileBuilder = require('./file')\nconst createChunker = require('../chunker')\nconst validateChunks = require('./validate-chunks')\n\nasync function * dagBuilder (source, ipld, options) {\n  for await (const entry of source) {\n    if (entry.path) {\n      if (entry.path.substring(0, 2) === './') {\n        options.wrapWithDirectory = true\n      }\n\n      entry.path = entry.path\n        .split('/')\n        .filter(path => path && path !== '.')\n        .join('/')\n    }\n\n    if (entry.content) {\n      let source = entry.content\n\n      // wrap in iterator if it is array-like or not an iterator\n      if ((!source[Symbol.asyncIterator] && !source[Symbol.iterator]) || source.length !== undefined) {\n        source = {\n          [Symbol.iterator]: function * () {\n            yield entry.content\n          }\n        }\n      }\n\n      const chunker = createChunker(options.chunker, validateChunks(source), options.chunkerOptions)\n\n      // item is a file\n      yield fileBuilder(entry, chunker, ipld, options)\n    } else {\n      // item is a directory\n      yield dirBuilder(entry, ipld, options)\n    }\n  }\n}\n\nmodule.exports = dagBuilder\n"]},"metadata":{},"sourceType":"script"}