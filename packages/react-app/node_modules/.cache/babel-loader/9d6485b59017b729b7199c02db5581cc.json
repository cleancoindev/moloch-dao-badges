{"ast":null,"code":"\"use strict\";\n\nimport { decrypt as decryptCrowdsale } from \"./crowdsale\";\nimport { getJsonWalletAddress, isCrowdsaleWallet, isKeystoreWallet } from \"./inspect\";\nimport { decrypt as decryptKeystore, decryptSync as decryptKeystoreSync, encrypt as encryptKeystore } from \"./keystore\";\n\nfunction decryptJsonWallet(json, password, progressCallback) {\n  if (isCrowdsaleWallet(json)) {\n    if (progressCallback) {\n      progressCallback(0);\n    }\n\n    const account = decryptCrowdsale(json, password);\n\n    if (progressCallback) {\n      progressCallback(1);\n    }\n\n    return Promise.resolve(account);\n  }\n\n  if (isKeystoreWallet(json)) {\n    return decryptKeystore(json, password, progressCallback);\n  }\n\n  return Promise.reject(new Error(\"invalid JSON wallet\"));\n}\n\nfunction decryptJsonWalletSync(json, password) {\n  if (isCrowdsaleWallet(json)) {\n    return decryptCrowdsale(json, password);\n  }\n\n  if (isKeystoreWallet(json)) {\n    return decryptKeystoreSync(json, password);\n  }\n\n  throw new Error(\"invalid JSON wallet\");\n}\n\nexport { decryptCrowdsale, decryptKeystore, decryptKeystoreSync, encryptKeystore, isCrowdsaleWallet, isKeystoreWallet, getJsonWalletAddress, decryptJsonWallet, decryptJsonWalletSync };","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/@ethersproject/json-wallets/lib.esm/index.js"],"names":["decrypt","decryptCrowdsale","getJsonWalletAddress","isCrowdsaleWallet","isKeystoreWallet","decryptKeystore","decryptSync","decryptKeystoreSync","encrypt","encryptKeystore","decryptJsonWallet","json","password","progressCallback","account","Promise","resolve","reject","Error","decryptJsonWalletSync"],"mappings":"AAAA;;AACA,SAASA,OAAO,IAAIC,gBAApB,QAA4C,aAA5C;AACA,SAASC,oBAAT,EAA+BC,iBAA/B,EAAkDC,gBAAlD,QAA0E,WAA1E;AACA,SAASJ,OAAO,IAAIK,eAApB,EAAqCC,WAAW,IAAIC,mBAApD,EAAyEC,OAAO,IAAIC,eAApF,QAA2G,YAA3G;;AACA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,QAAjC,EAA2CC,gBAA3C,EAA6D;AACzD,MAAIV,iBAAiB,CAACQ,IAAD,CAArB,EAA6B;AACzB,QAAIE,gBAAJ,EAAsB;AAClBA,MAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACH;;AACD,UAAMC,OAAO,GAAGb,gBAAgB,CAACU,IAAD,EAAOC,QAAP,CAAhC;;AACA,QAAIC,gBAAJ,EAAsB;AAClBA,MAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACH;;AACD,WAAOE,OAAO,CAACC,OAAR,CAAgBF,OAAhB,CAAP;AACH;;AACD,MAAIV,gBAAgB,CAACO,IAAD,CAApB,EAA4B;AACxB,WAAON,eAAe,CAACM,IAAD,EAAOC,QAAP,EAAiBC,gBAAjB,CAAtB;AACH;;AACD,SAAOE,OAAO,CAACE,MAAR,CAAe,IAAIC,KAAJ,CAAU,qBAAV,CAAf,CAAP;AACH;;AACD,SAASC,qBAAT,CAA+BR,IAA/B,EAAqCC,QAArC,EAA+C;AAC3C,MAAIT,iBAAiB,CAACQ,IAAD,CAArB,EAA6B;AACzB,WAAOV,gBAAgB,CAACU,IAAD,EAAOC,QAAP,CAAvB;AACH;;AACD,MAAIR,gBAAgB,CAACO,IAAD,CAApB,EAA4B;AACxB,WAAOJ,mBAAmB,CAACI,IAAD,EAAOC,QAAP,CAA1B;AACH;;AACD,QAAM,IAAIM,KAAJ,CAAU,qBAAV,CAAN;AACH;;AACD,SAASjB,gBAAT,EAA2BI,eAA3B,EAA4CE,mBAA5C,EAAiEE,eAAjE,EAAkFN,iBAAlF,EAAqGC,gBAArG,EAAuHF,oBAAvH,EAA6IQ,iBAA7I,EAAgKS,qBAAhK","sourcesContent":["\"use strict\";\nimport { decrypt as decryptCrowdsale } from \"./crowdsale\";\nimport { getJsonWalletAddress, isCrowdsaleWallet, isKeystoreWallet } from \"./inspect\";\nimport { decrypt as decryptKeystore, decryptSync as decryptKeystoreSync, encrypt as encryptKeystore } from \"./keystore\";\nfunction decryptJsonWallet(json, password, progressCallback) {\n    if (isCrowdsaleWallet(json)) {\n        if (progressCallback) {\n            progressCallback(0);\n        }\n        const account = decryptCrowdsale(json, password);\n        if (progressCallback) {\n            progressCallback(1);\n        }\n        return Promise.resolve(account);\n    }\n    if (isKeystoreWallet(json)) {\n        return decryptKeystore(json, password, progressCallback);\n    }\n    return Promise.reject(new Error(\"invalid JSON wallet\"));\n}\nfunction decryptJsonWalletSync(json, password) {\n    if (isCrowdsaleWallet(json)) {\n        return decryptCrowdsale(json, password);\n    }\n    if (isKeystoreWallet(json)) {\n        return decryptKeystoreSync(json, password);\n    }\n    throw new Error(\"invalid JSON wallet\");\n}\nexport { decryptCrowdsale, decryptKeystore, decryptKeystoreSync, encryptKeystore, isCrowdsaleWallet, isKeystoreWallet, getJsonWalletAddress, decryptJsonWallet, decryptJsonWalletSync, };\n"]},"metadata":{},"sourceType":"module"}