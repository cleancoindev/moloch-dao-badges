{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst UnixFs = require('ipfs-unixfs');\n\nconst {\n  DAGNode\n} = require('ipld-dag-pb');\n\nconst log = require('debug')('ipfs:mfs:utils:with-mfs-root');\n\nconst mc = require('multicodec');\n\nconst mh = require('multihashes');\n\nconst {\n  MFS_ROOT_KEY\n} = require('./constants');\n\nconst loadMfsRoot = async context => {\n  // Open the repo if it's been closed\n  await context.repo.datastore.open(); // Load the MFS root CID\n\n  let cid;\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY);\n    cid = new CID(buf);\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err;\n    }\n\n    log('Creating new MFS root');\n    const node = new DAGNode(new UnixFs('directory').marshal());\n    cid = await context.ipld.put(node, mc.DAG_PB, {\n      cidVersion: 0,\n      hashAlg: mh.names['sha2-256'] // why can't ipld look this up?\n\n    });\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer);\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`);\n  return cid;\n};\n\nmodule.exports = loadMfsRoot;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs-mfs/src/core/utils/with-mfs-root.js"],"names":["CID","require","UnixFs","DAGNode","log","mc","mh","MFS_ROOT_KEY","loadMfsRoot","context","repo","datastore","open","cid","buf","get","err","code","node","marshal","ipld","put","DAG_PB","cidVersion","hashAlg","names","buffer","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAM;AACJE,EAAAA;AADI,IAEFF,OAAO,CAAC,aAAD,CAFX;;AAGA,MAAMG,GAAG,GAAGH,OAAO,CAAC,OAAD,CAAP,CAAiB,8BAAjB,CAAZ;;AACA,MAAMI,EAAE,GAAGJ,OAAO,CAAC,YAAD,CAAlB;;AACA,MAAMK,EAAE,GAAGL,OAAO,CAAC,aAAD,CAAlB;;AAEA,MAAM;AACJM,EAAAA;AADI,IAEFN,OAAO,CAAC,aAAD,CAFX;;AAIA,MAAMO,WAAW,GAAG,MAAOC,OAAP,IAAmB;AACrC;AACA,QAAMA,OAAO,CAACC,IAAR,CAAaC,SAAb,CAAuBC,IAAvB,EAAN,CAFqC,CAIrC;;AACA,MAAIC,GAAJ;;AAEA,MAAI;AACF,UAAMC,GAAG,GAAG,MAAML,OAAO,CAACC,IAAR,CAAaC,SAAb,CAAuBI,GAAvB,CAA2BR,YAA3B,CAAlB;AAEAM,IAAAA,GAAG,GAAG,IAAIb,GAAJ,CAAQc,GAAR,CAAN;AACD,GAJD,CAIE,OAAOE,GAAP,EAAY;AACZ,QAAIA,GAAG,CAACC,IAAJ,KAAa,eAAjB,EAAkC;AAChC,YAAMD,GAAN;AACD;;AAEDZ,IAAAA,GAAG,CAAC,uBAAD,CAAH;AACA,UAAMc,IAAI,GAAG,IAAIf,OAAJ,CAAY,IAAID,MAAJ,CAAW,WAAX,EAAwBiB,OAAxB,EAAZ,CAAb;AACAN,IAAAA,GAAG,GAAG,MAAMJ,OAAO,CAACW,IAAR,CAAaC,GAAb,CAAiBH,IAAjB,EAAuBb,EAAE,CAACiB,MAA1B,EAAkC;AAC5CC,MAAAA,UAAU,EAAE,CADgC;AAE5CC,MAAAA,OAAO,EAAElB,EAAE,CAACmB,KAAH,CAAS,UAAT,CAFmC,CAEd;;AAFc,KAAlC,CAAZ;AAKA,UAAMhB,OAAO,CAACC,IAAR,CAAaC,SAAb,CAAuBU,GAAvB,CAA2Bd,YAA3B,EAAyCM,GAAG,CAACa,MAA7C,CAAN;AACD;;AAEDtB,EAAAA,GAAG,CAAE,yBAAwBS,GAAI,EAA9B,CAAH;AAEA,SAAOA,GAAP;AACD,CA7BD;;AA+BAc,MAAM,CAACC,OAAP,GAAiBpB,WAAjB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst UnixFs = require('ipfs-unixfs')\nconst {\n  DAGNode\n} = require('ipld-dag-pb')\nconst log = require('debug')('ipfs:mfs:utils:with-mfs-root')\nconst mc = require('multicodec')\nconst mh = require('multihashes')\n\nconst {\n  MFS_ROOT_KEY\n} = require('./constants')\n\nconst loadMfsRoot = async (context) => {\n  // Open the repo if it's been closed\n  await context.repo.datastore.open()\n\n  // Load the MFS root CID\n  let cid\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY)\n\n    cid = new CID(buf)\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n\n    log('Creating new MFS root')\n    const node = new DAGNode(new UnixFs('directory').marshal())\n    cid = await context.ipld.put(node, mc.DAG_PB, {\n      cidVersion: 0,\n      hashAlg: mh.names['sha2-256'] // why can't ipld look this up?\n    })\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer)\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`)\n\n  return cid\n}\n\nmodule.exports = loadMfsRoot\n"]},"metadata":{},"sourceType":"script"}