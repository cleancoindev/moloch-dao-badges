{"ast":null,"code":"'use strict';\n/**\n * A list of unique peer infos.\n */\n\nclass PeerList {\n  constructor() {\n    this.list = [];\n  }\n  /**\n   * Add a new info. Returns `true` if it was a new one\n   *\n   * @param {PeerInfo} info\n   * @returns {bool}\n   */\n\n\n  push(info) {\n    if (!this.has(info)) {\n      this.list.push(info);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Check if this PeerInfo is already in here.\n   *\n   * @param {PeerInfo} info\n   * @returns {bool}\n   */\n\n\n  has(info) {\n    const match = this.list.find(i => i.id.isEqual(info.id));\n    return Boolean(match);\n  }\n  /**\n   * Get the list as an array.\n   *\n   * @returns {Array<PeerInfo>}\n   */\n\n\n  toArray() {\n    return this.list.slice();\n  }\n  /**\n   * Remove the last element\n   *\n   * @returns {PeerInfo}\n   */\n\n\n  pop() {\n    return this.list.pop();\n  }\n  /**\n   * The length of the list\n   *\n   * @type {number}\n   */\n\n\n  get length() {\n    return this.list.length;\n  }\n\n}\n\nmodule.exports = PeerList;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/libp2p-kad-dht/src/peer-list.js"],"names":["PeerList","constructor","list","push","info","has","match","find","i","id","isEqual","Boolean","toArray","slice","pop","length","module","exports"],"mappings":"AAAA;AAEA;;;;AAGA,MAAMA,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAI;AACb,SAAKC,IAAL,GAAY,EAAZ;AACD;AAED;;;;;;;;AAMAC,EAAAA,IAAI,CAAEC,IAAF,EAAQ;AACV,QAAI,CAAC,KAAKC,GAAL,CAASD,IAAT,CAAL,EAAqB;AACnB,WAAKF,IAAL,CAAUC,IAAV,CAAeC,IAAf;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;AAED;;;;;;;;AAMAC,EAAAA,GAAG,CAAED,IAAF,EAAQ;AACT,UAAME,KAAK,GAAG,KAAKJ,IAAL,CAAUK,IAAV,CAAgBC,CAAD,IAAOA,CAAC,CAACC,EAAF,CAAKC,OAAL,CAAaN,IAAI,CAACK,EAAlB,CAAtB,CAAd;AACA,WAAOE,OAAO,CAACL,KAAD,CAAd;AACD;AAED;;;;;;;AAKAM,EAAAA,OAAO,GAAI;AACT,WAAO,KAAKV,IAAL,CAAUW,KAAV,EAAP;AACD;AAED;;;;;;;AAKAC,EAAAA,GAAG,GAAI;AACL,WAAO,KAAKZ,IAAL,CAAUY,GAAV,EAAP;AACD;AAED;;;;;;;AAKA,MAAIC,MAAJ,GAAc;AACZ,WAAO,KAAKb,IAAL,CAAUa,MAAjB;AACD;;AAvDY;;AA0DfC,MAAM,CAACC,OAAP,GAAiBjB,QAAjB","sourcesContent":["'use strict'\n\n/**\n * A list of unique peer infos.\n */\nclass PeerList {\n  constructor () {\n    this.list = []\n  }\n\n  /**\n   * Add a new info. Returns `true` if it was a new one\n   *\n   * @param {PeerInfo} info\n   * @returns {bool}\n   */\n  push (info) {\n    if (!this.has(info)) {\n      this.list.push(info)\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Check if this PeerInfo is already in here.\n   *\n   * @param {PeerInfo} info\n   * @returns {bool}\n   */\n  has (info) {\n    const match = this.list.find((i) => i.id.isEqual(info.id))\n    return Boolean(match)\n  }\n\n  /**\n   * Get the list as an array.\n   *\n   * @returns {Array<PeerInfo>}\n   */\n  toArray () {\n    return this.list.slice()\n  }\n\n  /**\n   * Remove the last element\n   *\n   * @returns {PeerInfo}\n   */\n  pop () {\n    return this.list.pop()\n  }\n\n  /**\n   * The length of the list\n   *\n   * @type {number}\n   */\n  get length () {\n    return this.list.length\n  }\n}\n\nmodule.exports = PeerList\n"]},"metadata":{},"sourceType":"script"}