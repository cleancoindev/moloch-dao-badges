{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue } from \"@ethersproject/bytes\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\n\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      resolve();\n    }, timeout);\n  });\n}\n\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    let error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n\n  return value;\n}\n\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n  constructor(constructorGuard, provider, addressOrIndex) {\n    logger.checkNew(new.target, JsonRpcSigner);\n    super();\n\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n\n    defineReadOnly(this, \"provider\", provider);\n\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(this, \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(this, \"_index\", addressOrIndex);\n      defineReadOnly(this, \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n  }\n\n  connect(provider) {\n    return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"connect\"\n    });\n  }\n\n  connectUnchecked() {\n    return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n  }\n\n  getAddress() {\n    if (this._address) {\n      return Promise.resolve(this._address);\n    }\n\n    return this.provider.send(\"eth_accounts\", []).then(accounts => {\n      if (accounts.length <= this._index) {\n        logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress\"\n        });\n      }\n\n      return this.provider.formatter.address(accounts[this._index]);\n    });\n  }\n\n  sendUncheckedTransaction(transaction) {\n    transaction = shallowCopy(transaction);\n    let fromAddress = this.getAddress().then(address => {\n      if (address) {\n        address = address.toLowerCase();\n      }\n\n      return address;\n    }); // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n\n    if (transaction.gasLimit == null) {\n      let estimate = shallowCopy(transaction);\n      estimate.from = fromAddress;\n      transaction.gasLimit = this.provider.estimateGas(estimate);\n    }\n\n    return Promise.all([resolveProperties(transaction), fromAddress]).then(results => {\n      let tx = results[0];\n      let hexTx = this.provider.constructor.hexlifyTransaction(tx);\n      hexTx.from = results[1];\n      return this.provider.send(\"eth_sendTransaction\", [hexTx]).then(hash => {\n        return hash;\n      }, error => {\n        if (error.responseText) {\n          // See: JsonRpcProvider.sendTransaction (@TODO: Expose a ._throwError??)\n          if (error.responseText.indexOf(\"insufficient funds\") >= 0) {\n            logger.throwError(\"insufficient funds\", Logger.errors.INSUFFICIENT_FUNDS, {\n              transaction: tx\n            });\n          }\n\n          if (error.responseText.indexOf(\"nonce too low\") >= 0) {\n            logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n              transaction: tx\n            });\n          }\n\n          if (error.responseText.indexOf(\"replacement transaction underpriced\") >= 0) {\n            logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n              transaction: tx\n            });\n          }\n        }\n\n        throw error;\n      });\n    });\n  }\n\n  signTransaction(transaction) {\n    return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"signTransaction\"\n    });\n  }\n\n  sendTransaction(transaction) {\n    return this.sendUncheckedTransaction(transaction).then(hash => {\n      return poll(() => {\n        return this.provider.getTransaction(hash).then(tx => {\n          if (tx === null) {\n            return undefined;\n          }\n\n          return this.provider._wrapTransaction(tx, hash);\n        });\n      }, {\n        onceBlock: this.provider\n      }).catch(error => {\n        error.transactionHash = hash;\n        throw error;\n      });\n    });\n  }\n\n  signMessage(message) {\n    let data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n    return this.getAddress().then(address => {\n      // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n      return this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n    });\n  }\n\n  unlock(password) {\n    let provider = this.provider;\n    return this.getAddress().then(function (address) {\n      return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n    });\n  }\n\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n  sendTransaction(transaction) {\n    return this.sendUncheckedTransaction(transaction).then(hash => {\n      return {\n        hash: hash,\n        nonce: null,\n        gasLimit: null,\n        gasPrice: null,\n        data: null,\n        value: null,\n        chainId: null,\n        confirmations: 0,\n        from: null,\n        wait: confirmations => {\n          return this.provider.waitForTransaction(hash, confirmations);\n        }\n      };\n    });\n  }\n\n}\n\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n  constructor(url, network) {\n    logger.checkNew(new.target, JsonRpcProvider);\n    const getNetwork = getStatic(new.target, \"getNetwork\"); // One parameter, but it is a network name, so swap it with the URL\n\n    if (typeof url === \"string\") {\n      if (network === null) {\n        const checkNetwork = getNetwork(url);\n        network = checkNetwork;\n        url = null;\n      }\n    }\n\n    if (network) {\n      // The network has been specified explicitly, we can use it\n      super(network);\n    } else {\n      // The network is unknown, query the JSON-RPC for it\n      const ready = new Promise((resolve, reject) => {\n        setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n          let chainId = null;\n\n          try {\n            chainId = yield this.send(\"eth_chainId\", []);\n          } catch (error) {\n            try {\n              chainId = yield this.send(\"net_version\", []);\n            } catch (error) {}\n          }\n\n          if (chainId != null) {\n            try {\n              return resolve(getNetwork(BigNumber.from(chainId).toNumber()));\n            } catch (error) {}\n          }\n\n          reject(logger.makeError(\"could not detect network\", Logger.errors.NETWORK_ERROR));\n        }), 0);\n      });\n      super(ready);\n    } // Default URL\n\n\n    if (!url) {\n      url = getStatic(this.constructor, \"defaultUrl\")();\n    }\n\n    if (typeof url === \"string\") {\n      this.connection = Object.freeze({\n        url: url\n      });\n    } else {\n      this.connection = Object.freeze(shallowCopy(url));\n    }\n\n    this._nextId = 42;\n  }\n\n  static defaultUrl() {\n    return \"http:/\" + \"/localhost:8545\";\n  }\n\n  getSigner(addressOrIndex) {\n    return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n  }\n\n  getUncheckedSigner(addressOrIndex) {\n    return this.getSigner(addressOrIndex).connectUnchecked();\n  }\n\n  listAccounts() {\n    return this.send(\"eth_accounts\", []).then(accounts => {\n      return accounts.map(a => this.formatter.address(a));\n    });\n  }\n\n  send(method, params) {\n    let request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"request\",\n      request: deepCopy(request),\n      provider: this\n    });\n    return fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: request,\n        response: result,\n        provider: this\n      });\n      return result;\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        error: error,\n        request: request,\n        provider: this\n      });\n      throw error;\n    });\n  }\n\n  prepareRequest(method, params) {\n    switch (method) {\n      case \"getBlockNumber\":\n        return [\"eth_blockNumber\", []];\n\n      case \"getGasPrice\":\n        return [\"eth_gasPrice\", []];\n\n      case \"getBalance\":\n        return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getTransactionCount\":\n        return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getCode\":\n        return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getStorageAt\":\n        return [\"eth_getStorageAt\", [getLowerCase(params.address), params.position, params.blockTag]];\n\n      case \"sendTransaction\":\n        return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n\n      case \"getBlock\":\n        if (params.blockTag) {\n          return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n        } else if (params.blockHash) {\n          return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n        }\n\n        return null;\n\n      case \"getTransaction\":\n        return [\"eth_getTransactionByHash\", [params.transactionHash]];\n\n      case \"getTransactionReceipt\":\n        return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n\n      case \"call\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n            from: true\n          }), params.blockTag]];\n        }\n\n      case \"estimateGas\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, {\n            from: true\n          })]];\n        }\n\n      case \"getLogs\":\n        if (params.filter && params.filter.address != null) {\n          params.filter.address = getLowerCase(params.filter.address);\n        }\n\n        return [\"eth_getLogs\", [params.filter]];\n\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  perform(method, params) {\n    const args = this.prepareRequest(method, params);\n\n    if (args == null) {\n      logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n        operation: method\n      });\n    } // We need a little extra logic to process errors from sendTransaction\n\n\n    if (method === \"sendTransaction\") {\n      return this.send(args[0], args[1]).catch(error => {\n        if (error.responseText) {\n          // \"insufficient funds for gas * price + value\"\n          if (error.responseText.indexOf(\"insufficient funds\") > 0) {\n            logger.throwError(\"insufficient funds\", Logger.errors.INSUFFICIENT_FUNDS, {});\n          } // \"nonce too low\"\n\n\n          if (error.responseText.indexOf(\"nonce too low\") > 0) {\n            logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {});\n          } // \"replacement transaction underpriced\"\n\n\n          if (error.responseText.indexOf(\"replacement transaction underpriced\") > 0) {\n            logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {});\n          }\n        }\n\n        throw error;\n      });\n    }\n\n    return this.send(args[0], args[1]);\n  }\n\n  _startEvent(event) {\n    if (event.tag === \"pending\") {\n      this._startPending();\n    }\n\n    super._startEvent(event);\n  }\n\n  _startPending() {\n    if (this._pendingFilter != null) {\n      return;\n    }\n\n    let self = this;\n    let pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n    this._pendingFilter = pendingFilter;\n    pendingFilter.then(function (filterId) {\n      function poll() {\n        self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n          if (self._pendingFilter != pendingFilter) {\n            return null;\n          }\n\n          let seq = Promise.resolve();\n          hashes.forEach(function (hash) {\n            // @TODO: This should be garbage collected at some point... How? When?\n            self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n            seq = seq.then(function () {\n              return self.getTransaction(hash).then(function (tx) {\n                self.emit(\"pending\", tx);\n                return null;\n              });\n            });\n          });\n          return seq.then(function () {\n            return timer(1000);\n          });\n        }).then(function () {\n          if (self._pendingFilter != pendingFilter) {\n            self.send(\"eth_uninstallFilter\", [filterId]);\n            return;\n          }\n\n          setTimeout(function () {\n            poll();\n          }, 0);\n          return null;\n        }).catch(error => {});\n      }\n\n      poll();\n      return filterId;\n    }).catch(error => {});\n  }\n\n  _stopEvent(event) {\n    if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n      this._pendingFilter = null;\n    }\n\n    super._stopEvent(event);\n  } // Convert an ethers.js transaction into a JSON-RPC transaction\n  //  - gasLimit => gas\n  //  - All values hexlified\n  //  - All numeric values zero-striped\n  //  - All addresses are lowercased\n  // NOTE: This allows a TransactionRequest, but all values should be resolved\n  //       before this is called\n  // @TODO: This will likely be removed in future versions and prepareRequest\n  //        will be the preferred method for this.\n\n\n  static hexlifyTransaction(transaction, allowExtra) {\n    // Check only allowed properties are given\n    const allowed = shallowCopy(allowedTransactionKeys);\n\n    if (allowExtra) {\n      for (let key in allowExtra) {\n        if (allowExtra[key]) {\n          allowed[key] = true;\n        }\n      }\n    }\n\n    checkProperties(transaction, allowed);\n    const result = {}; // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n\n    [\"gasLimit\", \"gasPrice\", \"nonce\", \"value\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      const value = hexValue(transaction[key]);\n\n      if (key === \"gasLimit\") {\n        key = \"gas\";\n      }\n\n      result[key] = value;\n    });\n    [\"from\", \"to\", \"data\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      result[key] = hexlify(transaction[key]);\n    });\n    return result;\n  }\n\n}","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Signer","BigNumber","hexlify","hexValue","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","toUtf8Bytes","fetchJson","poll","Logger","version","logger","BaseProvider","timer","timeout","setTimeout","getResult","payload","error","Error","message","code","data","getLowerCase","toLowerCase","_constructorGuard","JsonRpcSigner","constructor","constructorGuard","provider","addressOrIndex","checkNew","new","target","formatter","address","throwArgumentError","connect","throwError","errors","UNSUPPORTED_OPERATION","operation","connectUnchecked","UncheckedJsonRpcSigner","_address","_index","getAddress","send","accounts","length","sendUncheckedTransaction","transaction","fromAddress","gasLimit","estimate","from","estimateGas","all","results","tx","hexTx","hexlifyTransaction","hash","responseText","indexOf","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","signTransaction","sendTransaction","getTransaction","undefined","_wrapTransaction","onceBlock","catch","transactionHash","signMessage","unlock","password","nonce","gasPrice","chainId","confirmations","wait","waitForTransaction","allowedTransactionKeys","to","JsonRpcProvider","url","network","getNetwork","checkNetwork","ready","toNumber","makeError","NETWORK_ERROR","connection","Object","freeze","_nextId","defaultUrl","getSigner","getUncheckedSigner","listAccounts","map","a","method","params","request","id","jsonrpc","emit","action","JSON","stringify","response","prepareRequest","blockTag","position","signedTransaction","includeTransactions","blockHash","filter","perform","args","NOT_IMPLEMENTED","_startEvent","event","tag","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","forEach","_emitted","_stopEvent","listenerCount","allowExtra","allowed","key"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,MAAAA,OAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,QAAAA,IAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,QAAAA,MAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,MAAAA,MAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,IAAAA,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASA,SAASO,MAAT,QAAuB,gCAAvB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,sBAAlC;AACA,SAASC,eAAT,EAA0BC,QAA1B,EAAoCC,cAApC,EAAoDC,SAApD,EAA+DC,iBAA/D,EAAkFC,WAAlF,QAAqG,2BAArG;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,oBAAhC;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AACA,SAASE,YAAT,QAA6B,iBAA7B;;AACA,SAASC,KAAT,CAAeC,OAAf,EAAwB;AACpB,SAAO,IAAI7B,OAAJ,CAAY,UAAUD,OAAV,EAAmB;AAClC+B,IAAAA,UAAU,CAAC,YAAY;AACnB/B,MAAAA,OAAO;AACV,KAFS,EAEP8B,OAFO,CAAV;AAGH,GAJM,CAAP;AAKH;;AACD,SAASE,SAAT,CAAmBC,OAAnB,EAA4B;AACxB,MAAIA,OAAO,CAACC,KAAZ,EAAmB;AACf;AACA,QAAIA,KAAK,GAAG,IAAIC,KAAJ,CAAUF,OAAO,CAACC,KAAR,CAAcE,OAAxB,CAAZ;AACAF,IAAAA,KAAK,CAACG,IAAN,GAAaJ,OAAO,CAACC,KAAR,CAAcG,IAA3B;AACAH,IAAAA,KAAK,CAACI,IAAN,GAAaL,OAAO,CAACC,KAAR,CAAcI,IAA3B;AACA,UAAMJ,KAAN;AACH;;AACD,SAAOD,OAAO,CAACzB,MAAf;AACH;;AACD,SAAS+B,YAAT,CAAsBxC,KAAtB,EAA6B;AACzB,MAAIA,KAAJ,EAAW;AACP,WAAOA,KAAK,CAACyC,WAAN,EAAP;AACH;;AACD,SAAOzC,KAAP;AACH;;AACD,MAAM0C,iBAAiB,GAAG,EAA1B;AACA,OAAO,MAAMC,aAAN,SAA4B9B,MAA5B,CAAmC;AACtC+B,EAAAA,WAAW,CAACC,gBAAD,EAAmBC,QAAnB,EAA6BC,cAA7B,EAA6C;AACpDnB,IAAAA,MAAM,CAACoB,QAAP,CAAgBC,GAAG,CAACC,MAApB,EAA4BP,aAA5B;AACA;;AACA,QAAIE,gBAAgB,KAAKH,iBAAzB,EAA4C;AACxC,YAAM,IAAIN,KAAJ,CAAU,4EAAV,CAAN;AACH;;AACDjB,IAAAA,cAAc,CAAC,IAAD,EAAO,UAAP,EAAmB2B,QAAnB,CAAd;;AACA,QAAIC,cAAc,IAAI,IAAtB,EAA4B;AACxBA,MAAAA,cAAc,GAAG,CAAjB;AACH;;AACD,QAAI,OAAQA,cAAR,KAA4B,QAAhC,EAA0C;AACtC5B,MAAAA,cAAc,CAAC,IAAD,EAAO,UAAP,EAAmB,KAAK2B,QAAL,CAAcK,SAAd,CAAwBC,OAAxB,CAAgCL,cAAhC,CAAnB,CAAd;AACA5B,MAAAA,cAAc,CAAC,IAAD,EAAO,QAAP,EAAiB,IAAjB,CAAd;AACH,KAHD,MAIK,IAAI,OAAQ4B,cAAR,KAA4B,QAAhC,EAA0C;AAC3C5B,MAAAA,cAAc,CAAC,IAAD,EAAO,QAAP,EAAiB4B,cAAjB,CAAd;AACA5B,MAAAA,cAAc,CAAC,IAAD,EAAO,UAAP,EAAmB,IAAnB,CAAd;AACH,KAHI,MAIA;AACDS,MAAAA,MAAM,CAACyB,kBAAP,CAA0B,0BAA1B,EAAsD,gBAAtD,EAAwEN,cAAxE;AACH;AACJ;;AACDO,EAAAA,OAAO,CAACR,QAAD,EAAW;AACd,WAAOlB,MAAM,CAAC2B,UAAP,CAAkB,yCAAlB,EAA6D7B,MAAM,CAAC8B,MAAP,CAAcC,qBAA3E,EAAkG;AACrGC,MAAAA,SAAS,EAAE;AAD0F,KAAlG,CAAP;AAGH;;AACDC,EAAAA,gBAAgB,GAAG;AACf,WAAO,IAAIC,sBAAJ,CAA2BlB,iBAA3B,EAA8C,KAAKI,QAAnD,EAA6D,KAAKe,QAAL,IAAiB,KAAKC,MAAnF,CAAP;AACH;;AACDC,EAAAA,UAAU,GAAG;AACT,QAAI,KAAKF,QAAT,EAAmB;AACf,aAAO3D,OAAO,CAACD,OAAR,CAAgB,KAAK4D,QAArB,CAAP;AACH;;AACD,WAAO,KAAKf,QAAL,CAAckB,IAAd,CAAmB,cAAnB,EAAmC,EAAnC,EAAuCrD,IAAvC,CAA6CsD,QAAD,IAAc;AAC7D,UAAIA,QAAQ,CAACC,MAAT,IAAmB,KAAKJ,MAA5B,EAAoC;AAChClC,QAAAA,MAAM,CAAC2B,UAAP,CAAkB,sBAAsB,KAAKO,MAA7C,EAAqDpC,MAAM,CAAC8B,MAAP,CAAcC,qBAAnE,EAA0F;AACtFC,UAAAA,SAAS,EAAE;AAD2E,SAA1F;AAGH;;AACD,aAAO,KAAKZ,QAAL,CAAcK,SAAd,CAAwBC,OAAxB,CAAgCa,QAAQ,CAAC,KAAKH,MAAN,CAAxC,CAAP;AACH,KAPM,CAAP;AAQH;;AACDK,EAAAA,wBAAwB,CAACC,WAAD,EAAc;AAClCA,IAAAA,WAAW,GAAG9C,WAAW,CAAC8C,WAAD,CAAzB;AACA,QAAIC,WAAW,GAAG,KAAKN,UAAL,GAAkBpD,IAAlB,CAAwByC,OAAD,IAAa;AAClD,UAAIA,OAAJ,EAAa;AACTA,QAAAA,OAAO,GAAGA,OAAO,CAACX,WAAR,EAAV;AACH;;AACD,aAAOW,OAAP;AACH,KALiB,CAAlB,CAFkC,CAQlC;AACA;AACA;;AACA,QAAIgB,WAAW,CAACE,QAAZ,IAAwB,IAA5B,EAAkC;AAC9B,UAAIC,QAAQ,GAAGjD,WAAW,CAAC8C,WAAD,CAA1B;AACAG,MAAAA,QAAQ,CAACC,IAAT,GAAgBH,WAAhB;AACAD,MAAAA,WAAW,CAACE,QAAZ,GAAuB,KAAKxB,QAAL,CAAc2B,WAAd,CAA0BF,QAA1B,CAAvB;AACH;;AACD,WAAOrE,OAAO,CAACwE,GAAR,CAAY,CACfrD,iBAAiB,CAAC+C,WAAD,CADF,EAEfC,WAFe,CAAZ,EAGJ1D,IAHI,CAGEgE,OAAD,IAAa;AACjB,UAAIC,EAAE,GAAGD,OAAO,CAAC,CAAD,CAAhB;AACA,UAAIE,KAAK,GAAG,KAAK/B,QAAL,CAAcF,WAAd,CAA0BkC,kBAA1B,CAA6CF,EAA7C,CAAZ;AACAC,MAAAA,KAAK,CAACL,IAAN,GAAaG,OAAO,CAAC,CAAD,CAApB;AACA,aAAO,KAAK7B,QAAL,CAAckB,IAAd,CAAmB,qBAAnB,EAA0C,CAACa,KAAD,CAA1C,EAAmDlE,IAAnD,CAAyDoE,IAAD,IAAU;AACrE,eAAOA,IAAP;AACH,OAFM,EAEH5C,KAAD,IAAW;AACV,YAAIA,KAAK,CAAC6C,YAAV,EAAwB;AACpB;AACA,cAAI7C,KAAK,CAAC6C,YAAN,CAAmBC,OAAnB,CAA2B,oBAA3B,KAAoD,CAAxD,EAA2D;AACvDrD,YAAAA,MAAM,CAAC2B,UAAP,CAAkB,oBAAlB,EAAwC7B,MAAM,CAAC8B,MAAP,CAAc0B,kBAAtD,EAA0E;AACtEd,cAAAA,WAAW,EAAEQ;AADyD,aAA1E;AAGH;;AACD,cAAIzC,KAAK,CAAC6C,YAAN,CAAmBC,OAAnB,CAA2B,eAA3B,KAA+C,CAAnD,EAAsD;AAClDrD,YAAAA,MAAM,CAAC2B,UAAP,CAAkB,6BAAlB,EAAiD7B,MAAM,CAAC8B,MAAP,CAAc2B,aAA/D,EAA8E;AAC1Ef,cAAAA,WAAW,EAAEQ;AAD6D,aAA9E;AAGH;;AACD,cAAIzC,KAAK,CAAC6C,YAAN,CAAmBC,OAAnB,CAA2B,qCAA3B,KAAqE,CAAzE,EAA4E;AACxErD,YAAAA,MAAM,CAAC2B,UAAP,CAAkB,yBAAlB,EAA6C7B,MAAM,CAAC8B,MAAP,CAAc4B,uBAA3D,EAAoF;AAChFhB,cAAAA,WAAW,EAAEQ;AADmE,aAApF;AAGH;AACJ;;AACD,cAAMzC,KAAN;AACH,OAtBM,CAAP;AAuBH,KA9BM,CAAP;AA+BH;;AACDkD,EAAAA,eAAe,CAACjB,WAAD,EAAc;AACzB,WAAOxC,MAAM,CAAC2B,UAAP,CAAkB,qCAAlB,EAAyD7B,MAAM,CAAC8B,MAAP,CAAcC,qBAAvE,EAA8F;AACjGC,MAAAA,SAAS,EAAE;AADsF,KAA9F,CAAP;AAGH;;AACD4B,EAAAA,eAAe,CAAClB,WAAD,EAAc;AACzB,WAAO,KAAKD,wBAAL,CAA8BC,WAA9B,EAA2CzD,IAA3C,CAAiDoE,IAAD,IAAU;AAC7D,aAAOtD,IAAI,CAAC,MAAM;AACd,eAAO,KAAKqB,QAAL,CAAcyC,cAAd,CAA6BR,IAA7B,EAAmCpE,IAAnC,CAAyCiE,EAAD,IAAQ;AACnD,cAAIA,EAAE,KAAK,IAAX,EAAiB;AACb,mBAAOY,SAAP;AACH;;AACD,iBAAO,KAAK1C,QAAL,CAAc2C,gBAAd,CAA+Bb,EAA/B,EAAmCG,IAAnC,CAAP;AACH,SALM,CAAP;AAMH,OAPU,EAOR;AAAEW,QAAAA,SAAS,EAAE,KAAK5C;AAAlB,OAPQ,CAAJ,CAO0B6C,KAP1B,CAOiCxD,KAAD,IAAW;AAC9CA,QAAAA,KAAK,CAACyD,eAAN,GAAwBb,IAAxB;AACA,cAAM5C,KAAN;AACH,OAVM,CAAP;AAWH,KAZM,CAAP;AAaH;;AACD0D,EAAAA,WAAW,CAACxD,OAAD,EAAU;AACjB,QAAIE,IAAI,GAAK,OAAQF,OAAR,KAAqB,QAAtB,GAAkCd,WAAW,CAACc,OAAD,CAA7C,GAAyDA,OAArE;AACA,WAAO,KAAK0B,UAAL,GAAkBpD,IAAlB,CAAwByC,OAAD,IAAa;AACvC;AACA,aAAO,KAAKN,QAAL,CAAckB,IAAd,CAAmB,UAAnB,EAA+B,CAACZ,OAAO,CAACX,WAAR,EAAD,EAAwB1B,OAAO,CAACwB,IAAD,CAA/B,CAA/B,CAAP;AACH,KAHM,CAAP;AAIH;;AACDuD,EAAAA,MAAM,CAACC,QAAD,EAAW;AACb,QAAIjD,QAAQ,GAAG,KAAKA,QAApB;AACA,WAAO,KAAKiB,UAAL,GAAkBpD,IAAlB,CAAuB,UAAUyC,OAAV,EAAmB;AAC7C,aAAON,QAAQ,CAACkB,IAAT,CAAc,wBAAd,EAAwC,CAACZ,OAAO,CAACX,WAAR,EAAD,EAAwBsD,QAAxB,EAAkC,IAAlC,CAAxC,CAAP;AACH,KAFM,CAAP;AAGH;;AA5HqC;;AA8H1C,MAAMnC,sBAAN,SAAqCjB,aAArC,CAAmD;AAC/C2C,EAAAA,eAAe,CAAClB,WAAD,EAAc;AACzB,WAAO,KAAKD,wBAAL,CAA8BC,WAA9B,EAA2CzD,IAA3C,CAAiDoE,IAAD,IAAU;AAC7D,aAAO;AACHA,QAAAA,IAAI,EAAEA,IADH;AAEHiB,QAAAA,KAAK,EAAE,IAFJ;AAGH1B,QAAAA,QAAQ,EAAE,IAHP;AAIH2B,QAAAA,QAAQ,EAAE,IAJP;AAKH1D,QAAAA,IAAI,EAAE,IALH;AAMHvC,QAAAA,KAAK,EAAE,IANJ;AAOHkG,QAAAA,OAAO,EAAE,IAPN;AAQHC,QAAAA,aAAa,EAAE,CARZ;AASH3B,QAAAA,IAAI,EAAE,IATH;AAUH4B,QAAAA,IAAI,EAAGD,aAAD,IAAmB;AAAE,iBAAO,KAAKrD,QAAL,CAAcuD,kBAAd,CAAiCtB,IAAjC,EAAuCoB,aAAvC,CAAP;AAA+D;AAVvF,OAAP;AAYH,KAbM,CAAP;AAcH;;AAhB8C;;AAkBnD,MAAMG,sBAAsB,GAAG;AAC3BJ,EAAAA,OAAO,EAAE,IADkB;AACZ3D,EAAAA,IAAI,EAAE,IADM;AACA+B,EAAAA,QAAQ,EAAE,IADV;AACgB2B,EAAAA,QAAQ,EAAE,IAD1B;AACgCD,EAAAA,KAAK,EAAE,IADvC;AAC6CO,EAAAA,EAAE,EAAE,IADjD;AACuDvG,EAAAA,KAAK,EAAE;AAD9D,CAA/B;AAGA,OAAO,MAAMwG,eAAN,SAA8B3E,YAA9B,CAA2C;AAC9Ce,EAAAA,WAAW,CAAC6D,GAAD,EAAMC,OAAN,EAAe;AACtB9E,IAAAA,MAAM,CAACoB,QAAP,CAAgBC,GAAG,CAACC,MAApB,EAA4BsD,eAA5B;AACA,UAAMG,UAAU,GAAGvF,SAAS,CAAE6B,GAAG,CAACC,MAAN,EAAe,YAAf,CAA5B,CAFsB,CAGtB;;AACA,QAAI,OAAQuD,GAAR,KAAiB,QAArB,EAA+B;AAC3B,UAAIC,OAAO,KAAK,IAAhB,EAAsB;AAClB,cAAME,YAAY,GAAGD,UAAU,CAACF,GAAD,CAA/B;AACAC,QAAAA,OAAO,GAAGE,YAAV;AACAH,QAAAA,GAAG,GAAG,IAAN;AACH;AACJ;;AACD,QAAIC,OAAJ,EAAa;AACT;AACA,YAAMA,OAAN;AACH,KAHD,MAIK;AACD;AACA,YAAMG,KAAK,GAAG,IAAI3G,OAAJ,CAAY,CAACD,OAAD,EAAUE,MAAV,KAAqB;AAC3C6B,QAAAA,UAAU,CAAC,MAAMtC,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAC1D,cAAIwG,OAAO,GAAG,IAAd;;AACA,cAAI;AACAA,YAAAA,OAAO,GAAG,MAAM,KAAKlC,IAAL,CAAU,aAAV,EAAyB,EAAzB,CAAhB;AACH,WAFD,CAGA,OAAO7B,KAAP,EAAc;AACV,gBAAI;AACA+D,cAAAA,OAAO,GAAG,MAAM,KAAKlC,IAAL,CAAU,aAAV,EAAyB,EAAzB,CAAhB;AACH,aAFD,CAGA,OAAO7B,KAAP,EAAc,CAAG;AACpB;;AACD,cAAI+D,OAAO,IAAI,IAAf,EAAqB;AACjB,gBAAI;AACA,qBAAOjG,OAAO,CAAC0G,UAAU,CAAC7F,SAAS,CAAC0D,IAAV,CAAe0B,OAAf,EAAwBY,QAAxB,EAAD,CAAX,CAAd;AACH,aAFD,CAGA,OAAO3E,KAAP,EAAc,CAAG;AACpB;;AACDhC,UAAAA,MAAM,CAACyB,MAAM,CAACmF,SAAP,CAAiB,0BAAjB,EAA6CrF,MAAM,CAAC8B,MAAP,CAAcwD,aAA3D,CAAD,CAAN;AACH,SAlByB,CAAhB,EAkBN,CAlBM,CAAV;AAmBH,OApBa,CAAd;AAqBA,YAAMH,KAAN;AACH,KAvCqB,CAwCtB;;;AACA,QAAI,CAACJ,GAAL,EAAU;AACNA,MAAAA,GAAG,GAAGrF,SAAS,CAAC,KAAKwB,WAAN,EAAmB,YAAnB,CAAT,EAAN;AACH;;AACD,QAAI,OAAQ6D,GAAR,KAAiB,QAArB,EAA+B;AAC3B,WAAKQ,UAAL,GAAkBC,MAAM,CAACC,MAAP,CAAc;AAC5BV,QAAAA,GAAG,EAAEA;AADuB,OAAd,CAAlB;AAGH,KAJD,MAKK;AACD,WAAKQ,UAAL,GAAkBC,MAAM,CAACC,MAAP,CAAc7F,WAAW,CAACmF,GAAD,CAAzB,CAAlB;AACH;;AACD,SAAKW,OAAL,GAAe,EAAf;AACH;;AACD,SAAOC,UAAP,GAAoB;AAChB,WAAO,WAAW,iBAAlB;AACH;;AACDC,EAAAA,SAAS,CAACvE,cAAD,EAAiB;AACtB,WAAO,IAAIJ,aAAJ,CAAkBD,iBAAlB,EAAqC,IAArC,EAA2CK,cAA3C,CAAP;AACH;;AACDwE,EAAAA,kBAAkB,CAACxE,cAAD,EAAiB;AAC/B,WAAO,KAAKuE,SAAL,CAAevE,cAAf,EAA+BY,gBAA/B,EAAP;AACH;;AACD6D,EAAAA,YAAY,GAAG;AACX,WAAO,KAAKxD,IAAL,CAAU,cAAV,EAA0B,EAA1B,EAA8BrD,IAA9B,CAAoCsD,QAAD,IAAc;AACpD,aAAOA,QAAQ,CAACwD,GAAT,CAAcC,CAAD,IAAO,KAAKvE,SAAL,CAAeC,OAAf,CAAuBsE,CAAvB,CAApB,CAAP;AACH,KAFM,CAAP;AAGH;;AACD1D,EAAAA,IAAI,CAAC2D,MAAD,EAASC,MAAT,EAAiB;AACjB,QAAIC,OAAO,GAAG;AACVF,MAAAA,MAAM,EAAEA,MADE;AAEVC,MAAAA,MAAM,EAAEA,MAFE;AAGVE,MAAAA,EAAE,EAAG,KAAKV,OAAL,EAHK;AAIVW,MAAAA,OAAO,EAAE;AAJC,KAAd;AAMA,SAAKC,IAAL,CAAU,OAAV,EAAmB;AACfC,MAAAA,MAAM,EAAE,SADO;AAEfJ,MAAAA,OAAO,EAAE3G,QAAQ,CAAC2G,OAAD,CAFF;AAGf/E,MAAAA,QAAQ,EAAE;AAHK,KAAnB;AAKA,WAAOtB,SAAS,CAAC,KAAKyF,UAAN,EAAkBiB,IAAI,CAACC,SAAL,CAAeN,OAAf,CAAlB,EAA2C5F,SAA3C,CAAT,CAA+DtB,IAA/D,CAAqEF,MAAD,IAAY;AACnF,WAAKuH,IAAL,CAAU,OAAV,EAAmB;AACfC,QAAAA,MAAM,EAAE,UADO;AAEfJ,QAAAA,OAAO,EAAEA,OAFM;AAGfO,QAAAA,QAAQ,EAAE3H,MAHK;AAIfqC,QAAAA,QAAQ,EAAE;AAJK,OAAnB;AAMA,aAAOrC,MAAP;AACH,KARM,EAQH0B,KAAD,IAAW;AACV,WAAK6F,IAAL,CAAU,OAAV,EAAmB;AACfC,QAAAA,MAAM,EAAE,UADO;AAEf9F,QAAAA,KAAK,EAAEA,KAFQ;AAGf0F,QAAAA,OAAO,EAAEA,OAHM;AAIf/E,QAAAA,QAAQ,EAAE;AAJK,OAAnB;AAMA,YAAMX,KAAN;AACH,KAhBM,CAAP;AAiBH;;AACDkG,EAAAA,cAAc,CAACV,MAAD,EAASC,MAAT,EAAiB;AAC3B,YAAQD,MAAR;AACI,WAAK,gBAAL;AACI,eAAO,CAAC,iBAAD,EAAoB,EAApB,CAAP;;AACJ,WAAK,aAAL;AACI,eAAO,CAAC,cAAD,EAAiB,EAAjB,CAAP;;AACJ,WAAK,YAAL;AACI,eAAO,CAAC,gBAAD,EAAmB,CAACnF,YAAY,CAACoF,MAAM,CAACxE,OAAR,CAAb,EAA+BwE,MAAM,CAACU,QAAtC,CAAnB,CAAP;;AACJ,WAAK,qBAAL;AACI,eAAO,CAAC,yBAAD,EAA4B,CAAC9F,YAAY,CAACoF,MAAM,CAACxE,OAAR,CAAb,EAA+BwE,MAAM,CAACU,QAAtC,CAA5B,CAAP;;AACJ,WAAK,SAAL;AACI,eAAO,CAAC,aAAD,EAAgB,CAAC9F,YAAY,CAACoF,MAAM,CAACxE,OAAR,CAAb,EAA+BwE,MAAM,CAACU,QAAtC,CAAhB,CAAP;;AACJ,WAAK,cAAL;AACI,eAAO,CAAC,kBAAD,EAAqB,CAAC9F,YAAY,CAACoF,MAAM,CAACxE,OAAR,CAAb,EAA+BwE,MAAM,CAACW,QAAtC,EAAgDX,MAAM,CAACU,QAAvD,CAArB,CAAP;;AACJ,WAAK,iBAAL;AACI,eAAO,CAAC,wBAAD,EAA2B,CAACV,MAAM,CAACY,iBAAR,CAA3B,CAAP;;AACJ,WAAK,UAAL;AACI,YAAIZ,MAAM,CAACU,QAAX,EAAqB;AACjB,iBAAO,CAAC,sBAAD,EAAyB,CAACV,MAAM,CAACU,QAAR,EAAkB,CAAC,CAACV,MAAM,CAACa,mBAA3B,CAAzB,CAAP;AACH,SAFD,MAGK,IAAIb,MAAM,CAACc,SAAX,EAAsB;AACvB,iBAAO,CAAC,oBAAD,EAAuB,CAACd,MAAM,CAACc,SAAR,EAAmB,CAAC,CAACd,MAAM,CAACa,mBAA5B,CAAvB,CAAP;AACH;;AACD,eAAO,IAAP;;AACJ,WAAK,gBAAL;AACI,eAAO,CAAC,0BAAD,EAA6B,CAACb,MAAM,CAAChC,eAAR,CAA7B,CAAP;;AACJ,WAAK,uBAAL;AACI,eAAO,CAAC,2BAAD,EAA8B,CAACgC,MAAM,CAAChC,eAAR,CAA9B,CAAP;;AACJ,WAAK,MAAL;AAAa;AACT,gBAAMd,kBAAkB,GAAG1D,SAAS,CAAC,KAAKwB,WAAN,EAAmB,oBAAnB,CAApC;AACA,iBAAO,CAAC,UAAD,EAAa,CAACkC,kBAAkB,CAAC8C,MAAM,CAACxD,WAAR,EAAqB;AAAEI,YAAAA,IAAI,EAAE;AAAR,WAArB,CAAnB,EAAyDoD,MAAM,CAACU,QAAhE,CAAb,CAAP;AACH;;AACD,WAAK,aAAL;AAAoB;AAChB,gBAAMxD,kBAAkB,GAAG1D,SAAS,CAAC,KAAKwB,WAAN,EAAmB,oBAAnB,CAApC;AACA,iBAAO,CAAC,iBAAD,EAAoB,CAACkC,kBAAkB,CAAC8C,MAAM,CAACxD,WAAR,EAAqB;AAAEI,YAAAA,IAAI,EAAE;AAAR,WAArB,CAAnB,CAApB,CAAP;AACH;;AACD,WAAK,SAAL;AACI,YAAIoD,MAAM,CAACe,MAAP,IAAiBf,MAAM,CAACe,MAAP,CAAcvF,OAAd,IAAyB,IAA9C,EAAoD;AAChDwE,UAAAA,MAAM,CAACe,MAAP,CAAcvF,OAAd,GAAwBZ,YAAY,CAACoF,MAAM,CAACe,MAAP,CAAcvF,OAAf,CAApC;AACH;;AACD,eAAO,CAAC,aAAD,EAAgB,CAACwE,MAAM,CAACe,MAAR,CAAhB,CAAP;;AACJ;AACI;AAzCR;;AA2CA,WAAO,IAAP;AACH;;AACDC,EAAAA,OAAO,CAACjB,MAAD,EAASC,MAAT,EAAiB;AACpB,UAAMiB,IAAI,GAAG,KAAKR,cAAL,CAAoBV,MAApB,EAA4BC,MAA5B,CAAb;;AACA,QAAIiB,IAAI,IAAI,IAAZ,EAAkB;AACdjH,MAAAA,MAAM,CAAC2B,UAAP,CAAkBoE,MAAM,GAAG,kBAA3B,EAA+CjG,MAAM,CAAC8B,MAAP,CAAcsF,eAA7D,EAA8E;AAAEpF,QAAAA,SAAS,EAAEiE;AAAb,OAA9E;AACH,KAJmB,CAKpB;;;AACA,QAAIA,MAAM,KAAK,iBAAf,EAAkC;AAC9B,aAAO,KAAK3D,IAAL,CAAU6E,IAAI,CAAC,CAAD,CAAd,EAAmBA,IAAI,CAAC,CAAD,CAAvB,EAA4BlD,KAA5B,CAAmCxD,KAAD,IAAW;AAChD,YAAIA,KAAK,CAAC6C,YAAV,EAAwB;AACpB;AACA,cAAI7C,KAAK,CAAC6C,YAAN,CAAmBC,OAAnB,CAA2B,oBAA3B,IAAmD,CAAvD,EAA0D;AACtDrD,YAAAA,MAAM,CAAC2B,UAAP,CAAkB,oBAAlB,EAAwC7B,MAAM,CAAC8B,MAAP,CAAc0B,kBAAtD,EAA0E,EAA1E;AACH,WAJmB,CAKpB;;;AACA,cAAI/C,KAAK,CAAC6C,YAAN,CAAmBC,OAAnB,CAA2B,eAA3B,IAA8C,CAAlD,EAAqD;AACjDrD,YAAAA,MAAM,CAAC2B,UAAP,CAAkB,6BAAlB,EAAiD7B,MAAM,CAAC8B,MAAP,CAAc2B,aAA/D,EAA8E,EAA9E;AACH,WARmB,CASpB;;;AACA,cAAIhD,KAAK,CAAC6C,YAAN,CAAmBC,OAAnB,CAA2B,qCAA3B,IAAoE,CAAxE,EAA2E;AACvErD,YAAAA,MAAM,CAAC2B,UAAP,CAAkB,yBAAlB,EAA6C7B,MAAM,CAAC8B,MAAP,CAAc4B,uBAA3D,EAAoF,EAApF;AACH;AACJ;;AACD,cAAMjD,KAAN;AACH,OAhBM,CAAP;AAiBH;;AACD,WAAO,KAAK6B,IAAL,CAAU6E,IAAI,CAAC,CAAD,CAAd,EAAmBA,IAAI,CAAC,CAAD,CAAvB,CAAP;AACH;;AACDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,QAAIA,KAAK,CAACC,GAAN,KAAc,SAAlB,EAA6B;AACzB,WAAKC,aAAL;AACH;;AACD,UAAMH,WAAN,CAAkBC,KAAlB;AACH;;AACDE,EAAAA,aAAa,GAAG;AACZ,QAAI,KAAKC,cAAL,IAAuB,IAA3B,EAAiC;AAC7B;AACH;;AACD,QAAIC,IAAI,GAAG,IAAX;AACA,QAAIC,aAAa,GAAG,KAAKrF,IAAL,CAAU,iCAAV,EAA6C,EAA7C,CAApB;AACA,SAAKmF,cAAL,GAAsBE,aAAtB;AACAA,IAAAA,aAAa,CAAC1I,IAAd,CAAmB,UAAU2I,QAAV,EAAoB;AACnC,eAAS7H,IAAT,GAAgB;AACZ2H,QAAAA,IAAI,CAACpF,IAAL,CAAU,sBAAV,EAAkC,CAACsF,QAAD,CAAlC,EAA8C3I,IAA9C,CAAmD,UAAU4I,MAAV,EAAkB;AACjE,cAAIH,IAAI,CAACD,cAAL,IAAuBE,aAA3B,EAA0C;AACtC,mBAAO,IAAP;AACH;;AACD,cAAIG,GAAG,GAAGtJ,OAAO,CAACD,OAAR,EAAV;AACAsJ,UAAAA,MAAM,CAACE,OAAP,CAAe,UAAU1E,IAAV,EAAgB;AAC3B;AACAqE,YAAAA,IAAI,CAACM,QAAL,CAAc,OAAO3E,IAAI,CAACtC,WAAL,EAArB,IAA2C,SAA3C;AACA+G,YAAAA,GAAG,GAAGA,GAAG,CAAC7I,IAAJ,CAAS,YAAY;AACvB,qBAAOyI,IAAI,CAAC7D,cAAL,CAAoBR,IAApB,EAA0BpE,IAA1B,CAA+B,UAAUiE,EAAV,EAAc;AAChDwE,gBAAAA,IAAI,CAACpB,IAAL,CAAU,SAAV,EAAqBpD,EAArB;AACA,uBAAO,IAAP;AACH,eAHM,CAAP;AAIH,aALK,CAAN;AAMH,WATD;AAUA,iBAAO4E,GAAG,CAAC7I,IAAJ,CAAS,YAAY;AACxB,mBAAOmB,KAAK,CAAC,IAAD,CAAZ;AACH,WAFM,CAAP;AAGH,SAlBD,EAkBGnB,IAlBH,CAkBQ,YAAY;AAChB,cAAIyI,IAAI,CAACD,cAAL,IAAuBE,aAA3B,EAA0C;AACtCD,YAAAA,IAAI,CAACpF,IAAL,CAAU,qBAAV,EAAiC,CAACsF,QAAD,CAAjC;AACA;AACH;;AACDtH,UAAAA,UAAU,CAAC,YAAY;AAAEP,YAAAA,IAAI;AAAK,WAAxB,EAA0B,CAA1B,CAAV;AACA,iBAAO,IAAP;AACH,SAzBD,EAyBGkE,KAzBH,CAyBUxD,KAAD,IAAW,CAAG,CAzBvB;AA0BH;;AACDV,MAAAA,IAAI;AACJ,aAAO6H,QAAP;AACH,KA/BD,EA+BG3D,KA/BH,CA+BUxD,KAAD,IAAW,CAAG,CA/BvB;AAgCH;;AACDwH,EAAAA,UAAU,CAACX,KAAD,EAAQ;AACd,QAAIA,KAAK,CAACC,GAAN,KAAc,SAAd,IAA2B,KAAKW,aAAL,CAAmB,SAAnB,MAAkC,CAAjE,EAAoE;AAChE,WAAKT,cAAL,GAAsB,IAAtB;AACH;;AACD,UAAMQ,UAAN,CAAiBX,KAAjB;AACH,GA/N6C,CAgO9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAOlE,kBAAP,CAA0BV,WAA1B,EAAuCyF,UAAvC,EAAmD;AAC/C;AACA,UAAMC,OAAO,GAAGxI,WAAW,CAACgF,sBAAD,CAA3B;;AACA,QAAIuD,UAAJ,EAAgB;AACZ,WAAK,IAAIE,GAAT,IAAgBF,UAAhB,EAA4B;AACxB,YAAIA,UAAU,CAACE,GAAD,CAAd,EAAqB;AACjBD,UAAAA,OAAO,CAACC,GAAD,CAAP,GAAe,IAAf;AACH;AACJ;AACJ;;AACD9I,IAAAA,eAAe,CAACmD,WAAD,EAAc0F,OAAd,CAAf;AACA,UAAMrJ,MAAM,GAAG,EAAf,CAX+C,CAY/C;;AACA,KAAC,UAAD,EAAa,UAAb,EAAyB,OAAzB,EAAkC,OAAlC,EAA2CgJ,OAA3C,CAAmD,UAAUM,GAAV,EAAe;AAC9D,UAAI3F,WAAW,CAAC2F,GAAD,CAAX,IAAoB,IAAxB,EAA8B;AAC1B;AACH;;AACD,YAAM/J,KAAK,GAAGgB,QAAQ,CAACoD,WAAW,CAAC2F,GAAD,CAAZ,CAAtB;;AACA,UAAIA,GAAG,KAAK,UAAZ,EAAwB;AACpBA,QAAAA,GAAG,GAAG,KAAN;AACH;;AACDtJ,MAAAA,MAAM,CAACsJ,GAAD,CAAN,GAAc/J,KAAd;AACH,KATD;AAUA,KAAC,MAAD,EAAS,IAAT,EAAe,MAAf,EAAuByJ,OAAvB,CAA+B,UAAUM,GAAV,EAAe;AAC1C,UAAI3F,WAAW,CAAC2F,GAAD,CAAX,IAAoB,IAAxB,EAA8B;AAC1B;AACH;;AACDtJ,MAAAA,MAAM,CAACsJ,GAAD,CAAN,GAAchJ,OAAO,CAACqD,WAAW,CAAC2F,GAAD,CAAZ,CAArB;AACH,KALD;AAMA,WAAOtJ,MAAP;AACH;;AAvQ6C","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue } from \"@ethersproject/bytes\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nfunction timer(timeout) {\n    return new Promise(function (resolve) {\n        setTimeout(function () {\n            resolve();\n        }, timeout);\n    });\n}\nfunction getResult(payload) {\n    if (payload.error) {\n        // @TODO: not any\n        let error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n    return payload.result;\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n    constructor(constructorGuard, provider, addressOrIndex) {\n        logger.checkNew(new.target, JsonRpcSigner);\n        super();\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n        defineReadOnly(this, \"provider\", provider);\n        if (addressOrIndex == null) {\n            addressOrIndex = 0;\n        }\n        if (typeof (addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n        }\n        else if (typeof (addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n    connect(provider) {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n    connectUnchecked() {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n    getAddress() {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index]);\n        });\n    }\n    sendUncheckedTransaction(transaction) {\n        transaction = shallowCopy(transaction);\n        let fromAddress = this.getAddress().then((address) => {\n            if (address) {\n                address = address.toLowerCase();\n            }\n            return address;\n        });\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            let estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n        return Promise.all([\n            resolveProperties(transaction),\n            fromAddress\n        ]).then((results) => {\n            let tx = results[0];\n            let hexTx = this.provider.constructor.hexlifyTransaction(tx);\n            hexTx.from = results[1];\n            return this.provider.send(\"eth_sendTransaction\", [hexTx]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (error.responseText) {\n                    // See: JsonRpcProvider.sendTransaction (@TODO: Expose a ._throwError??)\n                    if (error.responseText.indexOf(\"insufficient funds\") >= 0) {\n                        logger.throwError(\"insufficient funds\", Logger.errors.INSUFFICIENT_FUNDS, {\n                            transaction: tx\n                        });\n                    }\n                    if (error.responseText.indexOf(\"nonce too low\") >= 0) {\n                        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n                            transaction: tx\n                        });\n                    }\n                    if (error.responseText.indexOf(\"replacement transaction underpriced\") >= 0) {\n                        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n                            transaction: tx\n                        });\n                    }\n                }\n                throw error;\n            });\n        });\n    }\n    signTransaction(transaction) {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n    sendTransaction(transaction) {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return poll(() => {\n                return this.provider.getTransaction(hash).then((tx) => {\n                    if (tx === null) {\n                        return undefined;\n                    }\n                    return this.provider._wrapTransaction(tx, hash);\n                });\n            }, { onceBlock: this.provider }).catch((error) => {\n                error.transactionHash = hash;\n                throw error;\n            });\n        });\n    }\n    signMessage(message) {\n        let data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\n        return this.getAddress().then((address) => {\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n        });\n    }\n    unlock(password) {\n        let provider = this.provider;\n        return this.getAddress().then(function (address) {\n            return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n        });\n    }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction) {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return {\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\nconst allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n    constructor(url, network) {\n        logger.checkNew(new.target, JsonRpcProvider);\n        const getNetwork = getStatic((new.target), \"getNetwork\");\n        // One parameter, but it is a network name, so swap it with the URL\n        if (typeof (url) === \"string\") {\n            if (network === null) {\n                const checkNetwork = getNetwork(url);\n                network = checkNetwork;\n                url = null;\n            }\n        }\n        if (network) {\n            // The network has been specified explicitly, we can use it\n            super(network);\n        }\n        else {\n            // The network is unknown, query the JSON-RPC for it\n            const ready = new Promise((resolve, reject) => {\n                setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n                    let chainId = null;\n                    try {\n                        chainId = yield this.send(\"eth_chainId\", []);\n                    }\n                    catch (error) {\n                        try {\n                            chainId = yield this.send(\"net_version\", []);\n                        }\n                        catch (error) { }\n                    }\n                    if (chainId != null) {\n                        try {\n                            return resolve(getNetwork(BigNumber.from(chainId).toNumber()));\n                        }\n                        catch (error) { }\n                    }\n                    reject(logger.makeError(\"could not detect network\", Logger.errors.NETWORK_ERROR));\n                }), 0);\n            });\n            super(ready);\n        }\n        // Default URL\n        if (!url) {\n            url = getStatic(this.constructor, \"defaultUrl\")();\n        }\n        if (typeof (url) === \"string\") {\n            this.connection = Object.freeze({\n                url: url\n            });\n        }\n        else {\n            this.connection = Object.freeze(shallowCopy(url));\n        }\n        this._nextId = 42;\n    }\n    static defaultUrl() {\n        return \"http:/\" + \"/localhost:8545\";\n    }\n    getSigner(addressOrIndex) {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n    getUncheckedSigner(addressOrIndex) {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n    listAccounts() {\n        return this.send(\"eth_accounts\", []).then((accounts) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n    send(method, params) {\n        let request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n        return fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n            return result;\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n            throw error;\n        });\n    }\n    prepareRequest(method, params) {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [\"eth_blockNumber\", []];\n            case \"getGasPrice\":\n                return [\"eth_gasPrice\", []];\n            case \"getBalance\":\n                return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n            case \"getTransactionCount\":\n                return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n            case \"getCode\":\n                return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n            case \"getStorageAt\":\n                return [\"eth_getStorageAt\", [getLowerCase(params.address), params.position, params.blockTag]];\n            case \"sendTransaction\":\n                return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n                }\n                else if (params.blockHash) {\n                    return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n                }\n                return null;\n            case \"getTransaction\":\n                return [\"eth_getTransactionByHash\", [params.transactionHash]];\n            case \"getTransactionReceipt\":\n                return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n            case \"call\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_call\", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];\n            }\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, { from: true })]];\n            }\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [\"eth_getLogs\", [params.filter]];\n            default:\n                break;\n        }\n        return null;\n    }\n    perform(method, params) {\n        const args = this.prepareRequest(method, params);\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        // We need a little extra logic to process errors from sendTransaction\n        if (method === \"sendTransaction\") {\n            return this.send(args[0], args[1]).catch((error) => {\n                if (error.responseText) {\n                    // \"insufficient funds for gas * price + value\"\n                    if (error.responseText.indexOf(\"insufficient funds\") > 0) {\n                        logger.throwError(\"insufficient funds\", Logger.errors.INSUFFICIENT_FUNDS, {});\n                    }\n                    // \"nonce too low\"\n                    if (error.responseText.indexOf(\"nonce too low\") > 0) {\n                        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {});\n                    }\n                    // \"replacement transaction underpriced\"\n                    if (error.responseText.indexOf(\"replacement transaction underpriced\") > 0) {\n                        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {});\n                    }\n                }\n                throw error;\n            });\n        }\n        return this.send(args[0], args[1]);\n    }\n    _startEvent(event) {\n        if (event.tag === \"pending\") {\n            this._startPending();\n        }\n        super._startEvent(event);\n    }\n    _startPending() {\n        if (this._pendingFilter != null) {\n            return;\n        }\n        let self = this;\n        let pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n        pendingFilter.then(function (filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n                    if (self._pendingFilter != pendingFilter) {\n                        return null;\n                    }\n                    let seq = Promise.resolve();\n                    hashes.forEach(function (hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function () {\n                            return self.getTransaction(hash).then(function (tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n                    return seq.then(function () {\n                        return timer(1000);\n                    });\n                }).then(function () {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [filterId]);\n                        return;\n                    }\n                    setTimeout(function () { poll(); }, 0);\n                    return null;\n                }).catch((error) => { });\n            }\n            poll();\n            return filterId;\n        }).catch((error) => { });\n    }\n    _stopEvent(event) {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction, allowExtra) {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (let key in allowExtra) {\n                if (allowExtra[key]) {\n                    allowed[key] = true;\n                }\n            }\n        }\n        checkProperties(transaction, allowed);\n        const result = {};\n        // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n        [\"gasLimit\", \"gasPrice\", \"nonce\", \"value\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            const value = hexValue(transaction[key]);\n            if (key === \"gasLimit\") {\n                key = \"gas\";\n            }\n            result[key] = value;\n        });\n        [\"from\", \"to\", \"data\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            result[key] = hexlify(transaction[key]);\n        });\n        return result;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}