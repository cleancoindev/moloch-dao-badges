{"ast":null,"code":"'use strict';\n\nconst isOptionObject = require('is-plain-obj');\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst propIsEnumerable = Object.propertyIsEnumerable;\n\nconst defineProperty = (obj, name, value) => Object.defineProperty(obj, name, {\n  value,\n  writable: true,\n  enumerable: true,\n  configurable: true\n});\n\nconst globalThis = this;\nconst defaultMergeOpts = {\n  concatArrays: false\n};\n\nconst getEnumerableOwnPropertyKeys = value => {\n  const keys = [];\n\n  for (const key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      keys.push(key);\n    }\n  }\n  /* istanbul ignore else  */\n\n\n  if (Object.getOwnPropertySymbols) {\n    const symbols = Object.getOwnPropertySymbols(value);\n\n    for (let i = 0; i < symbols.length; i++) {\n      if (propIsEnumerable.call(value, symbols[i])) {\n        keys.push(symbols[i]);\n      }\n    }\n  }\n\n  return keys;\n};\n\nfunction clone(value) {\n  if (Array.isArray(value)) {\n    return cloneArray(value);\n  }\n\n  if (isOptionObject(value)) {\n    return cloneOptionObject(value);\n  }\n\n  return value;\n}\n\nfunction cloneArray(array) {\n  const result = array.slice(0, 0);\n  getEnumerableOwnPropertyKeys(array).forEach(key => {\n    defineProperty(result, key, clone(array[key]));\n  });\n  return result;\n}\n\nfunction cloneOptionObject(obj) {\n  const result = Object.getPrototypeOf(obj) === null ? Object.create(null) : {};\n  getEnumerableOwnPropertyKeys(obj).forEach(key => {\n    defineProperty(result, key, clone(obj[key]));\n  });\n  return result;\n}\n/**\n * @param merged {already cloned}\n * @return {cloned Object}\n */\n\n\nconst mergeKeys = (merged, source, keys, mergeOpts) => {\n  keys.forEach(key => {\n    // Do not recurse into prototype chain of merged\n    if (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {\n      defineProperty(merged, key, merge(merged[key], source[key], mergeOpts));\n    } else {\n      defineProperty(merged, key, clone(source[key]));\n    }\n  });\n  return merged;\n};\n/**\n * @param merged {already cloned}\n * @return {cloned Object}\n *\n * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)\n */\n\n\nconst concatArrays = (merged, source, mergeOpts) => {\n  let result = merged.slice(0, 0);\n  let resultIndex = 0;\n  [merged, source].forEach(array => {\n    const indices = []; // `result.concat(array)` with cloning\n\n    for (let k = 0; k < array.length; k++) {\n      if (!hasOwnProperty.call(array, k)) {\n        continue;\n      }\n\n      indices.push(String(k));\n\n      if (array === merged) {\n        // Already cloned\n        defineProperty(result, resultIndex++, array[k]);\n      } else {\n        defineProperty(result, resultIndex++, clone(array[k]));\n      }\n    } // Merge non-index keys\n\n\n    result = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(key => {\n      return indices.indexOf(key) === -1;\n    }), mergeOpts);\n  });\n  return result;\n};\n/**\n * @param merged {already cloned}\n * @return {cloned Object}\n */\n\n\nfunction merge(merged, source, mergeOpts) {\n  if (mergeOpts.concatArrays && Array.isArray(merged) && Array.isArray(source)) {\n    return concatArrays(merged, source, mergeOpts);\n  }\n\n  if (!isOptionObject(source) || !isOptionObject(merged)) {\n    return clone(source);\n  }\n\n  return mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), mergeOpts);\n}\n\nmodule.exports = function () {\n  const mergeOpts = merge(clone(defaultMergeOpts), this !== globalThis && this || {}, defaultMergeOpts);\n  let merged = {\n    foobar: {}\n  };\n\n  for (let i = 0; i < arguments.length; i++) {\n    const option = arguments[i];\n\n    if (option === undefined) {\n      continue;\n    }\n\n    if (!isOptionObject(option)) {\n      throw new TypeError('`' + option + '` is not an Option Object');\n    }\n\n    merged = merge(merged, {\n      foobar: option\n    }, mergeOpts);\n  }\n\n  return merged.foobar;\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/libp2p-keychain/node_modules/merge-options/index.js"],"names":["isOptionObject","require","hasOwnProperty","Object","prototype","propIsEnumerable","propertyIsEnumerable","defineProperty","obj","name","value","writable","enumerable","configurable","globalThis","defaultMergeOpts","concatArrays","getEnumerableOwnPropertyKeys","keys","key","call","push","getOwnPropertySymbols","symbols","i","length","clone","Array","isArray","cloneArray","cloneOptionObject","array","result","slice","forEach","getPrototypeOf","create","mergeKeys","merged","source","mergeOpts","merge","resultIndex","indices","k","String","filter","indexOf","module","exports","foobar","arguments","option","undefined","TypeError"],"mappings":"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","sourcesContent":["'use strict';\nconst isOptionObject = require('is-plain-obj');\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst propIsEnumerable = Object.propertyIsEnumerable;\nconst defineProperty = (obj, name, value) => Object.defineProperty(obj, name, {\n\tvalue,\n\twritable: true,\n\tenumerable: true,\n\tconfigurable: true\n});\n\nconst globalThis = this;\nconst defaultMergeOpts = {\n\tconcatArrays: false\n};\n\nconst getEnumerableOwnPropertyKeys = value => {\n\tconst keys = [];\n\n\tfor (const key in value) {\n\t\tif (hasOwnProperty.call(value, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\n\t/* istanbul ignore else  */\n\tif (Object.getOwnPropertySymbols) {\n\t\tconst symbols = Object.getOwnPropertySymbols(value);\n\n\t\tfor (let i = 0; i < symbols.length; i++) {\n\t\t\tif (propIsEnumerable.call(value, symbols[i])) {\n\t\t\t\tkeys.push(symbols[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn keys;\n};\n\nfunction clone(value) {\n\tif (Array.isArray(value)) {\n\t\treturn cloneArray(value);\n\t}\n\n\tif (isOptionObject(value)) {\n\t\treturn cloneOptionObject(value);\n\t}\n\n\treturn value;\n}\n\nfunction cloneArray(array) {\n\tconst result = array.slice(0, 0);\n\n\tgetEnumerableOwnPropertyKeys(array).forEach(key => {\n\t\tdefineProperty(result, key, clone(array[key]));\n\t});\n\n\treturn result;\n}\n\nfunction cloneOptionObject(obj) {\n\tconst result = Object.getPrototypeOf(obj) === null ? Object.create(null) : {};\n\n\tgetEnumerableOwnPropertyKeys(obj).forEach(key => {\n\t\tdefineProperty(result, key, clone(obj[key]));\n\t});\n\n\treturn result;\n}\n\n/**\n * @param merged {already cloned}\n * @return {cloned Object}\n */\nconst mergeKeys = (merged, source, keys, mergeOpts) => {\n\tkeys.forEach(key => {\n\t\t// Do not recurse into prototype chain of merged\n\t\tif (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {\n\t\t\tdefineProperty(merged, key, merge(merged[key], source[key], mergeOpts));\n\t\t} else {\n\t\t\tdefineProperty(merged, key, clone(source[key]));\n\t\t}\n\t});\n\n\treturn merged;\n};\n\n/**\n * @param merged {already cloned}\n * @return {cloned Object}\n *\n * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)\n */\nconst concatArrays = (merged, source, mergeOpts) => {\n\tlet result = merged.slice(0, 0);\n\tlet resultIndex = 0;\n\n\t[merged, source].forEach(array => {\n\t\tconst indices = [];\n\n\t\t// `result.concat(array)` with cloning\n\t\tfor (let k = 0; k < array.length; k++) {\n\t\t\tif (!hasOwnProperty.call(array, k)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tindices.push(String(k));\n\n\t\t\tif (array === merged) {\n\t\t\t\t// Already cloned\n\t\t\t\tdefineProperty(result, resultIndex++, array[k]);\n\t\t\t} else {\n\t\t\t\tdefineProperty(result, resultIndex++, clone(array[k]));\n\t\t\t}\n\t\t}\n\n\t\t// Merge non-index keys\n\t\tresult = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(key => {\n\t\t\treturn indices.indexOf(key) === -1;\n\t\t}), mergeOpts);\n\t});\n\n\treturn result;\n};\n\n/**\n * @param merged {already cloned}\n * @return {cloned Object}\n */\nfunction merge(merged, source, mergeOpts) {\n\tif (mergeOpts.concatArrays && Array.isArray(merged) && Array.isArray(source)) {\n\t\treturn concatArrays(merged, source, mergeOpts);\n\t}\n\n\tif (!isOptionObject(source) || !isOptionObject(merged)) {\n\t\treturn clone(source);\n\t}\n\n\treturn mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), mergeOpts);\n}\n\nmodule.exports = function () {\n\tconst mergeOpts = merge(clone(defaultMergeOpts), (this !== globalThis && this) || {}, defaultMergeOpts);\n\tlet merged = {foobar: {}};\n\n\tfor (let i = 0; i < arguments.length; i++) {\n\t\tconst option = arguments[i];\n\n\t\tif (option === undefined) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!isOptionObject(option)) {\n\t\t\tthrow new TypeError('`' + option + '` is not an Option Object');\n\t\t}\n\n\t\tmerged = merge(merged, {foobar: option}, mergeOpts);\n\t}\n\n\treturn merged.foobar;\n};\n"]},"metadata":{},"sourceType":"script"}