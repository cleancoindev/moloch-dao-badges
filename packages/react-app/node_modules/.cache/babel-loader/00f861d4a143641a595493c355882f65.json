{"ast":null,"code":"'use strict';\n\nconst bsplit = require('buffer-split');\n\nconst errcode = require('err-code');\n/**\n * Checks a record and ensures it is still valid.\n * It runs the needed validators.\n *\n * @param {Object} validators\n * @param {Record} record\n * @param {function(Error)} callback\n * @returns {undefined}\n */\n\n\nconst verifyRecord = (validators, record, callback) => {\n  const key = record.key;\n  const parts = bsplit(key, Buffer.from('/'));\n\n  if (parts.length < 3) {\n    // No validator available\n    return callback();\n  }\n\n  const validator = validators[parts[1].toString()];\n\n  if (!validator) {\n    const errMsg = `Invalid record keytype`;\n    return callback(errcode(new Error(errMsg), 'ERR_INVALID_RECORD_KEY_TYPE'));\n  }\n\n  validator.func(key, record.value, callback);\n};\n\nmodule.exports = {\n  verifyRecord: verifyRecord,\n  validators: require('./validators')\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/libp2p-kad-dht/node_modules/libp2p-record/src/validator.js"],"names":["bsplit","require","errcode","verifyRecord","validators","record","callback","key","parts","Buffer","from","length","validator","toString","errMsg","Error","func","value","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,cAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;AAEA;;;;;;;;;;;AASA,MAAME,YAAY,GAAG,CAACC,UAAD,EAAaC,MAAb,EAAqBC,QAArB,KAAkC;AACrD,QAAMC,GAAG,GAAGF,MAAM,CAACE,GAAnB;AACA,QAAMC,KAAK,GAAGR,MAAM,CAACO,GAAD,EAAME,MAAM,CAACC,IAAP,CAAY,GAAZ,CAAN,CAApB;;AAEA,MAAIF,KAAK,CAACG,MAAN,GAAe,CAAnB,EAAsB;AACpB;AACA,WAAOL,QAAQ,EAAf;AACD;;AAED,QAAMM,SAAS,GAAGR,UAAU,CAACI,KAAK,CAAC,CAAD,CAAL,CAASK,QAAT,EAAD,CAA5B;;AAEA,MAAI,CAACD,SAAL,EAAgB;AACd,UAAME,MAAM,GAAI,wBAAhB;AAEA,WAAOR,QAAQ,CAACJ,OAAO,CAAC,IAAIa,KAAJ,CAAUD,MAAV,CAAD,EAAoB,6BAApB,CAAR,CAAf;AACD;;AAEDF,EAAAA,SAAS,CAACI,IAAV,CAAeT,GAAf,EAAoBF,MAAM,CAACY,KAA3B,EAAkCX,QAAlC;AACD,CAlBD;;AAoBAY,MAAM,CAACC,OAAP,GAAiB;AACfhB,EAAAA,YAAY,EAAEA,YADC;AAEfC,EAAAA,UAAU,EAAEH,OAAO,CAAC,cAAD;AAFJ,CAAjB","sourcesContent":["'use strict'\n\nconst bsplit = require('buffer-split')\nconst errcode = require('err-code')\n\n/**\n * Checks a record and ensures it is still valid.\n * It runs the needed validators.\n *\n * @param {Object} validators\n * @param {Record} record\n * @param {function(Error)} callback\n * @returns {undefined}\n */\nconst verifyRecord = (validators, record, callback) => {\n  const key = record.key\n  const parts = bsplit(key, Buffer.from('/'))\n\n  if (parts.length < 3) {\n    // No validator available\n    return callback()\n  }\n\n  const validator = validators[parts[1].toString()]\n\n  if (!validator) {\n    const errMsg = `Invalid record keytype`\n\n    return callback(errcode(new Error(errMsg), 'ERR_INVALID_RECORD_KEY_TYPE'))\n  }\n\n  validator.func(key, record.value, callback)\n}\n\nmodule.exports = {\n  verifyRecord: verifyRecord,\n  validators: require('./validators')\n}\n"]},"metadata":{},"sourceType":"script"}