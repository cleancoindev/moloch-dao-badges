{"ast":null,"code":"/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nclass Rabin {\n  /**\n   * Creates an instance of Rabin.\n   * @param {number} [bits=12]\n   * @param {number} [min=8 * 1024]\n   * @param {number} [max=32 * 1024]\n   * @param { import(\"./../dist/rabin\").default } asModule\n   * @memberof Rabin\n   */\n  constructor(bits = 12, min = 8 * 1024, max = 32 * 1024, windowSize = 64, asModule) {\n    this.bits = bits;\n    this.min = min;\n    this.max = max;\n    this.asModule = asModule;\n    this.rabin = new asModule.Rabin(bits, min, max, windowSize);\n  }\n  /**\n   * Fingerprints the buffer\n   *\n   * @param {Uint8Array} buf\n   * @returns {Array<number>}\n   * @memberof Rabin\n   */\n\n\n  fingerprint(buf) {\n    const lengths = new Int32Array(Math.ceil(buf.length / this.min));\n    const lengthsPtr = this.asModule.newArray(lengths);\n    const pointer = this.asModule.newArray(buf); // run finderprint\n\n    this.rabin.fingerprint(pointer, lengthsPtr);\n    const processed = this.asModule.getArray(Int32Array, lengthsPtr); //free memory\n\n    this.asModule.freeArray(lengthsPtr);\n    this.asModule.freeArray(pointer); // TODO: remove this. @see https://github.com/ipfs/js-ipfs/issues/2118#issuecomment-497722625\n    // clean extra 0s in the array\n\n    const cleanArr = [];\n\n    for (let i = 0; i < processed.length; i++) {\n      if (processed[i] === 0) break;\n      cleanArr[i] = processed[i];\n    }\n\n    return cleanArr;\n  }\n\n}\n\nmodule.exports = Rabin;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/rabin-wasm/src/rabin.js"],"names":["Rabin","constructor","bits","min","max","windowSize","asModule","rabin","fingerprint","buf","lengths","Int32Array","Math","ceil","length","lengthsPtr","newArray","pointer","processed","getArray","freeArray","cleanArr","i","module","exports"],"mappings":"AAAA;;;;;AAKA,MAAMA,KAAN,CAAY;AACR;;;;;;;;AAQAC,EAAAA,WAAW,CAACC,IAAI,GAAG,EAAR,EAAYC,GAAG,GAAG,IAAI,IAAtB,EAA4BC,GAAG,GAAG,KAAK,IAAvC,EAA6CC,UAAU,GAAG,EAA1D,EAA8DC,QAA9D,EAAwE;AAC/E,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKE,QAAL,GAAgBA,QAAhB;AACA,SAAKC,KAAL,GAAa,IAAID,QAAQ,CAACN,KAAb,CAAmBE,IAAnB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,UAAnC,CAAb;AACH;AAED;;;;;;;;;AAOAG,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,UAAMC,OAAO,GAAG,IAAIC,UAAJ,CAAeC,IAAI,CAACC,IAAL,CAAUJ,GAAG,CAACK,MAAJ,GAAW,KAAKX,GAA1B,CAAf,CAAhB;AACA,UAAMY,UAAU,GAAG,KAAKT,QAAL,CAAcU,QAAd,CAAuBN,OAAvB,CAAnB;AACA,UAAMO,OAAO,GAAG,KAAKX,QAAL,CAAcU,QAAd,CAAuBP,GAAvB,CAAhB,CAHa,CAKb;;AACA,SAAKF,KAAL,CAAWC,WAAX,CAAuBS,OAAvB,EAAgCF,UAAhC;AAEA,UAAMG,SAAS,GAAG,KAAKZ,QAAL,CAAca,QAAd,CAAuBR,UAAvB,EAAmCI,UAAnC,CAAlB,CARa,CAUb;;AACA,SAAKT,QAAL,CAAcc,SAAd,CAAwBL,UAAxB;AACA,SAAKT,QAAL,CAAcc,SAAd,CAAwBH,OAAxB,EAZa,CAcb;AACA;;AACA,UAAMI,QAAQ,GAAG,EAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACJ,MAA9B,EAAsCQ,CAAC,EAAvC,EAA2C;AACvC,UAAGJ,SAAS,CAACI,CAAD,CAAT,KAAiB,CAApB,EAAuB;AACvBD,MAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcJ,SAAS,CAACI,CAAD,CAAvB;AACH;;AAED,WAAOD,QAAP;AACH;;AA/CO;;AAkDZE,MAAM,CAACC,OAAP,GAAiBxB,KAAjB","sourcesContent":["/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nclass Rabin {\n    /**\n     * Creates an instance of Rabin.\n     * @param {number} [bits=12]\n     * @param {number} [min=8 * 1024]\n     * @param {number} [max=32 * 1024]\n     * @param { import(\"./../dist/rabin\").default } asModule\n     * @memberof Rabin\n     */\n    constructor(bits = 12, min = 8 * 1024, max = 32 * 1024, windowSize = 64, asModule) {\n        this.bits = bits\n        this.min = min\n        this.max = max\n        this.asModule = asModule\n        this.rabin = new asModule.Rabin(bits, min, max, windowSize)\n    }\n\n    /**\n     * Fingerprints the buffer\n     *\n     * @param {Uint8Array} buf\n     * @returns {Array<number>}\n     * @memberof Rabin\n     */\n    fingerprint(buf) {\n        const lengths = new Int32Array(Math.ceil(buf.length/this.min))\n        const lengthsPtr = this.asModule.newArray(lengths)\n        const pointer = this.asModule.newArray(buf)\n\n        // run finderprint\n        this.rabin.fingerprint(pointer, lengthsPtr)\n\n        const processed = this.asModule.getArray(Int32Array, lengthsPtr)\n\n        //free memory\n        this.asModule.freeArray(lengthsPtr)\n        this.asModule.freeArray(pointer)\n\n        // TODO: remove this. @see https://github.com/ipfs/js-ipfs/issues/2118#issuecomment-497722625\n        // clean extra 0s in the array\n        const cleanArr = []\n        for (let i = 0; i < processed.length; i++) {\n            if(processed[i] === 0) break\n            cleanArr[i] = processed[i];\n        }\n\n        return cleanArr\n    }\n}\n\nmodule.exports = Rabin"]},"metadata":{},"sourceType":"script"}