{"ast":null,"code":"'use strict';\n\nconst Heap = require('heap');\n\nconst distance = require('xor-distance');\n\nconst debug = require('debug');\n\nconst promisify = require('promisify-es6');\n\nconst utils = require('./utils');\n\nconst log = debug('libp2p:dht:peer-queue');\n/**\n * PeerQueue is a heap that sorts its entries (PeerIds) by their\n * xor distance to the inital provided key.\n */\n\nclass PeerQueue {\n  /**\n   * Create from a given peer id.\n   *\n   * @param {PeerId} id\n   * @returns {Promise<PeerQueue>}\n   */\n  static async fromPeerId(id) {\n    const key = await promisify(cb => utils.convertPeerId(id, cb))();\n    return new PeerQueue(key);\n  }\n  /**\n   * Create from a given buffer.\n   *\n   * @param {Buffer} keyBuffer\n   * @returns {Promise<PeerQueue>}\n   */\n\n\n  static async fromKey(keyBuffer) {\n    const key = await promisify(cb => utils.convertBuffer(keyBuffer, cb))();\n    return new PeerQueue(key);\n  }\n  /**\n   * Create a new PeerQueue.\n   *\n   * @param {Buffer} from - The sha2-256 encoded peer id\n   */\n\n\n  constructor(from) {\n    log('create: %b', from);\n    this.from = from;\n    this.heap = new Heap(utils.xorCompare);\n  }\n  /**\n   * Add a new PeerId to the queue.\n   *\n   * @param {PeerId} id\n   * @returns {Promise}\n   */\n\n\n  async enqueue(id) {\n    log('enqueue %s', id.toB58String());\n    const key = await promisify(cb => utils.convertPeerId(id, cb))();\n    const el = {\n      id: id,\n      distance: distance(this.from, key)\n    };\n    this.heap.push(el);\n  }\n  /**\n   * Returns the closest peer to the `from` peer.\n   *\n   * @returns {PeerId}\n   */\n\n\n  dequeue() {\n    const el = this.heap.pop();\n    log('dequeue %s', el.id.toB58String());\n    return el.id;\n  }\n\n  get length() {\n    return this.heap.size();\n  }\n\n}\n\nmodule.exports = PeerQueue;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/libp2p-kad-dht/src/peer-queue.js"],"names":["Heap","require","distance","debug","promisify","utils","log","PeerQueue","fromPeerId","id","key","cb","convertPeerId","fromKey","keyBuffer","convertBuffer","constructor","from","heap","xorCompare","enqueue","toB58String","el","push","dequeue","pop","length","size","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,eAAD,CAAzB;;AAEA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAMK,GAAG,GAAGH,KAAK,CAAC,uBAAD,CAAjB;AAEA;;;;;AAIA,MAAMI,SAAN,CAAgB;AACd;;;;;;AAMA,eAAaC,UAAb,CAAyBC,EAAzB,EAA6B;AAC3B,UAAMC,GAAG,GAAG,MAAMN,SAAS,CAACO,EAAE,IAAIN,KAAK,CAACO,aAAN,CAAoBH,EAApB,EAAwBE,EAAxB,CAAP,CAAT,EAAlB;AACA,WAAO,IAAIJ,SAAJ,CAAcG,GAAd,CAAP;AACD;AAED;;;;;;;;AAMA,eAAaG,OAAb,CAAsBC,SAAtB,EAAiC;AAC/B,UAAMJ,GAAG,GAAG,MAAMN,SAAS,CAACO,EAAE,IAAIN,KAAK,CAACU,aAAN,CAAoBD,SAApB,EAA+BH,EAA/B,CAAP,CAAT,EAAlB;AACA,WAAO,IAAIJ,SAAJ,CAAcG,GAAd,CAAP;AACD;AAED;;;;;;;AAKAM,EAAAA,WAAW,CAAEC,IAAF,EAAQ;AACjBX,IAAAA,GAAG,CAAC,YAAD,EAAeW,IAAf,CAAH;AACA,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAY,IAAIlB,IAAJ,CAASK,KAAK,CAACc,UAAf,CAAZ;AACD;AAED;;;;;;;;AAMA,QAAMC,OAAN,CAAeX,EAAf,EAAmB;AACjBH,IAAAA,GAAG,CAAC,YAAD,EAAeG,EAAE,CAACY,WAAH,EAAf,CAAH;AACA,UAAMX,GAAG,GAAG,MAAMN,SAAS,CAACO,EAAE,IAAIN,KAAK,CAACO,aAAN,CAAoBH,EAApB,EAAwBE,EAAxB,CAAP,CAAT,EAAlB;AAEA,UAAMW,EAAE,GAAG;AACTb,MAAAA,EAAE,EAAEA,EADK;AAETP,MAAAA,QAAQ,EAAEA,QAAQ,CAAC,KAAKe,IAAN,EAAYP,GAAZ;AAFT,KAAX;AAKA,SAAKQ,IAAL,CAAUK,IAAV,CAAeD,EAAf;AACD;AAED;;;;;;;AAKAE,EAAAA,OAAO,GAAI;AACT,UAAMF,EAAE,GAAG,KAAKJ,IAAL,CAAUO,GAAV,EAAX;AACAnB,IAAAA,GAAG,CAAC,YAAD,EAAegB,EAAE,CAACb,EAAH,CAAMY,WAAN,EAAf,CAAH;AACA,WAAOC,EAAE,CAACb,EAAV;AACD;;AAED,MAAIiB,MAAJ,GAAc;AACZ,WAAO,KAAKR,IAAL,CAAUS,IAAV,EAAP;AACD;;AAjEa;;AAoEhBC,MAAM,CAACC,OAAP,GAAiBtB,SAAjB","sourcesContent":["'use strict'\n\nconst Heap = require('heap')\nconst distance = require('xor-distance')\nconst debug = require('debug')\nconst promisify = require('promisify-es6')\n\nconst utils = require('./utils')\n\nconst log = debug('libp2p:dht:peer-queue')\n\n/**\n * PeerQueue is a heap that sorts its entries (PeerIds) by their\n * xor distance to the inital provided key.\n */\nclass PeerQueue {\n  /**\n   * Create from a given peer id.\n   *\n   * @param {PeerId} id\n   * @returns {Promise<PeerQueue>}\n   */\n  static async fromPeerId (id) {\n    const key = await promisify(cb => utils.convertPeerId(id, cb))()\n    return new PeerQueue(key)\n  }\n\n  /**\n   * Create from a given buffer.\n   *\n   * @param {Buffer} keyBuffer\n   * @returns {Promise<PeerQueue>}\n   */\n  static async fromKey (keyBuffer) {\n    const key = await promisify(cb => utils.convertBuffer(keyBuffer, cb))()\n    return new PeerQueue(key)\n  }\n\n  /**\n   * Create a new PeerQueue.\n   *\n   * @param {Buffer} from - The sha2-256 encoded peer id\n   */\n  constructor (from) {\n    log('create: %b', from)\n    this.from = from\n    this.heap = new Heap(utils.xorCompare)\n  }\n\n  /**\n   * Add a new PeerId to the queue.\n   *\n   * @param {PeerId} id\n   * @returns {Promise}\n   */\n  async enqueue (id) {\n    log('enqueue %s', id.toB58String())\n    const key = await promisify(cb => utils.convertPeerId(id, cb))()\n\n    const el = {\n      id: id,\n      distance: distance(this.from, key)\n    }\n\n    this.heap.push(el)\n  }\n\n  /**\n   * Returns the closest peer to the `from` peer.\n   *\n   * @returns {PeerId}\n   */\n  dequeue () {\n    const el = this.heap.pop()\n    log('dequeue %s', el.id.toB58String())\n    return el.id\n  }\n\n  get length () {\n    return this.heap.size()\n  }\n}\n\nmodule.exports = PeerQueue\n"]},"metadata":{},"sourceType":"script"}