{"ast":null,"code":"'use strict';\n\nconst once = require('once');\n/**\n * Registers `handler` to each event in `events`. The `handler`\n * will only be called for the first event fired, at which point\n * the `handler` will be removed as a listener.\n *\n * Ensures `handler` is only called once.\n *\n * @example\n * // will call `callback` when `start` or `error` is emitted by `this`\n * emitFirst(this, ['error', 'start'], callback)\n *\n * @private\n * @param {EventEmitter} emitter The emitter to listen on\n * @param {Array<string>} events The events to listen for\n * @param {function(*)} handler The handler to call when an event is triggered\n * @returns {void}\n */\n\n\nfunction emitFirst(emitter, events, handler) {\n  handler = once(handler);\n  events.forEach(e => {\n    emitter.once(e, (...args) => {\n      events.forEach(ev => {\n        emitter.removeListener(ev, handler);\n      });\n      handler.apply(emitter, args);\n    });\n  });\n}\n\nmodule.exports.emitFirst = emitFirst;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/libp2p/src/util/index.js"],"names":["once","require","emitFirst","emitter","events","handler","forEach","e","args","ev","removeListener","apply","module","exports"],"mappings":"AAAA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;AAEA;;;;;;;;;;;;;;;;;;;AAiBA,SAASC,SAAT,CAAoBC,OAApB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8C;AAC5CA,EAAAA,OAAO,GAAGL,IAAI,CAACK,OAAD,CAAd;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAgBC,CAAD,IAAO;AACpBJ,IAAAA,OAAO,CAACH,IAAR,CAAaO,CAAb,EAAgB,CAAC,GAAGC,IAAJ,KAAa;AAC3BJ,MAAAA,MAAM,CAACE,OAAP,CAAgBG,EAAD,IAAQ;AACrBN,QAAAA,OAAO,CAACO,cAAR,CAAuBD,EAAvB,EAA2BJ,OAA3B;AACD,OAFD;AAGAA,MAAAA,OAAO,CAACM,KAAR,CAAcR,OAAd,EAAuBK,IAAvB;AACD,KALD;AAMD,GAPD;AAQD;;AAEDI,MAAM,CAACC,OAAP,CAAeX,SAAf,GAA2BA,SAA3B","sourcesContent":["'use strict'\nconst once = require('once')\n\n/**\n * Registers `handler` to each event in `events`. The `handler`\n * will only be called for the first event fired, at which point\n * the `handler` will be removed as a listener.\n *\n * Ensures `handler` is only called once.\n *\n * @example\n * // will call `callback` when `start` or `error` is emitted by `this`\n * emitFirst(this, ['error', 'start'], callback)\n *\n * @private\n * @param {EventEmitter} emitter The emitter to listen on\n * @param {Array<string>} events The events to listen for\n * @param {function(*)} handler The handler to call when an event is triggered\n * @returns {void}\n */\nfunction emitFirst (emitter, events, handler) {\n  handler = once(handler)\n  events.forEach((e) => {\n    emitter.once(e, (...args) => {\n      events.forEach((ev) => {\n        emitter.removeListener(ev, handler)\n      })\n      handler.apply(emitter, args)\n    })\n  })\n}\n\nmodule.exports.emitFirst = emitFirst\n"]},"metadata":{},"sourceType":"script"}