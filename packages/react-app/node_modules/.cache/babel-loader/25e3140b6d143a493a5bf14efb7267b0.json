{"ast":null,"code":"/**\n * Define a struct error.\n *\n * @type {StructError}\n */\nclass StructError extends TypeError {\n  static format(attrs) {\n    const {\n      type,\n      path,\n      value\n    } = attrs;\n    const message = `Expected a value of type \\`${type}\\`${path.length ? ` for \\`${path.join('.')}\\`` : ''} but received \\`${JSON.stringify(value)}\\`.`;\n    return message;\n  }\n\n  constructor(attrs) {\n    const message = StructError.format(attrs);\n    super(message);\n    const {\n      data,\n      path,\n      value,\n      reason,\n      type,\n      errors = []\n    } = attrs;\n    this.data = data;\n    this.path = path;\n    this.value = value;\n    this.reason = reason;\n    this.type = type;\n    this.errors = errors;\n\n    if (!errors.length) {\n      errors.push(this);\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nvar toString = Object.prototype.toString;\n\nvar kindOf = function kindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n  var type = typeof val;\n  if (type === 'boolean') return 'boolean';\n  if (type === 'string') return 'string';\n  if (type === 'number') return 'number';\n  if (type === 'symbol') return 'symbol';\n\n  if (type === 'function') {\n    return isGeneratorFn(val) ? 'generatorfunction' : 'function';\n  }\n\n  if (isArray(val)) return 'array';\n  if (isBuffer(val)) return 'buffer';\n  if (isArguments(val)) return 'arguments';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  if (isRegexp(val)) return 'regexp';\n\n  switch (ctorName(val)) {\n    case 'Symbol':\n      return 'symbol';\n\n    case 'Promise':\n      return 'promise';\n    // Set, Map, WeakSet, WeakMap\n\n    case 'WeakMap':\n      return 'weakmap';\n\n    case 'WeakSet':\n      return 'weakset';\n\n    case 'Map':\n      return 'map';\n\n    case 'Set':\n      return 'set';\n    // 8-bit typed arrays\n\n    case 'Int8Array':\n      return 'int8array';\n\n    case 'Uint8Array':\n      return 'uint8array';\n\n    case 'Uint8ClampedArray':\n      return 'uint8clampedarray';\n    // 16-bit typed arrays\n\n    case 'Int16Array':\n      return 'int16array';\n\n    case 'Uint16Array':\n      return 'uint16array';\n    // 32-bit typed arrays\n\n    case 'Int32Array':\n      return 'int32array';\n\n    case 'Uint32Array':\n      return 'uint32array';\n\n    case 'Float32Array':\n      return 'float32array';\n\n    case 'Float64Array':\n      return 'float64array';\n  }\n\n  if (isGeneratorObj(val)) {\n    return 'generator';\n  } // Non-plain objects\n\n\n  type = toString.call(val);\n\n  switch (type) {\n    case '[object Object]':\n      return 'object';\n    // iterators\n\n    case '[object Map Iterator]':\n      return 'mapiterator';\n\n    case '[object Set Iterator]':\n      return 'setiterator';\n\n    case '[object String Iterator]':\n      return 'stringiterator';\n\n    case '[object Array Iterator]':\n      return 'arrayiterator';\n  } // other\n\n\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n};\n\nfunction ctorName(val) {\n  return val.constructor ? val.constructor.name : null;\n}\n\nfunction isArray(val) {\n  if (Array.isArray) return Array.isArray(val);\n  return val instanceof Array;\n}\n\nfunction isError(val) {\n  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';\n}\n\nfunction isRegexp(val) {\n  if (val instanceof RegExp) return true;\n  return typeof val.flags === 'string' && typeof val.ignoreCase === 'boolean' && typeof val.multiline === 'boolean' && typeof val.global === 'boolean';\n}\n\nfunction isGeneratorFn(name, val) {\n  return ctorName(name) === 'GeneratorFunction';\n}\n\nfunction isGeneratorObj(val) {\n  return typeof val.throw === 'function' && typeof val.return === 'function' && typeof val.next === 'function';\n}\n\nfunction isArguments(val) {\n  try {\n    if (typeof val.length === 'number' && typeof val.callee === 'function') {\n      return true;\n    }\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * If you need to support Safari 5-7 (8-10 yr-old browser),\n * take a look at https://github.com/feross/is-buffer\n */\n\n\nfunction isBuffer(val) {\n  if (val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n\n  return false;\n}\n/**\n * A private string to identify structs by.\n *\n * @type {String}\n */\n\n\nconst IS_STRUCT = '@@__STRUCT__@@';\n/**\n * A private string to refer to a struct's kind.\n *\n * @type {String}\n */\n\nconst KIND = '@@__KIND__@@';\n/**\n * Check if a `value` is a struct.\n *\n * @param {Any} value\n * @return {Boolean}\n */\n\nfunction isStruct(value) {\n  return !!(value && value[IS_STRUCT]);\n}\n/**\n * Resolve `defaults`, for an optional `value`.\n *\n * @param {Function|Any} defaults\n * @param {Any} value\n * @return {Any}\n */\n\n\nfunction resolveDefaults(defaults, value) {\n  return typeof defaults === 'function' ? defaults(value) : defaults;\n}\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * Kind.\n *\n * @type {Kind}\n */\n\n\nclass Kind {\n  constructor(name, type, validate) {\n    this.name = name;\n    this.type = type;\n    this.validate = validate;\n  }\n\n}\n/**\n * Any.\n *\n * @param {Array|Function|Object|String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\n\nfunction any(schema, defaults$$1, options) {\n  if (isStruct(schema)) {\n    return schema[KIND];\n  }\n\n  if (schema instanceof Kind) {\n    return schema;\n  }\n\n  switch (kindOf(schema)) {\n    case 'array':\n      {\n        return schema.length > 1 ? tuple(schema, defaults$$1, options) : list(schema, defaults$$1, options);\n      }\n\n    case 'function':\n      {\n        return func(schema, defaults$$1, options);\n      }\n\n    case 'object':\n      {\n        return object(schema, defaults$$1, options);\n      }\n\n    case 'string':\n      {\n        let required = true;\n        let type;\n\n        if (schema.endsWith('?')) {\n          required = false;\n          schema = schema.slice(0, -1);\n        }\n\n        if (schema.includes('|')) {\n          const scalars = schema.split(/\\s*\\|\\s*/g);\n          type = union(scalars, defaults$$1, options);\n        } else if (schema.includes('&')) {\n          const scalars = schema.split(/\\s*&\\s*/g);\n          type = intersection(scalars, defaults$$1, options);\n        } else {\n          type = scalar(schema, defaults$$1, options);\n        }\n\n        if (!required) {\n          type = optional(type, undefined, options);\n        }\n\n        return type;\n      }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    throw new Error(`A schema definition must be an object, array, string or function, but you passed: ${schema}`);\n  } else {\n    throw new Error(`Invalid schema: ${schema}`);\n  }\n}\n/**\n * Dict.\n *\n * @param {Array} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\n\nfunction dict(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 2) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Dict structs must be defined as an array with two elements, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const obj = scalar('object', undefined, options);\n  const keys = any(schema[0], undefined, options);\n  const values = any(schema[1], undefined, options);\n  const name = 'dict';\n  const type = `dict<${keys.type},${values.type}>`;\n\n  const validate = value => {\n    const resolved = resolveDefaults(defaults$$1);\n    value = resolved ? _extends({}, resolved, value) : value;\n    const [error] = obj.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    const ret = {};\n    const errors = [];\n\n    for (let k in value) {\n      const v = value[k];\n      const [e, r] = keys.validate(k);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      k = r;\n      const [e2, r2] = values.validate(v);\n\n      if (e2) {\n        const allE2 = e2.errors || [e2];\n        allE2.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      ret[k] = r2;\n    }\n\n    return errors.length ? [_extends({}, errors[0], {\n      errors\n    })] : [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n/**\n * Enum.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\n\nfunction en(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Enum structs must be defined as an array, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const name = 'enum';\n  const type = schema.map(s => {\n    try {\n      return JSON.stringify(s);\n    } catch (e) {\n      return String(s);\n    }\n  }).join(' | ');\n\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    return schema.includes(value) ? [undefined, value] : [{\n      data: value,\n      path: [],\n      value,\n      type\n    }];\n  };\n\n  return new Kind(name, type, validate);\n}\n/**\n * Enums.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\n\nfunction enums(schema, defaults$$1, options) {\n  const e = en(schema, undefined, options);\n  const l = list([e], defaults$$1, options);\n  return l;\n}\n/**\n * Function.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\n\nfunction func(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Function structs must be defined as a function, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const name = 'function';\n  const type = '<function>';\n\n  const validate = (value = resolveDefaults(defaults$$1), data) => {\n    const result = schema(value, data);\n    let failure = {\n      path: [],\n      reason: null\n    };\n    let isValid;\n\n    switch (kindOf(result)) {\n      case 'boolean':\n        {\n          isValid = result;\n          break;\n        }\n\n      case 'string':\n        {\n          isValid = false;\n          failure.reason = result;\n          break;\n        }\n\n      case 'object':\n        {\n          isValid = false;\n          failure = _extends({}, failure, result);\n          break;\n        }\n\n      default:\n        {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`Validator functions must return a boolean, an error reason string or an error reason object, but you passed: ${schema}`);\n          } else {\n            throw new Error(`Invalid result: ${result}`);\n          }\n        }\n    }\n\n    return isValid ? [undefined, value] : [_extends({\n      type,\n      value,\n      data: value\n    }, failure)];\n  };\n\n  return new Kind(name, type, validate);\n}\n/**\n * Instance.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\n\nfunction instance(schema, defaults$$1, options) {\n  const name = 'instance';\n  const type = `instance<${schema.name}>`;\n\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    return value instanceof schema ? [undefined, value] : [{\n      data: value,\n      path: [],\n      value,\n      type\n    }];\n  };\n\n  return new Kind(name, type, validate);\n}\n/**\n * Interface.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\n\nfunction inter(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Interface structs must be defined as an object, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const obj = scalar('object', undefined, options);\n  const ks = [];\n  const properties = {};\n\n  for (const key in schema) {\n    ks.push(key);\n    const s = schema[key];\n    const kind = any(s, undefined, options);\n    properties[key] = kind;\n  }\n\n  const name = 'interface';\n  const type = `{${ks.join()}}`;\n\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const [error] = obj.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    const errors = [];\n    const ret = value;\n\n    for (const key in properties) {\n      let v = value[key];\n      const kind = properties[key];\n\n      if (v === undefined) {\n        const d = defaults$$1 && defaults$$1[key];\n        v = resolveDefaults(d, value);\n      }\n\n      const [e, r] = kind.validate(v, value);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r;\n      }\n    }\n\n    return errors.length ? [_extends({}, errors[0], {\n      errors\n    })] : [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n/**\n * Lazy.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\n\nfunction lazy(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Lazy structs must be defined as an function that returns a schema, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  let kind;\n  let struct;\n  const name = 'lazy';\n  const type = `lazy...`;\n\n  const compile = value => {\n    struct = schema();\n    kind.name = struct.kind;\n    kind.type = struct.type;\n    kind.validate = struct.validate;\n    return kind.validate(value);\n  };\n\n  kind = new Kind(name, type, compile);\n  return kind;\n}\n/**\n * Dynamic.\n *\n * @param {Function} createSchema\n * @param {Any} defaults\n * @param {Object} options\n */\n\n\nfunction dynamic(createSchema, defaults$$1, options) {\n  if (kindOf(createSchema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Dynamic structs must be defined as a function, but you passed: ${createSchema}`);\n    } else {\n      throw new Error(`Invalid schema: ${createSchema}`);\n    }\n  }\n\n  const name = 'dynamic';\n  const type = 'dynamic...';\n\n  const validate = (value = resolveDefaults(defaults$$1), data) => {\n    const schema = createSchema(value, data);\n\n    if (kindOf(schema) !== 'function') {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(`Dynamic structs must return a schema, but you passed: ${schema}`);\n      } else {\n        throw new Error(`Invalid schema: ${schema}`);\n      }\n    }\n\n    const [error, result] = schema.validate(value);\n\n    if (error) {\n      return [error];\n    }\n\n    return [undefined, result];\n  };\n\n  return new Kind(name, type, validate);\n}\n/**\n * List.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\n\nfunction list(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`List structs must be defined as an array with a single element, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const array = scalar('array', undefined, options);\n  const element = any(schema[0], undefined, options);\n  const name = 'list';\n  const type = `[${element.type}]`;\n\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const [error, result] = array.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    value = result;\n    const errors = [];\n    const ret = [];\n\n    for (let i = 0; i < value.length; i++) {\n      const v = value[i];\n      const [e, r] = element.validate(v);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      ret[i] = r;\n    }\n\n    return errors.length ? [_extends({}, errors[0], {\n      errors\n    })] : [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n/**\n * Literal.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\n\nfunction literal(schema, defaults$$1, options) {\n  const name = 'literal';\n  const type = `literal: ${JSON.stringify(schema)}`;\n\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    return value === schema ? [undefined, value] : [{\n      data: value,\n      path: [],\n      value,\n      type\n    }];\n  };\n\n  return new Kind(name, type, validate);\n}\n/**\n * Object.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\n\nfunction object(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Object structs must be defined as an object, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const obj = scalar('object', undefined, options);\n  const ks = [];\n  const properties = {};\n\n  for (const key in schema) {\n    ks.push(key);\n    const s = schema[key];\n    const kind = any(s, undefined, options);\n    properties[key] = kind;\n  }\n\n  const name = 'object';\n  const type = `{${ks.join()}}`;\n\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const [error] = obj.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    const errors = [];\n    const ret = {};\n    const valueKeys = Object.keys(value);\n    const propertiesKeys = Object.keys(properties);\n    const keys = new Set(valueKeys.concat(propertiesKeys));\n    keys.forEach(key => {\n      let v = value[key];\n      const kind = properties[key];\n\n      if (v === undefined) {\n        const d = defaults$$1 && defaults$$1[key];\n        v = resolveDefaults(d, value);\n      }\n\n      if (!kind) {\n        const e = {\n          data: value,\n          path: [key],\n          value: v\n        };\n        errors.push(e);\n        return;\n      }\n\n      const [e, r] = kind.validate(v, value);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        return;\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r;\n      }\n    });\n    return errors.length ? [_extends({}, errors[0], {\n      errors\n    })] : [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n/**\n * Optional.\n *\n * @param {Any} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\n\nfunction optional(schema, defaults$$1, options) {\n  return union([schema, 'undefined'], defaults$$1, options);\n}\n/**\n * Partial.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\n\nfunction partial(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Partial structs must be defined as an object, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const obj = scalar('object', undefined, options);\n  const ks = [];\n  const properties = {};\n\n  for (const key in schema) {\n    ks.push(key);\n    const s = schema[key];\n    const kind = any(s, undefined, options);\n    properties[key] = kind;\n  }\n\n  const name = 'partial';\n  const type = `{${ks.join()},...}`;\n\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const [error] = obj.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    const errors = [];\n    const ret = {};\n\n    for (const key in properties) {\n      let v = value[key];\n      const kind = properties[key];\n\n      if (v === undefined) {\n        const d = defaults$$1 && defaults$$1[key];\n        v = resolveDefaults(d, value);\n      }\n\n      const [e, r] = kind.validate(v, value);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r;\n      }\n    }\n\n    return errors.length ? [_extends({}, errors[0], {\n      errors\n    })] : [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n/**\n * Scalar.\n *\n * @param {String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\n\nfunction scalar(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'string') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Scalar structs must be defined as a string, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const {\n    types\n  } = options;\n  const fn = types[schema];\n\n  if (kindOf(fn) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`No struct validator function found for type \"${schema}\".`);\n    } else {\n      throw new Error(`Invalid type: ${schema}`);\n    }\n  }\n\n  const kind = func(fn, defaults$$1, options);\n  const name = 'scalar';\n  const type = schema;\n\n  const validate = value => {\n    const [error, result] = kind.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    return [undefined, result];\n  };\n\n  return new Kind(name, type, validate);\n}\n/**\n * Tuple.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\n\nfunction tuple(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Tuple structs must be defined as an array, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options));\n  const array = scalar('array', undefined, options);\n  const name = 'tuple';\n  const type = `[${kinds.map(k => k.type).join()}]`;\n\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const [error] = array.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    const ret = [];\n    const errors = [];\n    const length = Math.max(value.length, kinds.length);\n\n    for (let i = 0; i < length; i++) {\n      const kind = kinds[i];\n      const v = value[i];\n\n      if (!kind) {\n        const e = {\n          data: value,\n          path: [i],\n          value: v\n        };\n        errors.push(e);\n        continue;\n      }\n\n      const [e, r] = kind.validate(v);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      ret[i] = r;\n    }\n\n    return errors.length ? [_extends({}, errors[0], {\n      errors\n    })] : [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n/**\n * Union.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\n\nfunction union(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Union structs must be defined as an array, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options));\n  const name = 'union';\n  const type = kinds.map(k => k.type).join(' | ');\n\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const errors = [];\n\n    for (const k of kinds) {\n      const [e, r] = k.validate(value);\n\n      if (!e) {\n        return [undefined, r];\n      }\n\n      errors.push(e);\n    }\n\n    errors[0].type = type;\n    return errors;\n  };\n\n  return new Kind(name, type, validate);\n}\n/**\n * Intersection.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\n\nfunction intersection(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Intersection structs must be defined as an array, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const types = schema.map(s => any(s, undefined, options));\n  const name = 'intersection';\n  const type = types.map(t => t.type).join(' & ');\n\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    let v = value;\n\n    for (const t of types) {\n      const [e, r] = t.validate(v);\n\n      if (e) {\n        e.type = type;\n        return [e];\n      }\n\n      v = r;\n    }\n\n    return [undefined, v];\n  };\n\n  return new Kind(name, type, validate);\n}\n/**\n * Kinds.\n *\n * @type {Object}\n */\n\n\nconst Kinds = {\n  any,\n  dict,\n  enum: en,\n  enums,\n  function: func,\n  instance,\n  interface: inter,\n  lazy,\n  list,\n  literal,\n  object,\n  optional,\n  partial,\n  scalar,\n  tuple,\n  union,\n  intersection,\n  dynamic\n  /**\n   * Export.\n   *\n   * @type {Object}\n   */\n\n};\n/**\n * The types that `kind-of` supports.\n *\n * @type {Array}\n */\n\nconst TYPES = ['arguments', 'array', 'boolean', 'buffer', 'error', 'float32array', 'float64array', 'function', 'generatorfunction', 'int16array', 'int32array', 'int8array', 'map', 'null', 'number', 'object', 'promise', 'regexp', 'set', 'string', 'symbol', 'uint16array', 'uint32array', 'uint8array', 'uint8clampedarray', 'undefined', 'weakmap', 'weakset'];\n/**\n * The default types that Superstruct ships with.\n *\n * @type {Object}\n */\n\nconst Types = {\n  any: value => value !== undefined\n};\nTYPES.forEach(type => {\n  Types[type] = value => kindOf(value) === type;\n});\n/**\n * Handle the 'date' case specially, to throw out invalid `Date` objects.\n *\n * @param {Mixed} value\n * @return {Boolean}\n */\n\nTypes.date = value => kindOf(value) === 'date' && !isNaN(value);\n/**\n * Create a struct factory with a `config`.\n *\n * @param {Object} config\n * @return {Function}\n */\n\n\nfunction superstruct(config = {}) {\n  const types = _extends({}, Types, config.types || {});\n  /**\n   * Create a `kind` struct with `schema`, `defaults` and `options`.\n   *\n   * @param {Any} schema\n   * @param {Any} defaults\n   * @param {Object} options\n   * @return {Function}\n   */\n\n\n  function struct(schema, defaults$$1, options = {}) {\n    if (isStruct(schema)) {\n      schema = schema.schema;\n    }\n\n    const kind = Kinds.any(schema, defaults$$1, _extends({}, options, {\n      types\n    }));\n\n    function Struct(data) {\n      if (this instanceof Struct) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error('The `Struct` creation function should not be used with the `new` keyword.');\n        } else {\n          throw new Error('Invalid `new` keyword!');\n        }\n      }\n\n      return Struct.assert(data);\n    }\n\n    Object.defineProperty(Struct, IS_STRUCT, {\n      value: true\n    });\n    Object.defineProperty(Struct, KIND, {\n      value: kind\n    });\n    Struct.kind = kind.name;\n    Struct.type = kind.type;\n    Struct.schema = schema;\n    Struct.defaults = defaults$$1;\n    Struct.options = options;\n\n    Struct.assert = value => {\n      const [error, result] = kind.validate(value);\n\n      if (error) {\n        throw new StructError(error);\n      }\n\n      return result;\n    };\n\n    Struct.test = value => {\n      const [error] = kind.validate(value);\n      return !error;\n    };\n\n    Struct.validate = value => {\n      const [error, result] = kind.validate(value);\n\n      if (error) {\n        return [new StructError(error)];\n      }\n\n      return [undefined, result];\n    };\n\n    return Struct;\n  }\n  /**\n   * Mix in a factory for each specific kind of struct.\n   */\n\n\n  Object.keys(Kinds).forEach(name => {\n    const kind = Kinds[name];\n\n    struct[name] = (schema, defaults$$1, options) => {\n      const type = kind(schema, defaults$$1, _extends({}, options, {\n        types\n      }));\n      const s = struct(type, defaults$$1, options);\n      return s;\n    };\n  });\n  /**\n   * Return the struct factory.\n   */\n\n  return struct;\n}\n/**\n * Create a convenience `struct` factory for the default types.\n *\n * @type {Function}\n */\n\n\nconst struct = superstruct();\nexport { struct, superstruct, isStruct, StructError };","map":{"version":3,"sources":["../src/error.js","../node_modules/kind-of/index.js","../src/constants.js","../src/utils.js","../src/kinds.js","../src/types.js","../src/superstruct.js","../src/index.js"],"names":["message","type","path","JSON","StructError","errors","Error","IS_STRUCT","KIND","value","defaults","isStruct","schema","kindOf","tuple","list","func","object","required","scalars","union","intersection","scalar","optional","process","obj","keys","any","values","name","validate","resolved","resolveDefaults","ret","v","allE","e","singleE","allE2","e2","s","String","data","en","l","result","failure","reason","isValid","ks","properties","kind","d","key","r","compile","struct","createSchema","array","element","i","valueKeys","Object","propertiesKeys","fn","types","kinds","k","length","Math","t","Kinds","TYPES","Types","undefined","isNaN","config","options","Struct","superstruct"],"mappings":"AAAA;;;;;AAMA,MAAA,WAAA,SAAA,SAAA,CAAoC;SAClC,M,CAAA,K,EAAqB;UACb;AAAA,MAAA,IAAA;AAAA,MAAA,IAAA;AAAA,MAAA;AAAA,QAAN,K;UACMA,OAAAA,GAAW,8BAA6BC,IAAK,KACjDC,IAAAA,CAAAA,MAAAA,GAAe,UAASA,IAAAA,CAAAA,IAAAA,CAAAA,GAAAA,CAAxBA,IAAAA,GAA6C,EAC9C,mBAAkBC,IAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAFnB,K;WAGA,O;;;cAGF,K,EAAmB;UACXH,OAAAA,GAAUI,WAAAA,CAAAA,MAAAA,CAAhB,KAAgBA,C;UAChB,O;UAEM;AAAA,MAAA,IAAA;AAAA,MAAA,IAAA;AAAA,MAAA,KAAA;AAAA,MAAA,MAAA;AAAA,MAAA,IAAA;AAAmCC,MAAAA,MAAAA,GAAnC;AAAA,QAAN,K;SACA,I,GAAA,I;SACA,I,GAAA,I;SACA,K,GAAA,K;SACA,M,GAAA,M;SACA,I,GAAA,I;SACA,M,GAAA,M;;QAEI,CAACA,MAAAA,CAAL,M,EAAoB;aAClB,I,CAAA,I;;;QAGEC,KAAAA,CAAJ,iB,EAA6B;YAC3B,iB,CAAA,I,EAA8B,KAA9B,W;AADF,K,MAEO;WACL,K,GAAa,IAAA,KAAA,GAAb,K;;;;AA5B8B;;ACNpC,IAAI,QAAQ,GAAG,MAAM,CAAC,SAAP,CAAiB,QAAhC;;AAEA,IAAA,MAAc,GAAG,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AACpC,MAAI,GAAG,KAAK,KAAK,CAAjB,EAAoB,OAAO,WAAP;AACpB,MAAI,GAAG,KAAK,IAAZ,EAAkB,OAAO,MAAP;AAElB,MAAI,IAAI,GAAG,OAAO,GAAlB;AACA,MAAI,IAAI,KAAK,SAAb,EAAwB,OAAO,SAAP;AACxB,MAAI,IAAI,KAAK,QAAb,EAAuB,OAAO,QAAP;AACvB,MAAI,IAAI,KAAK,QAAb,EAAuB,OAAO,QAAP;AACvB,MAAI,IAAI,KAAK,QAAb,EAAuB,OAAO,QAAP;;AACvB,MAAI,IAAI,KAAK,UAAb,EAAyB;AACvB,WAAO,aAAa,CAAC,GAAD,CAAb,GAAqB,mBAArB,GAA2C,UAAlD;AACD;;AAED,MAAI,OAAO,CAAC,GAAD,CAAX,EAAkB,OAAO,OAAP;AAClB,MAAI,QAAQ,CAAC,GAAD,CAAZ,EAAmB,OAAO,QAAP;AACnB,MAAI,WAAW,CAAC,GAAD,CAAf,EAAsB,OAAO,WAAP;AACtB,MAAI,MAAM,CAAC,GAAD,CAAV,EAAiB,OAAO,MAAP;AACjB,MAAI,OAAO,CAAC,GAAD,CAAX,EAAkB,OAAO,OAAP;AAClB,MAAI,QAAQ,CAAC,GAAD,CAAZ,EAAmB,OAAO,QAAP;;AAEnB,UAAQ,QAAQ,CAAC,GAAD,CAAhB;AACE,SAAK,QAAL;AAAe,aAAO,QAAP;;AACf,SAAK,SAAL;AAAgB,aAAO,SAAP;;;AAGhB,SAAK,SAAL;AAAgB,aAAO,SAAP;;AAChB,SAAK,SAAL;AAAgB,aAAO,SAAP;;AAChB,SAAK,KAAL;AAAY,aAAO,KAAP;;AACZ,SAAK,KAAL;AAAY,aAAO,KAAP;;;AAGZ,SAAK,WAAL;AAAkB,aAAO,WAAP;;AAClB,SAAK,YAAL;AAAmB,aAAO,YAAP;;AACnB,SAAK,mBAAL;AAA0B,aAAO,mBAAP;;;AAG1B,SAAK,YAAL;AAAmB,aAAO,YAAP;;AACnB,SAAK,aAAL;AAAoB,aAAO,aAAP;;;AAGpB,SAAK,YAAL;AAAmB,aAAO,YAAP;;AACnB,SAAK,aAAL;AAAoB,aAAO,aAAP;;AACpB,SAAK,cAAL;AAAqB,aAAO,cAAP;;AACrB,SAAK,cAAL;AAAqB,aAAO,cAAP;AAvBvB;;AA0BA,MAAI,cAAc,CAAC,GAAD,CAAlB,EAAyB;AACvB,WAAO,WAAP;AACD,GAhDmC,C;;;AAmDpC,EAAA,IAAI,GAAG,QAAQ,CAAC,IAAT,CAAc,GAAd,CAAP;;AACA,UAAQ,IAAR;AACE,SAAK,iBAAL;AAAwB,aAAO,QAAP;;;AAExB,SAAK,uBAAL;AAA8B,aAAO,aAAP;;AAC9B,SAAK,uBAAL;AAA8B,aAAO,aAAP;;AAC9B,SAAK,0BAAL;AAAiC,aAAO,gBAAP;;AACjC,SAAK,yBAAL;AAAgC,aAAO,eAAP;AANlC,GApDoC,C;;;AA8DpC,SAAO,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,EAAkB,WAAlB,GAAgC,OAAhC,CAAwC,KAAxC,EAA+C,EAA/C,CAAP;AACD,CA/DD;;AAiEA,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACrB,SAAO,GAAG,CAAC,WAAJ,GAAkB,GAAG,CAAC,WAAJ,CAAgB,IAAlC,GAAyC,IAAhD;AACD;;AAED,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AACpB,MAAI,KAAK,CAAC,OAAV,EAAmB,OAAO,KAAK,CAAC,OAAN,CAAc,GAAd,CAAP;AACnB,SAAO,GAAG,YAAY,KAAtB;AACD;;AAED,SAAS,OAAT,CAAiB,GAAjB,EAAsB;AACpB,SAAO,GAAG,YAAY,KAAf,IAAyB,OAAO,GAAG,CAAC,OAAX,KAAuB,QAAvB,IAAmC,GAAG,CAAC,WAAvC,IAAsD,OAAO,GAAG,CAAC,WAAJ,CAAgB,eAAvB,KAA2C,QAAjI;AACD;;AAED,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AACnB,MAAI,GAAG,YAAY,IAAnB,EAAyB,OAAO,IAAP;AACzB,SAAO,OAAO,GAAG,CAAC,YAAX,KAA4B,UAA5B,IACF,OAAO,GAAG,CAAC,OAAX,KAAuB,UADrB,IAEF,OAAO,GAAG,CAAC,OAAX,KAAuB,UAF5B;AAGD;;AAED,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACrB,MAAI,GAAG,YAAY,MAAnB,EAA2B,OAAO,IAAP;AAC3B,SAAO,OAAO,GAAG,CAAC,KAAX,KAAqB,QAArB,IACF,OAAO,GAAG,CAAC,UAAX,KAA0B,SADxB,IAEF,OAAO,GAAG,CAAC,SAAX,KAAyB,SAFvB,IAGF,OAAO,GAAG,CAAC,MAAX,KAAsB,SAH3B;AAID;;AAED,SAAS,aAAT,CAAuB,IAAvB,EAA6B,GAA7B,EAAkC;AAChC,SAAO,QAAQ,CAAC,IAAD,CAAR,KAAmB,mBAA1B;AACD;;AAED,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AAC3B,SAAO,OAAO,GAAG,CAAC,KAAX,KAAqB,UAArB,IACF,OAAO,GAAG,CAAC,MAAX,KAAsB,UADpB,IAEF,OAAO,GAAG,CAAC,IAAX,KAAoB,UAFzB;AAGD;;AAED,SAAS,WAAT,CAAqB,GAArB,EAA0B;AACxB,MAAI;AACF,QAAI,OAAO,GAAG,CAAC,MAAX,KAAsB,QAAtB,IAAkC,OAAO,GAAG,CAAC,MAAX,KAAsB,UAA5D,EAAwE;AACtE,aAAO,IAAP;AACD;AACF,GAJD,CAIE,OAAO,GAAP,EAAY;AACZ,QAAI,GAAG,CAAC,OAAJ,CAAY,OAAZ,CAAoB,QAApB,MAAkC,CAAC,CAAvC,EAA0C;AACxC,aAAO,IAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD;;;;;;;AAOD,SAAS,QAAT,CAAkB,GAAlB,EAAuB;AACrB,MAAI,GAAG,CAAC,WAAJ,IAAmB,OAAO,GAAG,CAAC,WAAJ,CAAgB,QAAvB,KAAoC,UAA3D,EAAuE;AACrE,WAAO,GAAG,CAAC,WAAJ,CAAgB,QAAhB,CAAyB,GAAzB,CAAP;AACD;;AACD,SAAO,KAAP;AACD;AChID;;;;;;;AAMA,MAAMC,SAAAA,GAAN,gBAAA;;;;;;;AAQA,MAAMC,IAAAA,GAAN,cAAA;ACZA;;;;;;;AAOO,SAAA,QAAA,CAAA,KAAA,EAAyB;SACvB,CAAC,EAAEC,KAAAA,IAASA,KAAAA,CAAnB,SAAmBA,CAAX,C;;;;;;;;;;;AAWH,SAAA,eAAA,CAAA,QAAA,EAAA,KAAA,EAA0C;SACxC,OAAA,QAAA,KAAA,UAAA,GAAiCC,QAAAA,CAAjC,KAAiCA,CAAjC,GAAP,Q;;;;;;;;;;;;;;;;ACjBF;;;;;;;AAMA,MAAA,IAAA,CAAW;cACT,I,EAAA,I,EAAA,Q,EAAkC;SAChC,I,GAAA,I;SACA,I,GAAA,I;SACA,Q,GAAA,Q;;;AAJO;;;;;;;;;;AAgBX,SAAA,GAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAwC;MAClCC,QAAAA,CAAJ,MAAIA,C,EAAkB;WACbC,MAAAA,CAAP,IAAOA,C;;;MAGLA,MAAAA,YAAJ,I,EAA4B;WAC1B,M;;;UAGMC,MAAAA,CAAR,MAAQA,C;SACN,O;;eACSD,MAAAA,CAAAA,MAAAA,GAAAA,CAAAA,GACHE,KAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EADGF,OACHE,CADGF,GAEHG,IAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EAFJ,OAEIA,C;;;SAGN,U;;eACSC,IAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EAAP,OAAOA,C;;;SAGT,Q;;eACSC,MAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EAAP,OAAOA,C;;;SAGT,Q;;YACMC,QAAAA,GAAJ,I;YACA,I;;YAEIN,MAAAA,CAAAA,QAAAA,CAAJ,GAAIA,C,EAAsB;qBACxB,K;mBACSA,MAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAgB,CAAzB,CAASA,C;;;YAGPA,MAAAA,CAAAA,QAAAA,CAAJ,GAAIA,C,EAAsB;gBAClBO,OAAAA,GAAUP,MAAAA,CAAAA,KAAAA,CAAhB,WAAgBA,C;iBACTQ,KAAAA,CAAAA,OAAAA,EAAAA,WAAAA,EAAP,OAAOA,C;AAFT,S,MAGO,IAAIR,MAAAA,CAAAA,QAAAA,CAAJ,GAAIA,CAAJ,EAA0B;gBACzBO,OAAAA,GAAUP,MAAAA,CAAAA,KAAAA,CAAhB,UAAgBA,C;iBACTS,YAAAA,CAAAA,OAAAA,EAAAA,WAAAA,EAAP,OAAOA,C;AAFF,SAAA,MAGA;iBACEC,MAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EAAP,OAAOA,C;;;YAGL,CAAJ,Q,EAAe;iBACNC,QAAAA,CAAAA,IAAAA,EAAAA,SAAAA,EAAP,OAAOA,C;;;eAGT,I;;;;MAIAC,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;UACnC,IAAA,KAAA,CACH,qFAAoFZ,MADvF,EAAM,C;AADR,G,MAIO;UACC,IAAA,KAAA,CAAW,mBAAkBA,MAAnC,EAAM,C;;;;;;;;;;;;AAYV,SAAA,IAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAyC;MACnCC,MAAAA,CAAAA,MAAAA,CAAAA,KAAAA,OAAAA,IAA8BD,MAAAA,CAAAA,MAAAA,KAAlC,C,EAAuD;QACjDY,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;YACnC,IAAA,KAAA,CACH,+EAA8EZ,MADjF,EAAM,C;AADR,K,MAIO;YACC,IAAA,KAAA,CAAW,mBAAkBA,MAAnC,EAAM,C;;;;QAIJa,GAAAA,GAAMH,MAAAA,CAAAA,QAAAA,EAAAA,SAAAA,EAAZ,OAAYA,C;QACNI,IAAAA,GAAOC,GAAAA,CAAIf,MAAAA,CAAJe,CAAIf,CAAJe,EAAAA,SAAAA,EAAb,OAAaA,C;QACPC,MAAAA,GAASD,GAAAA,CAAIf,MAAAA,CAAJe,CAAIf,CAAJe,EAAAA,SAAAA,EAAf,OAAeA,C;QACTE,IAAAA,GAAN,M;QACM5B,IAAAA,GAAQ,QAAOyB,IAAAA,CAAKzB,IAAK,IAAG2B,MAAAA,CAAO3B,IAAzC,G;;QACM6B,QAAAA,GAAWrB,KAAAA,IAAS;UAClBsB,QAAAA,GAAWC,eAAAA,CAAjB,WAAiBA,C;YACTD,QAAAA,GAAAA,QAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAAAA,KAAAA,CAAAA,GAAR,K;UACM,CAAA,KAAA,IAAUN,GAAAA,CAAAA,QAAAA,CAAhB,KAAgBA,C;;QAEhB,K,EAAW;YACT,I,GAAA,I;aACO,CAAP,KAAO,C;;;UAGHQ,GAAAA,GAAN,E;UACM5B,MAAAA,GAAN,E;;SAEK,IAAL,C,IAAA,K,EAAqB;YACb6B,CAAAA,GAAIzB,KAAAA,CAAV,CAAUA,C;YACJ,CAAA,CAAA,EAAA,CAAA,IAASiB,IAAAA,CAAAA,QAAAA,CAAf,CAAeA,C;;UAEf,C,EAAO;cACCS,IAAAA,GAAOC,CAAAA,CAAAA,MAAAA,IAAY,CAAzB,CAAyB,C;aACzB,O,CAAaC,OAAAA,IAAW;kBACtB,I,GAAe,CAAA,CAAA,EAAA,MAAA,CAAWA,OAAAA,CAA1B,IAAe,C;kBACf,I,GAAA,K;iBACA,I,CAAA,O;AAHF,S;;;;UAQF,C;YACM,CAAA,EAAA,EAAA,EAAA,IAAWT,MAAAA,CAAAA,QAAAA,CAAjB,CAAiBA,C;;UAEjB,E,EAAQ;cACAU,KAAAA,GAAQC,EAAAA,CAAAA,MAAAA,IAAa,CAA3B,EAA2B,C;cAC3B,O,CAAcF,OAAAA,IAAW;kBACvB,I,GAAe,CAAA,CAAA,EAAA,MAAA,CAAWA,OAAAA,CAA1B,IAAe,C;kBACf,I,GAAA,K;iBACA,I,CAAA,O;AAHF,S;;;;UAQF,C,IAAA,E;;;WAGKhC,MAAAA,CAAAA,MAAAA,GAAgB,CAAA,QAAA,CAAA,EAAA,EAAMA,MAAAA,CAAN,CAAMA,CAAN,EAAA;AAAhBA,MAAAA;AAAgB,KAAA,CAAA,CAAhBA,GAA6C,CAAA,SAAA,EAApD,GAAoD,C;AA3CtD,G;;SA8CO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,QAAO,C;;;;;;;;;;;AAWT,SAAA,EAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAuC;MACjCQ,MAAAA,CAAAA,MAAAA,CAAAA,KAAJ,O,EAAgC;QAC1BW,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;YACnC,IAAA,KAAA,CACH,6DAA4DZ,MAD/D,EAAM,C;AADR,K,MAIO;YACC,IAAA,KAAA,CAAW,mBAAkBA,MAAnC,EAAM,C;;;;QAIJiB,IAAAA,GAAN,M;QACM5B,IAAAA,GAAO,MAAA,CAAA,GAAA,CACNuC,CAAAA,IAAK;QACJ;aACKrC,IAAAA,CAAAA,SAAAA,CAAP,CAAOA,C;AADT,K,CAEE,OAAA,CAAA,EAAU;aACHsC,MAAAA,CAAP,CAAOA,C;;AALA,GAAA,EAAA,IAAA,CAAb,KAAa,C;;QAUPX,QAAAA,GAAW,CAACrB,KAAAA,GAAQuB,eAAAA,CAAT,WAASA,CAAT,KAAuC;WAC/CpB,MAAAA,CAAAA,QAAAA,CAAAA,KAAAA,IACH,CAAA,SAAA,EADGA,KACH,CADGA,GAEH,CAAC;AAAE8B,MAAAA,IAAAA,EAAF,KAAA;AAAexC,MAAAA,IAAAA,EAAf,EAAA;AAAA,MAAA,KAAA;AAFL,MAAA;AAEK,KAAD,C;AAHN,G;;SAMO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,QAAO,C;;;;;;;;;;;AAWT,SAAA,KAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAA0C;QAClCkC,CAAAA,GAAIO,EAAAA,CAAAA,MAAAA,EAAAA,SAAAA,EAAV,OAAUA,C;QACJC,CAAAA,GAAI7B,IAAAA,CAAK,CAALA,CAAK,CAALA,EAAAA,WAAAA,EAAV,OAAUA,C;SACV,C;;;;;;;;;;;AAWF,SAAA,IAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAyC;MACnCF,MAAAA,CAAAA,MAAAA,CAAAA,KAAJ,U,EAAmC;QAC7BW,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;YACnC,IAAA,KAAA,CACH,mEAAkEZ,MADrE,EAAM,C;AADR,K,MAIO;YACC,IAAA,KAAA,CAAW,mBAAkBA,MAAnC,EAAM,C;;;;QAIJiB,IAAAA,GAAN,U;QACM5B,IAAAA,GAAN,Y;;QACM6B,QAAAA,GAAW,CAACrB,KAAAA,GAAQuB,eAAAA,CAAT,WAASA,CAAT,EAAA,IAAA,KAA6C;UACtDa,MAAAA,GAASjC,MAAAA,CAAAA,KAAAA,EAAf,IAAeA,C;QACXkC,OAAAA,GAAU;AAAE5C,MAAAA,IAAAA,EAAF,EAAA;AAAY6C,MAAAA,MAAAA,EAA1B;AAAc,K;QACd,O;;YAEQlC,MAAAA,CAAR,MAAQA,C;WACN,S;;oBACE,M;;;;WAGF,Q;;oBACE,K;kBACA,M,GAAA,M;;;;WAGF,Q;;oBACE,K;iCACA,O,EAAA,M;;;;;;cAIIW,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;kBACnC,IAAA,KAAA,CACH,gHAA+GZ,MADlH,EAAM,C;AADR,W,MAIO;kBACC,IAAA,KAAA,CAAW,mBAAkBiC,MAAnC,EAAM,C;;;;;WAKLG,OAAAA,GACH,CAAA,SAAA,EADGA,KACH,CADGA,GAEH,CAAA,QAAA,CAAA;AAAA,MAAA,IAAA;AAAA,MAAA,KAAA;AAAgBN,MAAAA,IAAAA,EAAhB;AAAA,KAAA,EAFJ,OAEI,CAAA,C;AAjCN,G;;SAoCO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,QAAO,C;;;;;;;;;;;AAWT,SAAA,QAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAA6C;QACrCb,IAAAA,GAAN,U;QACM5B,IAAAA,GAAQ,YAAWW,MAAAA,CAAOiB,IAAhC,G;;QACMC,QAAAA,GAAW,CAACrB,KAAAA,GAAQuB,eAAAA,CAAT,WAASA,CAAT,KAAuC;WAC/CvB,KAAAA,YAAAA,MAAAA,GACH,CAAA,SAAA,EADGA,KACH,CADGA,GAEH,CAAC;AAAEiC,MAAAA,IAAAA,EAAF,KAAA;AAAexC,MAAAA,IAAAA,EAAf,EAAA;AAAA,MAAA,KAAA;AAFL,MAAA;AAEK,KAAD,C;AAHN,G;;SAMO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,QAAO,C;;;;;;;;;;;AAWT,SAAA,KAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAA0C;MACpCW,MAAAA,CAAAA,MAAAA,CAAAA,KAAJ,Q,EAAiC;QAC3BW,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;YACnC,IAAA,KAAA,CACH,mEAAkEZ,MADrE,EAAM,C;AADR,K,MAIO;YACC,IAAA,KAAA,CAAW,mBAAkBA,MAAnC,EAAM,C;;;;QAIJa,GAAAA,GAAMH,MAAAA,CAAAA,QAAAA,EAAAA,SAAAA,EAAZ,OAAYA,C;QACN2B,EAAAA,GAAN,E;QACMC,UAAAA,GAAN,E;;OAEK,MAAL,G,IAAA,M,EAA0B;OACxB,I,CAAA,G;UACMV,CAAAA,GAAI5B,MAAAA,CAAV,GAAUA,C;UACJuC,IAAAA,GAAOxB,GAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EAAb,OAAaA,C;eACb,G,IAAA,I;;;QAGIE,IAAAA,GAAN,W;QACM5B,IAAAA,GAAQ,IAAGgD,EAAAA,CAAAA,IAAAA,EAAjB,G;;QACMnB,QAAAA,GAAW,CAACrB,KAAAA,GAAQuB,eAAAA,CAAT,WAASA,CAAT,KAAuC;UAChD,CAAA,KAAA,IAAUP,GAAAA,CAAAA,QAAAA,CAAhB,KAAgBA,C;;QAEhB,K,EAAW;YACT,I,GAAA,I;aACO,CAAP,KAAO,C;;;UAGHpB,MAAAA,GAAN,E;UACM4B,GAAAA,GAAN,K;;SAEK,MAAL,G,IAAA,U,EAA8B;UACxBC,CAAAA,GAAIzB,KAAAA,CAAR,GAAQA,C;YACF0C,IAAAA,GAAOD,UAAAA,CAAb,GAAaA,C;;UAEThB,CAAAA,KAAJ,S,EAAqB;cACbkB,CAAAA,GAAI1C,WAAAA,IAAYA,WAAAA,CAAtB,GAAsBA,C;YAClBsB,eAAAA,CAAAA,CAAAA,EAAJ,KAAIA,C;;;YAGA,CAAA,CAAA,EAAA,CAAA,IAASmB,IAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAAf,KAAeA,C;;UAEf,C,EAAO;cACChB,IAAAA,GAAOC,CAAAA,CAAAA,MAAAA,IAAY,CAAzB,CAAyB,C;aACzB,O,CAAaC,OAAAA,IAAW;kBACtB,I,GAAe,CAAA,GAAA,EAAA,MAAA,CAAaA,OAAAA,CAA5B,IAAe,C;kBACf,I,GAAA,K;iBACA,I,CAAA,O;AAHF,S;;;;UAQEgB,GAAAA,IAAAA,KAAAA,IAAgBC,CAAAA,KAApB,S,EAAqC;YACnC,G,IAAA,C;;;;WAIGjD,MAAAA,CAAAA,MAAAA,GAAgB,CAAA,QAAA,CAAA,EAAA,EAAMA,MAAAA,CAAN,CAAMA,CAAN,EAAA;AAAhBA,MAAAA;AAAgB,KAAA,CAAA,CAAhBA,GAA6C,CAAA,SAAA,EAApD,GAAoD,C;AArCtD,G;;SAwCO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,QAAO,C;;;;;;;;;;;AAWT,SAAA,IAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAyC;MACnCQ,MAAAA,CAAAA,MAAAA,CAAAA,KAAJ,U,EAAmC;QAC7BW,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;YACnC,IAAA,KAAA,CACH,sFAAqFZ,MADxF,EAAM,C;AADR,K,MAIO;YACC,IAAA,KAAA,CAAW,mBAAkBA,MAAnC,EAAM,C;;;;MAIV,I;MACA,M;QACMiB,IAAAA,GAAN,M;QACM5B,IAAAA,GAAN,S;;QACMsD,OAAAA,GAAU9C,KAAAA,IAAS;aACdG,MAAT,E;SACA,I,GAAY4C,MAAAA,CAAZ,I;SACA,I,GAAYA,MAAAA,CAAZ,I;SACA,Q,GAAgBA,MAAAA,CAAhB,Q;WACOL,IAAAA,CAAAA,QAAAA,CAAP,KAAOA,C;AALT,G;;SAQO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,OAAO,C;SACP,I;;;;;;;;;;;AAWF,SAAA,OAAA,CAAA,YAAA,EAAA,WAAA,EAAA,OAAA,EAAkD;MAC5CtC,MAAAA,CAAAA,YAAAA,CAAAA,KAAJ,U,EAAyC;QACnCW,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;YACnC,IAAA,KAAA,CACH,kEAAiEiC,YADpE,EAAM,C;AADR,K,MAIO;YACC,IAAA,KAAA,CAAW,mBAAkBA,YAAnC,EAAM,C;;;;QAIJ5B,IAAAA,GAAN,S;QACM5B,IAAAA,GAAN,Y;;QACM6B,QAAAA,GAAW,CAACrB,KAAAA,GAAQuB,eAAAA,CAAT,WAASA,CAAT,EAAA,IAAA,KAA6C;UACtDpB,MAAAA,GAAS6C,YAAAA,CAAAA,KAAAA,EAAf,IAAeA,C;;QAEX5C,MAAAA,CAAAA,MAAAA,CAAAA,KAAJ,U,EAAmC;UAC7BW,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;cACnC,IAAA,KAAA,CACH,yDAAwDZ,MAD3D,EAAM,C;AADR,O,MAIO;cACC,IAAA,KAAA,CAAW,mBAAkBA,MAAnC,EAAM,C;;;;UAIJ,CAAA,KAAA,EAAA,MAAA,IAAkBA,MAAAA,CAAAA,QAAAA,CAAxB,KAAwBA,C;;QAExB,K,EAAW;aACF,CAAP,KAAO,C;;;WAGF,CAAA,SAAA,EAAP,MAAO,C;AAnBT,G;;SAsBO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,QAAO,C;;;;;;;;;;;AAWT,SAAA,IAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAyC;MACnCC,MAAAA,CAAAA,MAAAA,CAAAA,KAAAA,OAAAA,IAA8BD,MAAAA,CAAAA,MAAAA,KAAlC,C,EAAuD;QACjDY,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;YACnC,IAAA,KAAA,CACH,mFAAkFZ,MADrF,EAAM,C;AADR,K,MAIO;YACC,IAAA,KAAA,CAAW,mBAAkBA,MAAnC,EAAM,C;;;;QAIJ8C,KAAAA,GAAQpC,MAAAA,CAAAA,OAAAA,EAAAA,SAAAA,EAAd,OAAcA,C;QACRqC,OAAAA,GAAUhC,GAAAA,CAAIf,MAAAA,CAAJe,CAAIf,CAAJe,EAAAA,SAAAA,EAAhB,OAAgBA,C;QACVE,IAAAA,GAAN,M;QACM5B,IAAAA,GAAQ,IAAG0D,OAAAA,CAAQ1D,IAAzB,G;;QACM6B,QAAAA,GAAW,CAACrB,KAAAA,GAAQuB,eAAAA,CAAT,WAASA,CAAT,KAAuC;UAChD,CAAA,KAAA,EAAA,MAAA,IAAkB0B,KAAAA,CAAAA,QAAAA,CAAxB,KAAwBA,C;;QAExB,K,EAAW;YACT,I,GAAA,I;aACO,CAAP,KAAO,C;;;YAGT,M;UACMrD,MAAAA,GAAN,E;UACM4B,GAAAA,GAAN,E;;SAEK,IAAI2B,CAAAA,GAAT,C,EAAgBA,CAAAA,GAAInD,KAAAA,CAApB,M,EAAkCmD,CAAlC,E,EAAuC;YAC/B1B,CAAAA,GAAIzB,KAAAA,CAAV,CAAUA,C;YACJ,CAAA,CAAA,EAAA,CAAA,IAASkD,OAAAA,CAAAA,QAAAA,CAAf,CAAeA,C;;UAEf,C,EAAO;cACCxB,IAAAA,GAAOC,CAAAA,CAAAA,MAAAA,IAAY,CAAzB,CAAyB,C;aACzB,O,CAAaC,OAAAA,IAAW;kBACtB,I,GAAe,CAAA,CAAA,EAAA,MAAA,CAAWA,OAAAA,CAA1B,IAAe,C;kBACf,I,GAAA,K;iBACA,I,CAAA,O;AAHF,S;;;;UAQF,C,IAAA,C;;;WAGKhC,MAAAA,CAAAA,MAAAA,GAAgB,CAAA,QAAA,CAAA,EAAA,EAAMA,MAAAA,CAAN,CAAMA,CAAN,EAAA;AAAhBA,MAAAA;AAAgB,KAAA,CAAA,CAAhBA,GAA6C,CAAA,SAAA,EAApD,GAAoD,C;AA7BtD,G;;SAgCO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,QAAO,C;;;;;;;;;;;AAWT,SAAA,OAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAA4C;QACpCwB,IAAAA,GAAN,S;QACM5B,IAAAA,GAAQ,YAAWE,IAAAA,CAAAA,SAAAA,CAAAA,MAAAA,CAAzB,E;;QACM2B,QAAAA,GAAW,CAACrB,KAAAA,GAAQuB,eAAAA,CAAT,WAASA,CAAT,KAAuC;WAC/CvB,KAAAA,KAAAA,MAAAA,GACH,CAAA,SAAA,EADGA,KACH,CADGA,GAEH,CAAC;AAAEiC,MAAAA,IAAAA,EAAF,KAAA;AAAexC,MAAAA,IAAAA,EAAf,EAAA;AAAA,MAAA,KAAA;AAFL,MAAA;AAEK,KAAD,C;AAHN,G;;SAMO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,QAAO,C;;;;;;;;;;;AAWT,SAAA,MAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAA2C;MACrCW,MAAAA,CAAAA,MAAAA,CAAAA,KAAJ,Q,EAAiC;QAC3BW,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;YACnC,IAAA,KAAA,CACH,gEAA+DZ,MADlE,EAAM,C;AADR,K,MAIO;YACC,IAAA,KAAA,CAAW,mBAAkBA,MAAnC,EAAM,C;;;;QAIJa,GAAAA,GAAMH,MAAAA,CAAAA,QAAAA,EAAAA,SAAAA,EAAZ,OAAYA,C;QACN2B,EAAAA,GAAN,E;QACMC,UAAAA,GAAN,E;;OAEK,MAAL,G,IAAA,M,EAA0B;OACxB,I,CAAA,G;UACMV,CAAAA,GAAI5B,MAAAA,CAAV,GAAUA,C;UACJuC,IAAAA,GAAOxB,GAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EAAb,OAAaA,C;eACb,G,IAAA,I;;;QAGIE,IAAAA,GAAN,Q;QACM5B,IAAAA,GAAQ,IAAGgD,EAAAA,CAAAA,IAAAA,EAAjB,G;;QACMnB,QAAAA,GAAW,CAACrB,KAAAA,GAAQuB,eAAAA,CAAT,WAASA,CAAT,KAAuC;UAChD,CAAA,KAAA,IAAUP,GAAAA,CAAAA,QAAAA,CAAhB,KAAgBA,C;;QAEhB,K,EAAW;YACT,I,GAAA,I;aACO,CAAP,KAAO,C;;;UAGHpB,MAAAA,GAAN,E;UACM4B,GAAAA,GAAN,E;UACM4B,SAAAA,GAAYC,MAAAA,CAAAA,IAAAA,CAAlB,KAAkBA,C;UACZC,cAAAA,GAAiBD,MAAAA,CAAAA,IAAAA,CAAvB,UAAuBA,C;UACjBpC,IAAAA,GAAO,IAAA,GAAA,CAAQmC,SAAAA,CAAAA,MAAAA,CAArB,cAAqBA,CAAR,C;SAEb,O,CAAaR,GAAAA,IAAO;UACdnB,CAAAA,GAAIzB,KAAAA,CAAR,GAAQA,C;YACF0C,IAAAA,GAAOD,UAAAA,CAAb,GAAaA,C;;UAEThB,CAAAA,KAAJ,S,EAAqB;cACbkB,CAAAA,GAAI1C,WAAAA,IAAYA,WAAAA,CAAtB,GAAsBA,C;YAClBsB,eAAAA,CAAAA,CAAAA,EAAJ,KAAIA,C;;;UAGF,CAAJ,I,EAAW;cACHI,CAAAA,GAAI;AAAEM,UAAAA,IAAAA,EAAF,KAAA;AAAexC,UAAAA,IAAAA,EAAM,CAArB,GAAqB,CAArB;AAA4BO,UAAAA,KAAAA,EAAtC;AAAU,S;eACV,I,CAAA,C;;;;YAII,CAAA,CAAA,EAAA,CAAA,IAAS0C,IAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAAf,KAAeA,C;;UAEf,C,EAAO;cACChB,IAAAA,GAAOC,CAAAA,CAAAA,MAAAA,IAAY,CAAzB,CAAyB,C;aACzB,O,CAAaC,OAAAA,IAAW;kBACtB,I,GAAe,CAAA,GAAA,EAAA,MAAA,CAAaA,OAAAA,CAA5B,IAAe,C;kBACf,I,GAAA,K;iBACA,I,CAAA,O;AAHF,S;;;;UAQEgB,GAAAA,IAAAA,KAAAA,IAAgBC,CAAAA,KAApB,S,EAAqC;YACnC,G,IAAA,C;;AA5BJ,K;WAgCOjD,MAAAA,CAAAA,MAAAA,GAAgB,CAAA,QAAA,CAAA,EAAA,EAAMA,MAAAA,CAAN,CAAMA,CAAN,EAAA;AAAhBA,MAAAA;AAAgB,KAAA,CAAA,CAAhBA,GAA6C,CAAA,SAAA,EAApD,GAAoD,C;AA9CtD,G;;SAiDO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,QAAO,C;;;;;;;;;;;AAWT,SAAA,QAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAA6C;SACpCe,KAAAA,CAAM,CAAA,MAAA,EAANA,WAAM,CAANA,EAAAA,WAAAA,EAAP,OAAOA,C;;;;;;;;;;;AAWT,SAAA,OAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAA4C;MACtCP,MAAAA,CAAAA,MAAAA,CAAAA,KAAJ,Q,EAAiC;QAC3BW,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;YACnC,IAAA,KAAA,CACH,iEAAgEZ,MADnE,EAAM,C;AADR,K,MAIO;YACC,IAAA,KAAA,CAAW,mBAAkBA,MAAnC,EAAM,C;;;;QAIJa,GAAAA,GAAMH,MAAAA,CAAAA,QAAAA,EAAAA,SAAAA,EAAZ,OAAYA,C;QACN2B,EAAAA,GAAN,E;QACMC,UAAAA,GAAN,E;;OAEK,MAAL,G,IAAA,M,EAA0B;OACxB,I,CAAA,G;UACMV,CAAAA,GAAI5B,MAAAA,CAAV,GAAUA,C;UACJuC,IAAAA,GAAOxB,GAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EAAb,OAAaA,C;eACb,G,IAAA,I;;;QAGIE,IAAAA,GAAN,S;QACM5B,IAAAA,GAAQ,IAAGgD,EAAAA,CAAAA,IAAAA,EAAjB,O;;QACMnB,QAAAA,GAAW,CAACrB,KAAAA,GAAQuB,eAAAA,CAAT,WAASA,CAAT,KAAuC;UAChD,CAAA,KAAA,IAAUP,GAAAA,CAAAA,QAAAA,CAAhB,KAAgBA,C;;QAEhB,K,EAAW;YACT,I,GAAA,I;aACO,CAAP,KAAO,C;;;UAGHpB,MAAAA,GAAN,E;UACM4B,GAAAA,GAAN,E;;SAEK,MAAL,G,IAAA,U,EAA8B;UACxBC,CAAAA,GAAIzB,KAAAA,CAAR,GAAQA,C;YACF0C,IAAAA,GAAOD,UAAAA,CAAb,GAAaA,C;;UAEThB,CAAAA,KAAJ,S,EAAqB;cACbkB,CAAAA,GAAI1C,WAAAA,IAAYA,WAAAA,CAAtB,GAAsBA,C;YAClBsB,eAAAA,CAAAA,CAAAA,EAAJ,KAAIA,C;;;YAGA,CAAA,CAAA,EAAA,CAAA,IAASmB,IAAAA,CAAAA,QAAAA,CAAAA,CAAAA,EAAf,KAAeA,C;;UAEf,C,EAAO;cACChB,IAAAA,GAAOC,CAAAA,CAAAA,MAAAA,IAAY,CAAzB,CAAyB,C;aACzB,O,CAAaC,OAAAA,IAAW;kBACtB,I,GAAe,CAAA,GAAA,EAAA,MAAA,CAAaA,OAAAA,CAA5B,IAAe,C;kBACf,I,GAAA,K;iBACA,I,CAAA,O;AAHF,S;;;;UAQEgB,GAAAA,IAAAA,KAAAA,IAAgBC,CAAAA,KAApB,S,EAAqC;YACnC,G,IAAA,C;;;;WAIGjD,MAAAA,CAAAA,MAAAA,GAAgB,CAAA,QAAA,CAAA,EAAA,EAAMA,MAAAA,CAAN,CAAMA,CAAN,EAAA;AAAhBA,MAAAA;AAAgB,KAAA,CAAA,CAAhBA,GAA6C,CAAA,SAAA,EAApD,GAAoD,C;AArCtD,G;;SAwCO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,QAAO,C;;;;;;;;;;;AAWT,SAAA,MAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAA2C;MACrCQ,MAAAA,CAAAA,MAAAA,CAAAA,KAAJ,Q,EAAiC;QAC3BW,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;YACnC,IAAA,KAAA,CACH,+DAA8DZ,MADjE,EAAM,C;AADR,K,MAIO;YACC,IAAA,KAAA,CAAW,mBAAkBA,MAAnC,EAAM,C;;;;QAIJ;AAAA,IAAA;AAAA,MAAN,O;QACMoD,EAAAA,GAAKC,KAAAA,CAAX,MAAWA,C;;MAEPpD,MAAAA,CAAAA,EAAAA,CAAAA,KAAJ,U,EAA+B;QACzBW,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;YACnC,IAAA,KAAA,CACH,gDAA+CZ,MADlD,IAAM,C;AADR,K,MAIO;YACC,IAAA,KAAA,CAAW,iBAAgBA,MAAjC,EAAM,C;;;;QAIJuC,IAAAA,GAAOnC,IAAAA,CAAAA,EAAAA,EAAAA,WAAAA,EAAb,OAAaA,C;QACPa,IAAAA,GAAN,Q;QACM5B,IAAAA,GAAN,M;;QACM6B,QAAAA,GAAWrB,KAAAA,IAAS;UAClB,CAAA,KAAA,EAAA,MAAA,IAAkB0C,IAAAA,CAAAA,QAAAA,CAAxB,KAAwBA,C;;QAExB,K,EAAW;YACT,I,GAAA,I;aACO,CAAP,KAAO,C;;;WAGF,CAAA,SAAA,EAAP,MAAO,C;AART,G;;SAWO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,QAAO,C;;;;;;;;;;;AAWT,SAAA,KAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAA0C;MACpCtC,MAAAA,CAAAA,MAAAA,CAAAA,KAAJ,O,EAAgC;QAC1BW,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;YACnC,IAAA,KAAA,CACH,8DAA6DZ,MADhE,EAAM,C;AADR,K,MAIO;YACC,IAAA,KAAA,CAAW,mBAAkBA,MAAnC,EAAM,C;;;;QAIJsD,KAAAA,GAAQtD,MAAAA,CAAAA,GAAAA,CAAW4B,CAAAA,IAAKb,GAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EAA9B,OAA8BA,CAAhBf,C;QACR8C,KAAAA,GAAQpC,MAAAA,CAAAA,OAAAA,EAAAA,SAAAA,EAAd,OAAcA,C;QACRO,IAAAA,GAAN,O;QACM5B,IAAAA,GAAQ,IAAGiE,KAAAA,CAAAA,GAAAA,CAAUC,CAAAA,IAAKA,CAAAA,CAAfD,IAAAA,EAAAA,IAAAA,EAAjB,G;;QACMpC,QAAAA,GAAW,CAACrB,KAAAA,GAAQuB,eAAAA,CAAT,WAASA,CAAT,KAAuC;UAChD,CAAA,KAAA,IAAU0B,KAAAA,CAAAA,QAAAA,CAAhB,KAAgBA,C;;QAEhB,K,EAAW;YACT,I,GAAA,I;aACO,CAAP,KAAO,C;;;UAGHzB,GAAAA,GAAN,E;UACM5B,MAAAA,GAAN,E;UACM+D,MAAAA,GAASC,IAAAA,CAAAA,GAAAA,CAAS5D,KAAAA,CAAT4D,MAAAA,EAAuBH,KAAAA,CAAtC,MAAeG,C;;SAEV,IAAIT,CAAAA,GAAT,C,EAAgBA,CAAAA,GAAhB,M,EAA4BA,CAA5B,E,EAAiC;YACzBT,IAAAA,GAAOe,KAAAA,CAAb,CAAaA,C;YACPhC,CAAAA,GAAIzB,KAAAA,CAAV,CAAUA,C;;UAEN,CAAJ,I,EAAW;cACH2B,CAAAA,GAAI;AAAEM,UAAAA,IAAAA,EAAF,KAAA;AAAexC,UAAAA,IAAAA,EAAM,CAArB,CAAqB,CAArB;AAA0BO,UAAAA,KAAAA,EAApC;AAAU,S;eACV,I,CAAA,C;;;;YAII,CAAA,CAAA,EAAA,CAAA,IAAS0C,IAAAA,CAAAA,QAAAA,CAAf,CAAeA,C;;UAEf,C,EAAO;cACChB,IAAAA,GAAOC,CAAAA,CAAAA,MAAAA,IAAY,CAAzB,CAAyB,C;aACzB,O,CAAaC,OAAAA,IAAW;kBACtB,I,GAAe,CAAA,CAAA,EAAA,MAAA,CAAWA,OAAAA,CAA1B,IAAe,C;kBACf,I,GAAA,K;iBACA,I,CAAA,O;AAHF,S;;;;UAQF,C,IAAA,C;;;WAGKhC,MAAAA,CAAAA,MAAAA,GAAgB,CAAA,QAAA,CAAA,EAAA,EAAMA,MAAAA,CAAN,CAAMA,CAAN,EAAA;AAAhBA,MAAAA;AAAgB,KAAA,CAAA,CAAhBA,GAA6C,CAAA,SAAA,EAApD,GAAoD,C;AArCtD,G;;SAwCO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,QAAO,C;;;;;;;;;;;AAWT,SAAA,KAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAA0C;MACpCQ,MAAAA,CAAAA,MAAAA,CAAAA,KAAJ,O,EAAgC;QAC1BW,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;YACnC,IAAA,KAAA,CACH,8DAA6DZ,MADhE,EAAM,C;AADR,K,MAIO;YACC,IAAA,KAAA,CAAW,mBAAkBA,MAAnC,EAAM,C;;;;QAIJsD,KAAAA,GAAQtD,MAAAA,CAAAA,GAAAA,CAAW4B,CAAAA,IAAKb,GAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EAA9B,OAA8BA,CAAhBf,C;QACRiB,IAAAA,GAAN,O;QACM5B,IAAAA,GAAOiE,KAAAA,CAAAA,GAAAA,CAAUC,CAAAA,IAAKA,CAAAA,CAAfD,IAAAA,EAAAA,IAAAA,CAAb,KAAaA,C;;QACPpC,QAAAA,GAAW,CAACrB,KAAAA,GAAQuB,eAAAA,CAAT,WAASA,CAAT,KAAuC;UAChD3B,MAAAA,GAAN,E;;SAEK,MAAL,C,IAAA,K,EAAuB;YACf,CAAA,CAAA,EAAA,CAAA,IAAS8D,CAAAA,CAAAA,QAAAA,CAAf,KAAeA,C;;UAEX,CAAJ,C,EAAQ;eACC,CAAA,SAAA,EAAP,CAAO,C;;;aAGT,I,CAAA,C;;;WAEF,C,EAAA,I,GAAA,I;WACA,M;AAbF,G;;SAgBO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,QAAO,C;;;;;;;;;;;AAWT,SAAA,YAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAiD;MAC3CtD,MAAAA,CAAAA,MAAAA,CAAAA,KAAJ,O,EAAgC;QAC1BW,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;YACnC,IAAA,KAAA,CACH,qEAAoEZ,MADvE,EAAM,C;AADR,K,MAIO;YACC,IAAA,KAAA,CAAW,mBAAkBA,MAAnC,EAAM,C;;;;QAIJqD,KAAAA,GAAQrD,MAAAA,CAAAA,GAAAA,CAAW4B,CAAAA,IAAKb,GAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EAA9B,OAA8BA,CAAhBf,C;QACRiB,IAAAA,GAAN,c;QACM5B,IAAAA,GAAOgE,KAAAA,CAAAA,GAAAA,CAAUK,CAAAA,IAAKA,CAAAA,CAAfL,IAAAA,EAAAA,IAAAA,CAAb,KAAaA,C;;QACPnC,QAAAA,GAAW,CAACrB,KAAAA,GAAQuB,eAAAA,CAAT,WAASA,CAAT,KAAuC;QAClDE,CAAAA,GAAJ,K;;SAEK,MAAL,C,IAAA,K,EAAuB;YACf,CAAA,CAAA,EAAA,CAAA,IAASoC,CAAAA,CAAAA,QAAAA,CAAf,CAAeA,C;;UAEf,C,EAAO;UACL,I,GAAA,I;eACO,CAAP,CAAO,C;;;UAGT,C;;;WAGK,CAAA,SAAA,EAAP,CAAO,C;AAdT,G;;SAiBO,IAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAP,QAAO,C;;;;;;;;;AAST,MAAMC,KAAAA,GAAQ;AAAA,EAAA,GAAA;AAAA,EAAA,IAAA;QAAA,EAAA;AAAA,EAAA,KAAA;YAAA,IAAA;AAAA,EAAA,QAAA;aAAA,KAAA;AAAA,EAAA,IAAA;AAAA,EAAA,IAAA;AAAA,EAAA,OAAA;AAAA,EAAA,MAAA;AAAA,EAAA,QAAA;AAAA,EAAA,OAAA;AAAA,EAAA,MAAA;AAAA,EAAA,KAAA;AAAA,EAAA,KAAA;AAAA,EAAA,YAAA;;;;;;;;AAAA,CAAd;ACp4BA;;;;;;AAMA,MAAMC,KAAAA,GAAQ,CAAA,WAAA,EAAA,OAAA,EAAA,SAAA,EAAA,QAAA,EAAA,OAAA,EAAA,cAAA,EAAA,cAAA,EAAA,UAAA,EAAA,mBAAA,EAAA,YAAA,EAAA,YAAA,EAAA,WAAA,EAAA,KAAA,EAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,QAAA,EAAA,KAAA,EAAA,QAAA,EAAA,QAAA,EAAA,aAAA,EAAA,aAAA,EAAA,YAAA,EAAA,mBAAA,EAAA,WAAA,EAAA,SAAA,EAAd,SAAc,CAAd;;;;;;;AAqCA,MAAMC,KAAAA,GAAQ;OACPhE,KAAAA,IAASA,KAAAA,KAAUiE;AADZ,CAAd;AAIAF,KAAAA,CAAAA,OAAAA,CAAcvE,IAAAA,IAAQ;QACpB,I,IAAcQ,KAAAA,IAASI,MAAAA,CAAAA,KAAAA,CAAAA,KAAvB,I;AADF2D,CAAAA;;;;;;;;AAWAC,KAAAA,CAAAA,IAAAA,GAAahE,KAAAA,IAASI,MAAAA,CAAAA,KAAAA,CAAAA,KAAAA,MAAAA,IAA4B,CAAC8D,KAAAA,CAAnDF,KAAmDE,CAAnDF;ACtDA;;;;;;;;AAOA,SAAA,WAAA,CAAqBG,MAAAA,GAArB,EAAA,EAAkC;QAC1BX,KAAAA,GAAAA,QAAAA,CAAAA,EAAAA,EAAAA,KAAAA,EAEAW,MAAAA,CAAAA,KAAAA,IAFN,EAAMX,C;;;;;;;;;;;WAcN,M,CAAA,M,EAAA,W,EAAkCY,OAAAA,GAAlC,E,EAAgD;QAC1ClE,QAAAA,CAAJ,MAAIA,C,EAAkB;eACXC,MAAAA,CAAT,M;;;UAGIuC,IAAAA,GAAOoB,KAAAA,CAAAA,GAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EAAAA,OAAAA,EAAAA;AAAb,MAAA;AAAaA,KAAAA,CAAAA,C;;aAEb,M,CAAA,I,EAAsB;UAChB,gBAAJ,M,EAA4B;YACtB/C,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAJ,Y,EAA2C;gBACnC,IAAA,KAAA,CAAN,2EAAM,C;AADR,S,MAIO;gBACC,IAAA,KAAA,CAAN,wBAAM,C;;;;aAIHsD,MAAAA,CAAAA,MAAAA,CAAP,IAAOA,C;;;WAGT,c,CAAA,M,EAAA,S,EAAyC;AAAErE,MAAAA,KAAAA,EAA3C;AAAyC,K;WACzC,c,CAAA,M,EAAA,I,EAAoC;AAAEA,MAAAA,KAAAA,EAAtC;AAAoC,K;WAEpC,I,GAAc0C,IAAAA,CAAd,I;WACA,I,GAAcA,IAAAA,CAAd,I;WACA,M,GAAA,M;WACA,Q,GAAA,W;WACA,O,GAAA,O;;WAEA,M,GAAgB1C,KAAAA,IAAS;YACjB,CAAA,KAAA,EAAA,MAAA,IAAkB0C,IAAAA,CAAAA,QAAAA,CAAxB,KAAwBA,C;;UAExB,K,EAAW;cACH,IAAA,WAAA,CAAN,KAAM,C;;;aAGR,M;AAPF,K;;WAUA,I,GAAc1C,KAAAA,IAAS;YACf,CAAA,KAAA,IAAU0C,IAAAA,CAAAA,QAAAA,CAAhB,KAAgBA,C;aACT,CAAP,K;AAFF,K;;WAKA,Q,GAAkB1C,KAAAA,IAAS;YACnB,CAAA,KAAA,EAAA,MAAA,IAAkB0C,IAAAA,CAAAA,QAAAA,CAAxB,KAAwBA,C;;UAExB,K,EAAW;eACF,CAAC,IAAA,WAAA,CAAR,KAAQ,CAAD,C;;;aAGF,CAAA,SAAA,EAAP,MAAO,C;AAPT,K;;WAUA,M;;;;;;;SAOF,I,CAAA,K,EAAA,O,CAA2BtB,IAAAA,IAAQ;UAC3BsB,IAAAA,GAAOoB,KAAAA,CAAb,IAAaA,C;;WAEb,I,IAAe,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,KAA+B;YACtCtE,IAAAA,GAAOkD,IAAAA,CAAAA,MAAAA,EAAAA,WAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EAAAA,OAAAA,EAAAA;AAAb,QAAA;AAAaA,OAAAA,CAAAA,C;YACPX,CAAAA,GAAIgB,MAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAAV,OAAUA,C;aACV,C;AAHF,K;AAHF,G;;;;;SAcA,M;;ACpGF;;;;;;;AAMA,MAAMA,MAAAA,GAASuB,WAAf,EAAA","sourcesContent":["/**\n * Define a struct error.\n *\n * @type {StructError}\n */\n\nclass StructError extends TypeError {\n  static format(attrs) {\n    const { type, path, value } = attrs\n    const message = `Expected a value of type \\`${type}\\`${\n      path.length ? ` for \\`${path.join('.')}\\`` : ''\n    } but received \\`${JSON.stringify(value)}\\`.`\n    return message\n  }\n\n  constructor(attrs) {\n    const message = StructError.format(attrs)\n    super(message)\n\n    const { data, path, value, reason, type, errors = [] } = attrs\n    this.data = data\n    this.path = path\n    this.value = value\n    this.reason = reason\n    this.type = type\n    this.errors = errors\n\n    if (!errors.length) {\n      errors.push(this)\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = new Error().stack\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {StructError}\n */\n\nexport default StructError\n","var toString = Object.prototype.toString;\n\nmodule.exports = function kindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n\n  var type = typeof val;\n  if (type === 'boolean') return 'boolean';\n  if (type === 'string') return 'string';\n  if (type === 'number') return 'number';\n  if (type === 'symbol') return 'symbol';\n  if (type === 'function') {\n    return isGeneratorFn(val) ? 'generatorfunction' : 'function';\n  }\n\n  if (isArray(val)) return 'array';\n  if (isBuffer(val)) return 'buffer';\n  if (isArguments(val)) return 'arguments';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  if (isRegexp(val)) return 'regexp';\n\n  switch (ctorName(val)) {\n    case 'Symbol': return 'symbol';\n    case 'Promise': return 'promise';\n\n    // Set, Map, WeakSet, WeakMap\n    case 'WeakMap': return 'weakmap';\n    case 'WeakSet': return 'weakset';\n    case 'Map': return 'map';\n    case 'Set': return 'set';\n\n    // 8-bit typed arrays\n    case 'Int8Array': return 'int8array';\n    case 'Uint8Array': return 'uint8array';\n    case 'Uint8ClampedArray': return 'uint8clampedarray';\n\n    // 16-bit typed arrays\n    case 'Int16Array': return 'int16array';\n    case 'Uint16Array': return 'uint16array';\n\n    // 32-bit typed arrays\n    case 'Int32Array': return 'int32array';\n    case 'Uint32Array': return 'uint32array';\n    case 'Float32Array': return 'float32array';\n    case 'Float64Array': return 'float64array';\n  }\n\n  if (isGeneratorObj(val)) {\n    return 'generator';\n  }\n\n  // Non-plain objects\n  type = toString.call(val);\n  switch (type) {\n    case '[object Object]': return 'object';\n    // iterators\n    case '[object Map Iterator]': return 'mapiterator';\n    case '[object Set Iterator]': return 'setiterator';\n    case '[object String Iterator]': return 'stringiterator';\n    case '[object Array Iterator]': return 'arrayiterator';\n  }\n\n  // other\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n};\n\nfunction ctorName(val) {\n  return val.constructor ? val.constructor.name : null;\n}\n\nfunction isArray(val) {\n  if (Array.isArray) return Array.isArray(val);\n  return val instanceof Array;\n}\n\nfunction isError(val) {\n  return val instanceof Error || (typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number');\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function'\n    && typeof val.getDate === 'function'\n    && typeof val.setDate === 'function';\n}\n\nfunction isRegexp(val) {\n  if (val instanceof RegExp) return true;\n  return typeof val.flags === 'string'\n    && typeof val.ignoreCase === 'boolean'\n    && typeof val.multiline === 'boolean'\n    && typeof val.global === 'boolean';\n}\n\nfunction isGeneratorFn(name, val) {\n  return ctorName(name) === 'GeneratorFunction';\n}\n\nfunction isGeneratorObj(val) {\n  return typeof val.throw === 'function'\n    && typeof val.return === 'function'\n    && typeof val.next === 'function';\n}\n\nfunction isArguments(val) {\n  try {\n    if (typeof val.length === 'number' && typeof val.callee === 'function') {\n      return true;\n    }\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * If you need to support Safari 5-7 (8-10 yr-old browser),\n * take a look at https://github.com/feross/is-buffer\n */\n\nfunction isBuffer(val) {\n  if (val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n  return false;\n}\n","/**\n * A private string to identify structs by.\n *\n * @type {String}\n */\n\nconst IS_STRUCT = '@@__STRUCT__@@'\n\n/**\n * A private string to refer to a struct's kind.\n *\n * @type {String}\n */\n\nconst KIND = '@@__KIND__@@'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport { IS_STRUCT, KIND }\n","import { IS_STRUCT } from './constants'\n\n/**\n * Check if a `value` is a struct.\n *\n * @param {Any} value\n * @return {Boolean}\n */\n\nexport function isStruct(value) {\n  return !!(value && value[IS_STRUCT])\n}\n\n/**\n * Resolve `defaults`, for an optional `value`.\n *\n * @param {Function|Any} defaults\n * @param {Any} value\n * @return {Any}\n */\n\nexport function resolveDefaults(defaults, value) {\n  return typeof defaults === 'function' ? defaults(value) : defaults\n}\n","import kindOf from 'kind-of'\n\nimport { KIND } from './constants'\nimport { isStruct, resolveDefaults } from './utils'\n\n/**\n * Kind.\n *\n * @type {Kind}\n */\n\nclass Kind {\n  constructor(name, type, validate) {\n    this.name = name\n    this.type = type\n    this.validate = validate\n  }\n}\n\n/**\n * Any.\n *\n * @param {Array|Function|Object|String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction any(schema, defaults, options) {\n  if (isStruct(schema)) {\n    return schema[KIND]\n  }\n\n  if (schema instanceof Kind) {\n    return schema\n  }\n\n  switch (kindOf(schema)) {\n    case 'array': {\n      return schema.length > 1\n        ? tuple(schema, defaults, options)\n        : list(schema, defaults, options)\n    }\n\n    case 'function': {\n      return func(schema, defaults, options)\n    }\n\n    case 'object': {\n      return object(schema, defaults, options)\n    }\n\n    case 'string': {\n      let required = true\n      let type\n\n      if (schema.endsWith('?')) {\n        required = false\n        schema = schema.slice(0, -1)\n      }\n\n      if (schema.includes('|')) {\n        const scalars = schema.split(/\\s*\\|\\s*/g)\n        type = union(scalars, defaults, options)\n      } else if (schema.includes('&')) {\n        const scalars = schema.split(/\\s*&\\s*/g)\n        type = intersection(scalars, defaults, options)\n      } else {\n        type = scalar(schema, defaults, options)\n      }\n\n      if (!required) {\n        type = optional(type, undefined, options)\n      }\n\n      return type\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    throw new Error(\n      `A schema definition must be an object, array, string or function, but you passed: ${schema}`\n    )\n  } else {\n    throw new Error(`Invalid schema: ${schema}`)\n  }\n}\n\n/**\n * Dict.\n *\n * @param {Array} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction dict(schema, defaults, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 2) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Dict structs must be defined as an array with two elements, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const keys = any(schema[0], undefined, options)\n  const values = any(schema[1], undefined, options)\n  const name = 'dict'\n  const type = `dict<${keys.type},${values.type}>`\n  const validate = value => {\n    const resolved = resolveDefaults(defaults)\n    value = resolved ? { ...resolved, ...value } : value\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const ret = {}\n    const errors = []\n\n    for (let k in value) {\n      const v = value[k]\n      const [e, r] = keys.validate(k)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      k = r\n      const [e2, r2] = values.validate(v)\n\n      if (e2) {\n        const allE2 = e2.errors || [e2]\n        allE2.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[k] = r2\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Enum.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction en(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Enum structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const name = 'enum'\n  const type = schema\n    .map(s => {\n      try {\n        return JSON.stringify(s)\n      } catch (e) {\n        return String(s)\n      }\n    })\n    .join(' | ')\n\n  const validate = (value = resolveDefaults(defaults)) => {\n    return schema.includes(value)\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Enums.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction enums(schema, defaults, options) {\n  const e = en(schema, undefined, options)\n  const l = list([e], defaults, options)\n  return l\n}\n\n/**\n * Function.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction func(schema, defaults, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Function structs must be defined as a function, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const name = 'function'\n  const type = '<function>'\n  const validate = (value = resolveDefaults(defaults), data) => {\n    const result = schema(value, data)\n    let failure = { path: [], reason: null }\n    let isValid\n\n    switch (kindOf(result)) {\n      case 'boolean': {\n        isValid = result\n        break\n      }\n      case 'string': {\n        isValid = false\n        failure.reason = result\n        break\n      }\n      case 'object': {\n        isValid = false\n        failure = { ...failure, ...result }\n        break\n      }\n      default: {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `Validator functions must return a boolean, an error reason string or an error reason object, but you passed: ${schema}`\n          )\n        } else {\n          throw new Error(`Invalid result: ${result}`)\n        }\n      }\n    }\n\n    return isValid\n      ? [undefined, value]\n      : [{ type, value, data: value, ...failure }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Instance.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction instance(schema, defaults, options) {\n  const name = 'instance'\n  const type = `instance<${schema.name}>`\n  const validate = (value = resolveDefaults(defaults)) => {\n    return value instanceof schema\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Interface.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction inter(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Interface structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'interface'\n  const type = `{${ks.join()}}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = value\n\n    for (const key in properties) {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Lazy.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction lazy(schema, defaults, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Lazy structs must be defined as an function that returns a schema, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  let kind\n  let struct\n  const name = 'lazy'\n  const type = `lazy...`\n  const compile = value => {\n    struct = schema()\n    kind.name = struct.kind\n    kind.type = struct.type\n    kind.validate = struct.validate\n    return kind.validate(value)\n  }\n\n  kind = new Kind(name, type, compile)\n  return kind\n}\n\n/**\n * Dynamic.\n *\n * @param {Function} createSchema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction dynamic(createSchema, defaults, options) {\n  if (kindOf(createSchema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Dynamic structs must be defined as a function, but you passed: ${createSchema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${createSchema}`)\n    }\n  }\n\n  const name = 'dynamic'\n  const type = 'dynamic...'\n  const validate = (value = resolveDefaults(defaults), data) => {\n    const schema = createSchema(value, data)\n\n    if (kindOf(schema) !== 'function') {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `Dynamic structs must return a schema, but you passed: ${schema}`\n        )\n      } else {\n        throw new Error(`Invalid schema: ${schema}`)\n      }\n    }\n\n    const [error, result] = schema.validate(value)\n\n    if (error) {\n      return [error]\n    }\n\n    return [undefined, result]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * List.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction list(schema, defaults, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `List structs must be defined as an array with a single element, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const array = scalar('array', undefined, options)\n  const element = any(schema[0], undefined, options)\n  const name = 'list'\n  const type = `[${element.type}]`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error, result] = array.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    value = result\n    const errors = []\n    const ret = []\n\n    for (let i = 0; i < value.length; i++) {\n      const v = value[i]\n      const [e, r] = element.validate(v)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[i] = r\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Literal.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction literal(schema, defaults, options) {\n  const name = 'literal'\n  const type = `literal: ${JSON.stringify(schema)}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    return value === schema\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Object.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction object(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Object structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'object'\n  const type = `{${ks.join()}}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = {}\n    const valueKeys = Object.keys(value)\n    const propertiesKeys = Object.keys(properties)\n    const keys = new Set(valueKeys.concat(propertiesKeys))\n\n    keys.forEach(key => {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      if (!kind) {\n        const e = { data: value, path: [key], value: v }\n        errors.push(e)\n        return\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        return\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    })\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Optional.\n *\n * @param {Any} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction optional(schema, defaults, options) {\n  return union([schema, 'undefined'], defaults, options)\n}\n\n/**\n * Partial.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction partial(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Partial structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'partial'\n  const type = `{${ks.join()},...}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = {}\n\n    for (const key in properties) {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Scalar.\n *\n * @param {String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction scalar(schema, defaults, options) {\n  if (kindOf(schema) !== 'string') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Scalar structs must be defined as a string, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const { types } = options\n  const fn = types[schema]\n\n  if (kindOf(fn) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `No struct validator function found for type \"${schema}\".`\n      )\n    } else {\n      throw new Error(`Invalid type: ${schema}`)\n    }\n  }\n\n  const kind = func(fn, defaults, options)\n  const name = 'scalar'\n  const type = schema\n  const validate = value => {\n    const [error, result] = kind.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    return [undefined, result]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Tuple.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction tuple(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Tuple structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options))\n  const array = scalar('array', undefined, options)\n  const name = 'tuple'\n  const type = `[${kinds.map(k => k.type).join()}]`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = array.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const ret = []\n    const errors = []\n    const length = Math.max(value.length, kinds.length)\n\n    for (let i = 0; i < length; i++) {\n      const kind = kinds[i]\n      const v = value[i]\n\n      if (!kind) {\n        const e = { data: value, path: [i], value: v }\n        errors.push(e)\n        continue\n      }\n\n      const [e, r] = kind.validate(v)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[i] = r\n    }\n\n    return errors.length ? [{ ...errors[0], errors }] : [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Union.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction union(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Union structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options))\n  const name = 'union'\n  const type = kinds.map(k => k.type).join(' | ')\n  const validate = (value = resolveDefaults(defaults)) => {\n    const errors = []\n\n    for (const k of kinds) {\n      const [e, r] = k.validate(value)\n\n      if (!e) {\n        return [undefined, r]\n      }\n\n      errors.push(e)\n    }\n    errors[0].type = type\n    return errors\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Intersection.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction intersection(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Intersection structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const types = schema.map(s => any(s, undefined, options))\n  const name = 'intersection'\n  const type = types.map(t => t.type).join(' & ')\n  const validate = (value = resolveDefaults(defaults)) => {\n    let v = value\n\n    for (const t of types) {\n      const [e, r] = t.validate(v)\n\n      if (e) {\n        e.type = type\n        return [e]\n      }\n\n      v = r\n    }\n\n    return [undefined, v]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Kinds.\n *\n * @type {Object}\n */\n\nconst Kinds = {\n  any,\n  dict,\n  enum: en,\n  enums,\n  function: func,\n  instance,\n  interface: inter,\n  lazy,\n  list,\n  literal,\n  object,\n  optional,\n  partial,\n  scalar,\n  tuple,\n  union,\n  intersection,\n  dynamic,\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Kinds\n","import kindOf from 'kind-of'\n\n/**\n * The types that `kind-of` supports.\n *\n * @type {Array}\n */\n\nconst TYPES = [\n  'arguments',\n  'array',\n  'boolean',\n  'buffer',\n  'error',\n  'float32array',\n  'float64array',\n  'function',\n  'generatorfunction',\n  'int16array',\n  'int32array',\n  'int8array',\n  'map',\n  'null',\n  'number',\n  'object',\n  'promise',\n  'regexp',\n  'set',\n  'string',\n  'symbol',\n  'uint16array',\n  'uint32array',\n  'uint8array',\n  'uint8clampedarray',\n  'undefined',\n  'weakmap',\n  'weakset',\n]\n\n/**\n * The default types that Superstruct ships with.\n *\n * @type {Object}\n */\n\nconst Types = {\n  any: value => value !== undefined,\n}\n\nTYPES.forEach(type => {\n  Types[type] = value => kindOf(value) === type\n})\n\n/**\n * Handle the 'date' case specially, to throw out invalid `Date` objects.\n *\n * @param {Mixed} value\n * @return {Boolean}\n */\n\nTypes.date = value => kindOf(value) === 'date' && !isNaN(value)\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Types\n","import Kinds from './kinds'\nimport StructError from './error'\nimport Types from './types'\nimport { isStruct } from './utils'\nimport { IS_STRUCT, KIND } from './constants'\n\n/**\n * Create a struct factory with a `config`.\n *\n * @param {Object} config\n * @return {Function}\n */\n\nfunction superstruct(config = {}) {\n  const types = {\n    ...Types,\n    ...(config.types || {}),\n  }\n\n  /**\n   * Create a `kind` struct with `schema`, `defaults` and `options`.\n   *\n   * @param {Any} schema\n   * @param {Any} defaults\n   * @param {Object} options\n   * @return {Function}\n   */\n\n  function struct(schema, defaults, options = {}) {\n    if (isStruct(schema)) {\n      schema = schema.schema\n    }\n\n    const kind = Kinds.any(schema, defaults, { ...options, types })\n\n    function Struct(data) {\n      if (this instanceof Struct) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'The `Struct` creation function should not be used with the `new` keyword.'\n          )\n        } else {\n          throw new Error('Invalid `new` keyword!')\n        }\n      }\n\n      return Struct.assert(data)\n    }\n\n    Object.defineProperty(Struct, IS_STRUCT, { value: true })\n    Object.defineProperty(Struct, KIND, { value: kind })\n\n    Struct.kind = kind.name\n    Struct.type = kind.type\n    Struct.schema = schema\n    Struct.defaults = defaults\n    Struct.options = options\n\n    Struct.assert = value => {\n      const [error, result] = kind.validate(value)\n\n      if (error) {\n        throw new StructError(error)\n      }\n\n      return result\n    }\n\n    Struct.test = value => {\n      const [error] = kind.validate(value)\n      return !error\n    }\n\n    Struct.validate = value => {\n      const [error, result] = kind.validate(value)\n\n      if (error) {\n        return [new StructError(error)]\n      }\n\n      return [undefined, result]\n    }\n\n    return Struct\n  }\n\n  /**\n   * Mix in a factory for each specific kind of struct.\n   */\n\n  Object.keys(Kinds).forEach(name => {\n    const kind = Kinds[name]\n\n    struct[name] = (schema, defaults, options) => {\n      const type = kind(schema, defaults, { ...options, types })\n      const s = struct(type, defaults, options)\n      return s\n    }\n  })\n\n  /**\n   * Return the struct factory.\n   */\n\n  return struct\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default superstruct\n","import StructError from './error'\nimport superstruct from './superstruct'\nimport { isStruct } from './utils'\n\n/**\n * Create a convenience `struct` factory for the default types.\n *\n * @type {Function}\n */\n\nconst struct = superstruct()\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport { struct, superstruct, isStruct, StructError }\n"]},"metadata":{},"sourceType":"module"}