{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction ethDefaultProvider(network) {\n  return function (providers, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    const providerList = [];\n\n    if (providers.InfuraProvider) {\n      try {\n        providerList.push(new providers.InfuraProvider(network, options.infura));\n      } catch (error) {}\n    }\n\n    if (providers.EtherscanProvider) {\n      try {\n        providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n      } catch (error) {}\n    }\n\n    if (providers.AlchemyProvider) {\n      try {\n        providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n      } catch (error) {}\n    }\n\n    if (providers.CloudflareProvider) {\n      try {\n        providerList.push(new providers.CloudflareProvider(network));\n      } catch (error) {}\n    }\n\n    if (providerList.length === 0) {\n      return null;\n    }\n\n    if (providers.FallbackProvider) {\n      let quorum = 1;\n\n      if (options.quorum != null) {\n        quorum = options.quorum;\n      } else if (network === \"homestead\") {\n        quorum = 2;\n      }\n\n      return new providers.FallbackProvider(providerList, quorum);\n    }\n\n    return providerList[0];\n  };\n}\n\nfunction etcDefaultProvider(url, network) {\n  return function (providers, options) {\n    if (providers.JsonRpcProvider) {\n      return new providers.JsonRpcProvider(url, network);\n    }\n\n    return null;\n  };\n}\n\nconst homestead = {\n  chainId: 1,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"homestead\",\n  _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n  chainId: 3,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"ropsten\",\n  _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n  chainId: 63,\n  name: \"classicMordor\",\n  _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\nconst networks = {\n  unspecified: {\n    chainId: 0,\n    name: \"unspecified\"\n  },\n  homestead: homestead,\n  mainnet: homestead,\n  morden: {\n    chainId: 2,\n    name: \"morden\"\n  },\n  ropsten: ropsten,\n  testnet: ropsten,\n  rinkeby: {\n    chainId: 4,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"rinkeby\",\n    _defaultProvider: ethDefaultProvider(\"rinkeby\")\n  },\n  kovan: {\n    chainId: 42,\n    name: \"kovan\",\n    _defaultProvider: ethDefaultProvider(\"kovan\")\n  },\n  goerli: {\n    chainId: 5,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"goerli\",\n    _defaultProvider: ethDefaultProvider(\"goerli\")\n  },\n  // ETC (See: #351)\n  classic: {\n    chainId: 61,\n    name: \"classic\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/etc\", \"classic\")\n  },\n  classicMorden: {\n    chainId: 62,\n    name: \"classicMorden\"\n  },\n  classicMordor: classicMordor,\n  classicTestnet: classicMordor,\n  classicKotti: {\n    chainId: 6,\n    name: \"classicKotti\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/kotti\", \"classicKotti\")\n  }\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\n\nexport function getNetwork(network) {\n  // No network (null)\n  if (network == null) {\n    return null;\n  }\n\n  if (typeof network === \"number\") {\n    for (const name in networks) {\n      const standard = networks[name];\n\n      if (standard.chainId === network) {\n        return {\n          name: standard.name,\n          chainId: standard.chainId,\n          ensAddress: standard.ensAddress || null,\n          _defaultProvider: standard._defaultProvider || null\n        };\n      }\n    }\n\n    return {\n      chainId: network,\n      name: \"unknown\"\n    };\n  }\n\n  if (typeof network === \"string\") {\n    const standard = networks[network];\n\n    if (standard == null) {\n      return null;\n    }\n\n    return {\n      name: standard.name,\n      chainId: standard.chainId,\n      ensAddress: standard.ensAddress,\n      _defaultProvider: standard._defaultProvider || null\n    };\n  }\n\n  const standard = networks[network.name]; // Not a standard network; check that it is a valid network in general\n\n  if (!standard) {\n    if (typeof network.chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n    }\n\n    return network;\n  } // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n\n\n  if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n    logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n  } // Standard Network (allow overriding the ENS address)\n\n\n  return {\n    name: network.name,\n    chainId: standard.chainId,\n    ensAddress: network.ensAddress || standard.ensAddress || null,\n    _defaultProvider: network._defaultProvider || standard._defaultProvider || null\n  };\n}","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/@ethersproject/networks/lib.esm/index.js"],"names":["Logger","version","logger","ethDefaultProvider","network","providers","options","providerList","InfuraProvider","push","infura","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","CloudflareProvider","length","FallbackProvider","quorum","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","name","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","classic","classicMorden","classicTestnet","classicKotti","getNetwork","standard","throwArgumentError"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction ethDefaultProvider(network) {\n    return function (providers, options) {\n        if (options == null) {\n            options = {};\n        }\n        const providerList = [];\n        if (providers.InfuraProvider) {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            }\n            catch (error) { }\n        }\n        if (providers.EtherscanProvider) {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            }\n            catch (error) { }\n        }\n        if (providers.AlchemyProvider) {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            }\n            catch (error) { }\n        }\n        if (providers.CloudflareProvider) {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            }\n            catch (error) { }\n        }\n        if (providerList.length === 0) {\n            return null;\n        }\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            }\n            else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n        return providerList[0];\n    };\n}\nfunction etcDefaultProvider(url, network) {\n    return function (providers, options) {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n        return null;\n    };\n}\nconst homestead = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\nconst networks = {\n    unspecified: {\n        chainId: 0,\n        name: \"unspecified\"\n    },\n    homestead: homestead,\n    mainnet: homestead,\n    morden: {\n        chainId: 2,\n        name: \"morden\"\n    },\n    ropsten: ropsten,\n    testnet: ropsten,\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/etc\", \"classic\")\n    },\n    classicMorden: {\n        chainId: 62,\n        name: \"classicMorden\",\n    },\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network) {\n    // No network (null)\n    if (network == null) {\n        return null;\n    }\n    if (typeof (network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n    if (typeof (network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) {\n            return null;\n        }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n    const standard = networks[network.name];\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof (network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: (network._defaultProvider || standard._defaultProvider || null)\n    };\n}\n"]},"metadata":{},"sourceType":"module"}