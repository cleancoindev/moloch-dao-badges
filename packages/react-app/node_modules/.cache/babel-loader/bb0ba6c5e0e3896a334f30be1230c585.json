{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst base32 = require('base32.js');\n\nmodule.exports = function (self) {\n  return async function* refsLocalAsyncIterator() {\n    for await (const result of self._repo.blocks.query({\n      keysOnly: true\n    })) {\n      yield dsKeyToRef(result.key);\n    }\n  };\n};\n\nfunction dsKeyToRef(key) {\n  try {\n    // Block key is of the form /<base32 encoded string>\n    const decoder = new base32.Decoder();\n    const buff = Buffer.from(decoder.write(key.toString().slice(1)).finalize());\n    return {\n      ref: new CID(buff).toString()\n    };\n  } catch (err) {\n    return {\n      err: `Could not convert block with key '${key}' to CID: ${err.message}`\n    };\n  }\n}","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs/src/core/components/files-regular/refs-local-async-iterator.js"],"names":["CID","require","base32","module","exports","self","refsLocalAsyncIterator","result","_repo","blocks","query","keysOnly","dsKeyToRef","key","decoder","Decoder","buff","Buffer","from","write","toString","slice","finalize","ref","err","message"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgB;AAC/B,SAAO,gBAAiBC,sBAAjB,GAA2C;AAChD,eAAW,MAAMC,MAAjB,IAA2BF,IAAI,CAACG,KAAL,CAAWC,MAAX,CAAkBC,KAAlB,CAAwB;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAxB,CAA3B,EAAwE;AACtE,YAAMC,UAAU,CAACL,MAAM,CAACM,GAAR,CAAhB;AACD;AACF,GAJD;AAKD,CAND;;AAQA,SAASD,UAAT,CAAqBC,GAArB,EAA0B;AACxB,MAAI;AACF;AACA,UAAMC,OAAO,GAAG,IAAIZ,MAAM,CAACa,OAAX,EAAhB;AACA,UAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,OAAO,CAACK,KAAR,CAAcN,GAAG,CAACO,QAAJ,GAAeC,KAAf,CAAqB,CAArB,CAAd,EAAuCC,QAAvC,EAAZ,CAAb;AACA,WAAO;AACLC,MAAAA,GAAG,EAAE,IAAIvB,GAAJ,CAAQgB,IAAR,EAAcI,QAAd;AADA,KAAP;AAGD,GAPD,CAOE,OAAOI,GAAP,EAAY;AACZ,WAAO;AAAEA,MAAAA,GAAG,EAAG,qCAAoCX,GAAI,aAAYW,GAAG,CAACC,OAAQ;AAAxE,KAAP;AACD;AACF","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst base32 = require('base32.js')\n\nmodule.exports = function (self) {\n  return async function * refsLocalAsyncIterator () {\n    for await (const result of self._repo.blocks.query({ keysOnly: true })) {\n      yield dsKeyToRef(result.key)\n    }\n  }\n}\n\nfunction dsKeyToRef (key) {\n  try {\n    // Block key is of the form /<base32 encoded string>\n    const decoder = new base32.Decoder()\n    const buff = Buffer.from(decoder.write(key.toString().slice(1)).finalize())\n    return {\n      ref: new CID(buff).toString()\n    }\n  } catch (err) {\n    return { err: `Could not convert block with key '${key}' to CID: ${err.message}` }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}