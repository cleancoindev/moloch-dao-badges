{"ast":null,"code":"\"use strict\";\n\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nexport class Web3Provider extends JsonRpcProvider {\n  constructor(web3Provider, network) {\n    logger.checkNew(new.target, Web3Provider); // HTTP has a host; IPC has a path.\n\n    super(web3Provider.host || web3Provider.path || \"\", network);\n\n    if (web3Provider) {\n      if (web3Provider.sendAsync) {\n        this._sendAsync = web3Provider.sendAsync.bind(web3Provider);\n      } else if (web3Provider.send) {\n        this._sendAsync = web3Provider.send.bind(web3Provider);\n      }\n    }\n\n    if (!this._sendAsync) {\n      logger.throwArgumentError(\"invalid web3Provider\", \"web3Provider\", web3Provider);\n    }\n\n    defineReadOnly(this, \"provider\", web3Provider);\n  }\n\n  send(method, params) {\n    // Metamask complains about eth_sign (and on some versions hangs)\n    if (method == \"eth_sign\" && this.provider.isMetaMask) {\n      // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n      method = \"personal_sign\";\n      params = [params[1], params[0]];\n    }\n\n    return new Promise((resolve, reject) => {\n      const request = {\n        method: method,\n        params: params,\n        id: this._nextId++,\n        jsonrpc: \"2.0\"\n      };\n\n      this._sendAsync(request, function (error, result) {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        if (result.error) {\n          // @TODO: not any\n          const error = new Error(result.error.message);\n          error.code = result.error.code;\n          error.data = result.error.data;\n          reject(error);\n          return;\n        }\n\n        resolve(result.result);\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/@ethersproject/providers/lib.esm/web3-provider.js"],"names":["defineReadOnly","Logger","version","logger","JsonRpcProvider","Web3Provider","constructor","web3Provider","network","checkNew","new","target","host","path","sendAsync","_sendAsync","bind","send","throwArgumentError","method","params","provider","isMetaMask","Promise","resolve","reject","request","id","_nextId","jsonrpc","error","result","Error","message","code","data"],"mappings":"AAAA;;AACA,SAASA,cAAT,QAA+B,2BAA/B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AACA,SAASE,eAAT,QAAgC,qBAAhC;AACA,OAAO,MAAMC,YAAN,SAA2BD,eAA3B,CAA2C;AAC9CE,EAAAA,WAAW,CAACC,YAAD,EAAeC,OAAf,EAAwB;AAC/BL,IAAAA,MAAM,CAACM,QAAP,CAAgBC,GAAG,CAACC,MAApB,EAA4BN,YAA5B,EAD+B,CAE/B;;AACA,UAAME,YAAY,CAACK,IAAb,IAAqBL,YAAY,CAACM,IAAlC,IAA0C,EAAhD,EAAoDL,OAApD;;AACA,QAAID,YAAJ,EAAkB;AACd,UAAIA,YAAY,CAACO,SAAjB,EAA4B;AACxB,aAAKC,UAAL,GAAkBR,YAAY,CAACO,SAAb,CAAuBE,IAAvB,CAA4BT,YAA5B,CAAlB;AACH,OAFD,MAGK,IAAIA,YAAY,CAACU,IAAjB,EAAuB;AACxB,aAAKF,UAAL,GAAkBR,YAAY,CAACU,IAAb,CAAkBD,IAAlB,CAAuBT,YAAvB,CAAlB;AACH;AACJ;;AACD,QAAI,CAAC,KAAKQ,UAAV,EAAsB;AAClBZ,MAAAA,MAAM,CAACe,kBAAP,CAA0B,sBAA1B,EAAkD,cAAlD,EAAkEX,YAAlE;AACH;;AACDP,IAAAA,cAAc,CAAC,IAAD,EAAO,UAAP,EAAmBO,YAAnB,CAAd;AACH;;AACDU,EAAAA,IAAI,CAACE,MAAD,EAASC,MAAT,EAAiB;AACjB;AACA,QAAID,MAAM,IAAI,UAAV,IAAwB,KAAKE,QAAL,CAAcC,UAA1C,EAAsD;AAClD;AACAH,MAAAA,MAAM,GAAG,eAAT;AACAC,MAAAA,MAAM,GAAG,CAACA,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,CAAT;AACH;;AACD,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,YAAMC,OAAO,GAAG;AACZP,QAAAA,MAAM,EAAEA,MADI;AAEZC,QAAAA,MAAM,EAAEA,MAFI;AAGZO,QAAAA,EAAE,EAAG,KAAKC,OAAL,EAHO;AAIZC,QAAAA,OAAO,EAAE;AAJG,OAAhB;;AAMA,WAAKd,UAAL,CAAgBW,OAAhB,EAAyB,UAAUI,KAAV,EAAiBC,MAAjB,EAAyB;AAC9C,YAAID,KAAJ,EAAW;AACPL,UAAAA,MAAM,CAACK,KAAD,CAAN;AACA;AACH;;AACD,YAAIC,MAAM,CAACD,KAAX,EAAkB;AACd;AACA,gBAAMA,KAAK,GAAG,IAAIE,KAAJ,CAAUD,MAAM,CAACD,KAAP,CAAaG,OAAvB,CAAd;AACAH,UAAAA,KAAK,CAACI,IAAN,GAAaH,MAAM,CAACD,KAAP,CAAaI,IAA1B;AACAJ,UAAAA,KAAK,CAACK,IAAN,GAAaJ,MAAM,CAACD,KAAP,CAAaK,IAA1B;AACAV,UAAAA,MAAM,CAACK,KAAD,CAAN;AACA;AACH;;AACDN,QAAAA,OAAO,CAACO,MAAM,CAACA,MAAR,CAAP;AACH,OAdD;AAeH,KAtBM,CAAP;AAuBH;;AAhD6C","sourcesContent":["\"use strict\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nexport class Web3Provider extends JsonRpcProvider {\n    constructor(web3Provider, network) {\n        logger.checkNew(new.target, Web3Provider);\n        // HTTP has a host; IPC has a path.\n        super(web3Provider.host || web3Provider.path || \"\", network);\n        if (web3Provider) {\n            if (web3Provider.sendAsync) {\n                this._sendAsync = web3Provider.sendAsync.bind(web3Provider);\n            }\n            else if (web3Provider.send) {\n                this._sendAsync = web3Provider.send.bind(web3Provider);\n            }\n        }\n        if (!this._sendAsync) {\n            logger.throwArgumentError(\"invalid web3Provider\", \"web3Provider\", web3Provider);\n        }\n        defineReadOnly(this, \"provider\", web3Provider);\n    }\n    send(method, params) {\n        // Metamask complains about eth_sign (and on some versions hangs)\n        if (method == \"eth_sign\" && this.provider.isMetaMask) {\n            // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n            method = \"personal_sign\";\n            params = [params[1], params[0]];\n        }\n        return new Promise((resolve, reject) => {\n            const request = {\n                method: method,\n                params: params,\n                id: (this._nextId++),\n                jsonrpc: \"2.0\"\n            };\n            this._sendAsync(request, function (error, result) {\n                if (error) {\n                    reject(error);\n                    return;\n                }\n                if (result.error) {\n                    // @TODO: not any\n                    const error = new Error(result.error.message);\n                    error.code = result.error.code;\n                    error.data = result.error.data;\n                    reject(error);\n                    return;\n                }\n                resolve(result.result);\n            });\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}