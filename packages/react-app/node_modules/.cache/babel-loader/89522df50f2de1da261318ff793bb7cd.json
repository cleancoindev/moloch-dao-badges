{"ast":null,"code":"module.exports = function (socket, callback) {\n  var remove = socket && (socket.removeEventListener || socket.removeListener);\n\n  function cleanup() {\n    if (typeof remove == 'function') {\n      remove.call(socket, 'open', handleOpen);\n      remove.call(socket, 'error', handleErr);\n    }\n  }\n\n  function handleOpen(evt) {\n    cleanup();\n    callback();\n  }\n\n  function handleErr(evt) {\n    cleanup();\n    callback(evt);\n  } // if the socket is closing or closed, return end\n\n\n  if (socket.readyState >= 2) {\n    return callback(true);\n  } // if open, trigger the callback\n\n\n  if (socket.readyState === 1) {\n    return callback();\n  }\n\n  socket.addEventListener('open', handleOpen);\n  socket.addEventListener('error', handleErr);\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/pull-ws/ready.js"],"names":["module","exports","socket","callback","remove","removeEventListener","removeListener","cleanup","call","handleOpen","handleErr","evt","readyState","addEventListener"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAASC,MAAT,EAAiBC,QAAjB,EAA2B;AAC1C,MAAIC,MAAM,GAAGF,MAAM,KAAKA,MAAM,CAACG,mBAAP,IAA8BH,MAAM,CAACI,cAA1C,CAAnB;;AAEA,WAASC,OAAT,GAAoB;AAClB,QAAI,OAAOH,MAAP,IAAiB,UAArB,EAAiC;AAC/BA,MAAAA,MAAM,CAACI,IAAP,CAAYN,MAAZ,EAAoB,MAApB,EAA4BO,UAA5B;AACAL,MAAAA,MAAM,CAACI,IAAP,CAAYN,MAAZ,EAAoB,OAApB,EAA6BQ,SAA7B;AACD;AACF;;AAED,WAASD,UAAT,CAAoBE,GAApB,EAAyB;AACvBJ,IAAAA,OAAO;AAAIJ,IAAAA,QAAQ;AACpB;;AAED,WAASO,SAAT,CAAoBC,GAApB,EAAyB;AACvBJ,IAAAA,OAAO;AAAIJ,IAAAA,QAAQ,CAACQ,GAAD,CAAR;AACZ,GAhByC,CAkB1C;;;AACA,MAAIT,MAAM,CAACU,UAAP,IAAqB,CAAzB,EAA4B;AAC1B,WAAOT,QAAQ,CAAC,IAAD,CAAf;AACD,GArByC,CAuB1C;;;AACA,MAAID,MAAM,CAACU,UAAP,KAAsB,CAA1B,EAA6B;AAC3B,WAAOT,QAAQ,EAAf;AACD;;AAEDD,EAAAA,MAAM,CAACW,gBAAP,CAAwB,MAAxB,EAAgCJ,UAAhC;AACAP,EAAAA,MAAM,CAACW,gBAAP,CAAwB,OAAxB,EAAiCH,SAAjC;AACD,CA9BD","sourcesContent":["module.exports = function(socket, callback) {\n  var remove = socket && (socket.removeEventListener || socket.removeListener);\n\n  function cleanup () {\n    if (typeof remove == 'function') {\n      remove.call(socket, 'open', handleOpen);\n      remove.call(socket, 'error', handleErr);\n    }\n  }\n\n  function handleOpen(evt) {\n    cleanup(); callback();\n  }\n\n  function handleErr (evt) {\n    cleanup(); callback(evt);\n  }\n\n  // if the socket is closing or closed, return end\n  if (socket.readyState >= 2) {\n    return callback(true);\n  }\n\n  // if open, trigger the callback\n  if (socket.readyState === 1) {\n    return callback();\n  }\n\n  socket.addEventListener('open', handleOpen);\n  socket.addEventListener('error', handleErr);\n};\n"]},"metadata":{},"sourceType":"script"}