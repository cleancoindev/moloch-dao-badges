{"ast":null,"code":"'use strict';\n\nconst OFFLINE_ERROR = require('../utils').OFFLINE_ERROR;\n\nconst callbackify = require('callbackify');\n\nconst Big = require('bignumber.js');\n\nconst CID = require('cids');\n\nconst PeerId = require('peer-id');\n\nconst errCode = require('err-code');\n\nfunction formatWantlist(list, cidBase) {\n  return Array.from(list).map(e => ({\n    '/': e[1].cid.toBaseEncodedString(cidBase)\n  }));\n}\n\nmodule.exports = function bitswap(self) {\n  return {\n    wantlist: callbackify.variadic(async peerId => {\n      // eslint-disable-line require-await\n      if (!self.isOnline()) {\n        throw new Error(OFFLINE_ERROR);\n      }\n\n      let list;\n\n      if (peerId) {\n        peerId = PeerId.createFromB58String(peerId);\n        list = self._bitswap.wantlistForPeer(peerId);\n      } else {\n        list = self._bitswap.getWantlist();\n      }\n\n      return {\n        Keys: formatWantlist(list)\n      };\n    }),\n    stat: callbackify(async () => {\n      // eslint-disable-line require-await\n      if (!self.isOnline()) {\n        throw new Error(OFFLINE_ERROR);\n      }\n\n      const snapshot = self._bitswap.stat().snapshot;\n\n      return {\n        provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n        blocksReceived: new Big(snapshot.blocksReceived),\n        wantlist: formatWantlist(self._bitswap.getWantlist()),\n        peers: self._bitswap.peers().map(id => id.toB58String()),\n        dupBlksReceived: new Big(snapshot.dupBlksReceived),\n        dupDataReceived: new Big(snapshot.dupDataReceived),\n        dataReceived: new Big(snapshot.dataReceived),\n        blocksSent: new Big(snapshot.blocksSent),\n        dataSent: new Big(snapshot.dataSent)\n      };\n    }),\n    unwant: callbackify(async keys => {\n      // eslint-disable-line require-await\n      if (!self.isOnline()) {\n        throw new Error(OFFLINE_ERROR);\n      }\n\n      if (!Array.isArray(keys)) {\n        keys = [keys];\n      }\n\n      try {\n        keys = keys.map(key => new CID(key));\n      } catch (err) {\n        throw errCode(err, 'ERR_INVALID_CID');\n      }\n\n      return self._bitswap.unwant(keys);\n    })\n  };\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs/src/core/components/bitswap.js"],"names":["OFFLINE_ERROR","require","callbackify","Big","CID","PeerId","errCode","formatWantlist","list","cidBase","Array","from","map","e","cid","toBaseEncodedString","module","exports","bitswap","self","wantlist","variadic","peerId","isOnline","Error","createFromB58String","_bitswap","wantlistForPeer","getWantlist","Keys","stat","snapshot","provideBufLen","parseInt","providesBufferLength","toString","blocksReceived","peers","id","toB58String","dupBlksReceived","dupDataReceived","dataReceived","blocksSent","dataSent","unwant","keys","isArray","key","err"],"mappings":"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","sourcesContent":["'use strict'\n\nconst OFFLINE_ERROR = require('../utils').OFFLINE_ERROR\nconst callbackify = require('callbackify')\nconst Big = require('bignumber.js')\nconst CID = require('cids')\nconst PeerId = require('peer-id')\nconst errCode = require('err-code')\n\nfunction formatWantlist (list, cidBase) {\n  return Array.from(list).map((e) => ({ '/': e[1].cid.toBaseEncodedString(cidBase) }))\n}\n\nmodule.exports = function bitswap (self) {\n  return {\n    wantlist: callbackify.variadic(async (peerId) => { // eslint-disable-line require-await\n      if (!self.isOnline()) {\n        throw new Error(OFFLINE_ERROR)\n      }\n\n      let list\n\n      if (peerId) {\n        peerId = PeerId.createFromB58String(peerId)\n\n        list = self._bitswap.wantlistForPeer(peerId)\n      } else {\n        list = self._bitswap.getWantlist()\n      }\n\n      return { Keys: formatWantlist(list) }\n    }),\n\n    stat: callbackify(async () => { // eslint-disable-line require-await\n      if (!self.isOnline()) {\n        throw new Error(OFFLINE_ERROR)\n      }\n\n      const snapshot = self._bitswap.stat().snapshot\n\n      return {\n        provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n        blocksReceived: new Big(snapshot.blocksReceived),\n        wantlist: formatWantlist(self._bitswap.getWantlist()),\n        peers: self._bitswap.peers().map((id) => id.toB58String()),\n        dupBlksReceived: new Big(snapshot.dupBlksReceived),\n        dupDataReceived: new Big(snapshot.dupDataReceived),\n        dataReceived: new Big(snapshot.dataReceived),\n        blocksSent: new Big(snapshot.blocksSent),\n        dataSent: new Big(snapshot.dataSent)\n      }\n    }),\n\n    unwant: callbackify(async (keys) => { // eslint-disable-line require-await\n      if (!self.isOnline()) {\n        throw new Error(OFFLINE_ERROR)\n      }\n\n      if (!Array.isArray(keys)) {\n        keys = [keys]\n      }\n\n      try {\n        keys = keys.map((key) => new CID(key))\n      } catch (err) {\n        throw errCode(err, 'ERR_INVALID_CID')\n      }\n\n      return self._bitswap.unwant(keys)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}