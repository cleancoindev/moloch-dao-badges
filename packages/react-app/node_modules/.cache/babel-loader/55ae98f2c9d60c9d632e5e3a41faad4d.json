{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport class InfuraProvider extends UrlJsonRpcProvider {\n  static getApiKey(apiKey) {\n    const apiKeyObj = {\n      apiKey: defaultProjectId,\n      projectId: defaultProjectId,\n      projectSecret: null\n    };\n\n    if (apiKey == null) {\n      return apiKeyObj;\n    }\n\n    if (typeof apiKey === \"string\") {\n      apiKeyObj.projectId = apiKey;\n    } else if (apiKey.projectSecret != null) {\n      if (typeof apiKey.projectId !== \"string\") {\n        logger.throwArgumentError(\"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n      }\n\n      if (typeof apiKey.projectSecret !== \"string\") {\n        logger.throwArgumentError(\"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n      }\n\n      apiKeyObj.projectId = apiKey.projectId;\n      apiKeyObj.projectSecret = apiKey.projectSecret;\n    } else if (apiKey.projectId) {\n      apiKeyObj.projectId = apiKey.projectId;\n    }\n\n    apiKeyObj.apiKey = apiKeyObj.projectId;\n    return apiKeyObj;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network.name) {\n      case \"homestead\":\n        host = \"mainnet.infura.io\";\n        break;\n\n      case \"ropsten\":\n        host = \"ropsten.infura.io\";\n        break;\n\n      case \"rinkeby\":\n        host = \"rinkeby.infura.io\";\n        break;\n\n      case \"kovan\":\n        host = \"kovan.infura.io\";\n        break;\n\n      case \"goerli\":\n        host = \"goerli.infura.io\";\n        break;\n\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n\n    const connection = {\n      url: \"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId\n    };\n\n    if (apiKey.projectSecret != null) {\n      connection.user = \"\";\n      connection.password = apiKey.projectSecret;\n    }\n\n    return connection;\n  }\n\n}","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/@ethersproject/providers/lib.esm/infura-provider.js"],"names":["Logger","version","logger","UrlJsonRpcProvider","defaultProjectId","InfuraProvider","getApiKey","apiKey","apiKeyObj","projectId","projectSecret","throwArgumentError","getUrl","network","host","name","throwError","errors","INVALID_ARGUMENT","argument","value","connection","url","user","password"],"mappings":"AAAA;;AACA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AACA,SAASE,kBAAT,QAAmC,yBAAnC;AACA,MAAMC,gBAAgB,GAAG,kCAAzB;AACA,OAAO,MAAMC,cAAN,SAA6BF,kBAA7B,CAAgD;AACnD,SAAOG,SAAP,CAAiBC,MAAjB,EAAyB;AACrB,UAAMC,SAAS,GAAG;AACdD,MAAAA,MAAM,EAAEH,gBADM;AAEdK,MAAAA,SAAS,EAAEL,gBAFG;AAGdM,MAAAA,aAAa,EAAE;AAHD,KAAlB;;AAKA,QAAIH,MAAM,IAAI,IAAd,EAAoB;AAChB,aAAOC,SAAP;AACH;;AACD,QAAI,OAAQD,MAAR,KAAoB,QAAxB,EAAkC;AAC9BC,MAAAA,SAAS,CAACC,SAAV,GAAsBF,MAAtB;AACH,KAFD,MAGK,IAAIA,MAAM,CAACG,aAAP,IAAwB,IAA5B,EAAkC;AACnC,UAAI,OAAQH,MAAM,CAACE,SAAf,KAA8B,QAAlC,EAA4C;AACxCP,QAAAA,MAAM,CAACS,kBAAP,CAA0B,oCAA1B,EAAgE,WAAhE,EAA6EJ,MAAM,CAACE,SAApF;AACH;;AACD,UAAI,OAAQF,MAAM,CAACG,aAAf,KAAkC,QAAtC,EAAgD;AAC5CR,QAAAA,MAAM,CAACS,kBAAP,CAA0B,uBAA1B,EAAmD,eAAnD,EAAoE,YAApE;AACH;;AACDH,MAAAA,SAAS,CAACC,SAAV,GAAsBF,MAAM,CAACE,SAA7B;AACAD,MAAAA,SAAS,CAACE,aAAV,GAA0BH,MAAM,CAACG,aAAjC;AACH,KATI,MAUA,IAAIH,MAAM,CAACE,SAAX,EAAsB;AACvBD,MAAAA,SAAS,CAACC,SAAV,GAAsBF,MAAM,CAACE,SAA7B;AACH;;AACDD,IAAAA,SAAS,CAACD,MAAV,GAAmBC,SAAS,CAACC,SAA7B;AACA,WAAOD,SAAP;AACH;;AACD,SAAOI,MAAP,CAAcC,OAAd,EAAuBN,MAAvB,EAA+B;AAC3B,QAAIO,IAAI,GAAG,IAAX;;AACA,YAAQD,OAAO,CAACE,IAAhB;AACI,WAAK,WAAL;AACID,QAAAA,IAAI,GAAG,mBAAP;AACA;;AACJ,WAAK,SAAL;AACIA,QAAAA,IAAI,GAAG,mBAAP;AACA;;AACJ,WAAK,SAAL;AACIA,QAAAA,IAAI,GAAG,mBAAP;AACA;;AACJ,WAAK,OAAL;AACIA,QAAAA,IAAI,GAAG,iBAAP;AACA;;AACJ,WAAK,QAAL;AACIA,QAAAA,IAAI,GAAG,kBAAP;AACA;;AACJ;AACIZ,QAAAA,MAAM,CAACc,UAAP,CAAkB,qBAAlB,EAAyChB,MAAM,CAACiB,MAAP,CAAcC,gBAAvD,EAAyE;AACrEC,UAAAA,QAAQ,EAAE,SAD2D;AAErEC,UAAAA,KAAK,EAAEP;AAF8D,SAAzE;AAjBR;;AAsBA,UAAMQ,UAAU,GAAG;AACfC,MAAAA,GAAG,EAAG,YAAY,GAAZ,GAAkBR,IAAlB,GAAyB,MAAzB,GAAkCP,MAAM,CAACE;AADhC,KAAnB;;AAGA,QAAIF,MAAM,CAACG,aAAP,IAAwB,IAA5B,EAAkC;AAC9BW,MAAAA,UAAU,CAACE,IAAX,GAAkB,EAAlB;AACAF,MAAAA,UAAU,CAACG,QAAX,GAAsBjB,MAAM,CAACG,aAA7B;AACH;;AACD,WAAOW,UAAP;AACH;;AA7DkD","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        const apiKeyObj = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n        if (apiKey == null) {\n            return apiKeyObj;\n        }\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n        }\n        else if (apiKey.projectSecret != null) {\n            if (typeof (apiKey.projectId) !== \"string\") {\n                logger.throwArgumentError(\"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            }\n            if (typeof (apiKey.projectSecret) !== \"string\") {\n                logger.throwArgumentError(\"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n            }\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n        }\n        else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"ropsten\":\n                host = \"ropsten.infura.io\";\n                break;\n            case \"rinkeby\":\n                host = \"rinkeby.infura.io\";\n                break;\n            case \"kovan\":\n                host = \"kovan.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        const connection = {\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId)\n        };\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n        }\n        return connection;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}