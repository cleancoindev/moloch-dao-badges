{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class LogDescription extends Description {}\nexport class TransactionDescription extends Description {}\nexport class Indexed extends Description {\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n\n}\nexport class Interface {\n  constructor(fragments) {\n    logger.checkNew(new.target, Interface);\n    let abi = [];\n\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n\n    defineReadOnly(this, \"fragments\", abi.map(fragment => {\n      return Fragment.from(fragment);\n    }).filter(fragment => fragment != null));\n    defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {}); // Add all fragments by their signature\n\n    this.fragments.forEach(fragment => {\n      let bucket = null;\n\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          }\n\n          defineReadOnly(this, \"deploy\", fragment);\n          return;\n\n        case \"function\":\n          bucket = this.functions;\n          break;\n\n        case \"event\":\n          bucket = this.events;\n          break;\n\n        default:\n          return;\n      }\n\n      let signature = fragment.format();\n\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n\n      bucket[signature] = fragment;\n    }); // If we do not have a constructor use the default \"constructor() payable\"\n\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        type: \"constructor\"\n      }));\n    }\n\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n\n  format(format) {\n    if (!format) {\n      format = FormatTypes.full;\n    }\n\n    if (format === FormatTypes.sighash) {\n      logger.throwArgumentError(\"interface does not support formating sighash\", \"format\", format);\n    }\n\n    const abi = this.fragments.map(fragment => fragment.format(format)); // We need to re-bundle the JSON fragments a bit\n\n    if (format === FormatTypes.json) {\n      return JSON.stringify(abi.map(j => JSON.parse(j)));\n    }\n\n    return abi;\n  } // Sub-classes can override these to handle other blockchains\n\n\n  static getAbiCoder() {\n    return defaultAbiCoder;\n  }\n\n  static getAddress(address) {\n    return getAddress(address);\n  }\n\n  static getSighash(functionFragment) {\n    return hexDataSlice(id(functionFragment.format()), 0, 4);\n  }\n\n  static getEventTopic(eventFragment) {\n    return id(eventFragment.format());\n  } // Find a function definition by any means necessary (unless it is ambiguous)\n\n\n  getFunction(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      for (const name in this.functions) {\n        if (nameOrSignatureOrSighash === this.getSighash(name)) {\n          return this.functions[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.functions).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching function\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n      }\n\n      return this.functions[matching[0]];\n    } // Normlize the signature and lookup the function\n\n\n    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n    }\n\n    return result;\n  } // Find an event definition by any means necessary (unless it is ambiguous)\n\n\n  getEvent(nameOrSignatureOrTopic) {\n    if (isHexString(nameOrSignatureOrTopic)) {\n      const topichash = nameOrSignatureOrTopic.toLowerCase();\n\n      for (const name in this.events) {\n        if (topichash === this.getEventTopic(name)) {\n          return this.events[name];\n        }\n      }\n\n      logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n    } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n    if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrTopic.trim();\n      const matching = Object.keys(this.events).filter(f => f.split(\"(\"\n      /* fix:) */\n      )[0] === name);\n\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching event\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n      }\n\n      return this.events[matching[0]];\n    } // Normlize the signature and lookup the function\n\n\n    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n\n    if (!result) {\n      logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n    }\n\n    return result;\n  } // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n\n\n  getSighash(functionFragment) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return getStatic(this.constructor, \"getSighash\")(functionFragment);\n  } // Get the topic (the bytes32 hash) used by Solidity to identify an event\n\n\n  getEventTopic(eventFragment) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n  }\n\n  _decodeParams(params, data) {\n    return this._abiCoder.decode(params, data);\n  }\n\n  _encodeParams(params, values) {\n    return this._abiCoder.encode(params, values);\n  }\n\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  } // Decode the data for a function call (e.g. tx.data)\n\n\n  decodeFunctionData(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    const bytes = arrayify(data);\n\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n      logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n    }\n\n    return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n  } // Encode the data for a function call (e.g. tx.data)\n\n\n  encodeFunctionData(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n  } // Decode the result from a function call (e.g. from eth_call)\n\n\n  decodeFunctionResult(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    let bytes = arrayify(data);\n    let reason = null;\n    let errorSignature = null;\n\n    switch (bytes.length % this._abiCoder._getWordSize()) {\n      case 0:\n        try {\n          return this._abiCoder.decode(functionFragment.outputs, bytes);\n        } catch (error) {}\n\n        break;\n\n      case 4:\n        if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n          errorSignature = \"Error(string)\";\n          reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n        }\n\n        break;\n    }\n\n    return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n      method: functionFragment.format(),\n      errorSignature: errorSignature,\n      errorArgs: [reason],\n      reason: reason\n    });\n  } // Encode the result for a function call (e.g. for eth_call)\n\n\n  encodeFunctionResult(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n\n    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n  } // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n\n\n  encodeFilterTopics(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    if (values.length > eventFragment.inputs.length) {\n      logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n        argument: \"values\",\n        value: values\n      });\n    }\n\n    let topics = [];\n\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n\n    values.forEach((value, index) => {\n      let param = eventFragment.inputs[index];\n\n      if (!param.indexed) {\n        if (value != null) {\n          logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        }\n\n        return;\n      }\n\n      if (value == null) {\n        topics.push(null);\n      } else if (param.type === \"string\") {\n        topics.push(id(value));\n      } else if (param.type === \"bytes\") {\n        topics.push(keccak256(hexlify(value)));\n      } else if (param.type.indexOf(\"[\") !== -1 || param.type.substring(0, 5) === \"tuple\") {\n        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else {\n        // Check addresses are valid\n        if (param.type === \"address\") {\n          this._abiCoder.encode([\"address\"], [value]);\n        }\n\n        topics.push(hexZeroPad(hexlify(value), 32));\n      }\n    }); // Trim off trailing nulls\n\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n\n    return topics;\n  } // Decode a filter for the event and the search criteria\n\n\n  decodeEventLog(eventFragment, data, topics) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n\n    if (topics != null && !eventFragment.anonymous) {\n      let topicHash = this.getEventTopic(eventFragment);\n\n      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n        logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"topics[0]\",\n          expected: topicHash,\n          value: topics[0]\n        });\n      }\n\n      topics = topics.slice(1);\n    }\n\n    let indexed = [];\n    let nonIndexed = [];\n    let dynamic = [];\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(ParamType.fromObject({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n\n    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data);\n\n    let result = [];\n    let nonIndexedIndex = 0,\n        indexedIndex = 0;\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: null\n          });\n        } else if (dynamic[index]) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: resultIndexed[indexedIndex++]\n          });\n        } else {\n          result[index] = resultIndexed[indexedIndex++];\n        }\n      } else {\n        result[index] = resultNonIndexed[nonIndexedIndex++];\n      }\n\n      if (param.name && result[param.name] == null) {\n        result[param.name] = result[index];\n      }\n    });\n    return Object.freeze(result);\n  } // Given a transaction, find the matching function fragment (if any) and\n  // determine all its properties and call parameters\n\n\n  parseTransaction(tx) {\n    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n\n    if (!fragment) {\n      return null;\n    }\n\n    return new TransactionDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n      functionFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment),\n      value: BigNumber.from(tx.value || \"0\")\n    });\n  } // Given an event log, find the matching event fragment (if any) and\n  // determine all its properties and values\n\n\n  parseLog(log) {\n    let fragment = this.getEvent(log.topics[0]);\n\n    if (!fragment || fragment.anonymous) {\n      return null;\n    } // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe jsut a fragment?\n\n\n    return new LogDescription({\n      eventFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      topic: this.getEventTopic(fragment),\n      args: this.decodeEventLog(fragment, log.data, log.topics)\n    });\n  }\n  /*\n  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n      if (Interface.isInterface(value)) {\n          return value;\n      }\n      if (typeof(value) === \"string\") {\n          return new Interface(JSON.parse(value));\n      }\n      return new Interface(value);\n  }\n  */\n\n\n  static isInterface(value) {\n    return !!(value && value._isInterface);\n  }\n\n}","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/@ethersproject/abi/lib.esm/interface.js"],"names":["getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","TransactionDescription","Indexed","isIndexed","value","_isIndexed","Interface","constructor","fragments","checkNew","new","target","abi","JSON","parse","map","fragment","from","filter","forEach","bucket","type","deploy","warn","functions","events","signature","format","full","sighash","throwArgumentError","json","stringify","j","getAbiCoder","address","getSighash","functionFragment","getEventTopic","eventFragment","getFunction","nameOrSignatureOrSighash","name","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","_decodeParams","params","data","_abiCoder","decode","_encodeParams","values","encode","encodeDeploy","inputs","decodeFunctionData","bytes","slice","encodeFunctionData","decodeFunctionResult","reason","errorSignature","_getWordSize","outputs","error","throwError","errors","CALL_EXCEPTION","method","errorArgs","encodeFunctionResult","encodeFilterTopics","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","index","param","indexed","substring","pop","decodeEventLog","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","baseType","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","freeze","parseTransaction","tx","args","parseLog","log","topic","isInterface","_isInterface"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nexport class Interface {\n    constructor(fragments) {\n        logger.checkNew(new.target, Interface);\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic((new.target), \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    bucket = this.events;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor use the default \"constructor() payable\"\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({ type: \"constructor\" }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formating sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(functionFragment) {\n        return hexDataSlice(id(functionFragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(functionFragment) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return getStatic(this.constructor, \"getSighash\")(functionFragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4:\n                if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n                    errorSignature = \"Error(string)\";\n                    reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n                }\n                break;\n        }\n        return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            errorSignature: errorSignature,\n            errorArgs: [reason],\n            reason: reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.type === \"string\") {\n                topics.push(id(value));\n            }\n            else if (param.type === \"bytes\") {\n                topics.push(keccak256(hexlify(value)));\n            }\n            else if (param.type.indexOf(\"[\") !== -1 || param.type.substring(0, 5) === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else {\n                // Check addresses are valid\n                if (param.type === \"address\") {\n                    this._abiCoder.encode([\"address\"], [value]);\n                }\n                topics.push(hexZeroPad(hexlify(value), 32));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    result[index] = resultIndexed[indexedIndex++];\n                }\n            }\n            else {\n                result[index] = resultNonIndexed[nonIndexedIndex++];\n            }\n            if (param.name && result[param.name] == null) {\n                result[param.name] = result[index];\n            }\n        });\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe jsut a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}