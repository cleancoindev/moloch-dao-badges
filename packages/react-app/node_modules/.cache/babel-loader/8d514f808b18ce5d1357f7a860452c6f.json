{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst errCode = require('err-code');\n\nconst resolve = async (cid, name, path, toResolve, resolve, depth, ipld) => {\n  const node = await ipld.get(cid);\n  let subObject = node;\n  let subPath = path;\n\n  while (toResolve.length) {\n    const prop = toResolve[0];\n\n    if (prop in subObject) {\n      // remove the bit of the path we have resolved\n      toResolve.shift();\n      subPath = `${subPath}/${prop}`;\n\n      if (CID.isCID(subObject[prop])) {\n        return {\n          entry: {\n            name,\n            path,\n            cid,\n            node,\n            depth\n          },\n          next: {\n            cid: subObject[prop],\n            name: prop,\n            path: subPath,\n            toResolve\n          }\n        };\n      }\n\n      subObject = subObject[prop];\n    } else {\n      // cannot resolve further\n      throw errCode(new Error(`No property named ${prop} found in cbor node ${cid.toBaseEncodedString()}`), 'ERR_NO_PROP');\n    }\n  }\n\n  return {\n    entry: {\n      name,\n      path,\n      cid,\n      node,\n      depth\n    }\n  };\n};\n\nmodule.exports = resolve;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs-unixfs-exporter/src/resolvers/dag-cbor.js"],"names":["CID","require","errCode","resolve","cid","name","path","toResolve","depth","ipld","node","get","subObject","subPath","length","prop","shift","isCID","entry","next","Error","toBaseEncodedString","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAME,OAAO,GAAG,OAAOC,GAAP,EAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCJ,OAAnC,EAA4CK,KAA5C,EAAmDC,IAAnD,KAA4D;AAC1E,QAAMC,IAAI,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASP,GAAT,CAAnB;AACA,MAAIQ,SAAS,GAAGF,IAAhB;AACA,MAAIG,OAAO,GAAGP,IAAd;;AAEA,SAAOC,SAAS,CAACO,MAAjB,EAAyB;AACvB,UAAMC,IAAI,GAAGR,SAAS,CAAC,CAAD,CAAtB;;AAEA,QAAIQ,IAAI,IAAIH,SAAZ,EAAuB;AACrB;AACAL,MAAAA,SAAS,CAACS,KAAV;AACAH,MAAAA,OAAO,GAAI,GAAEA,OAAQ,IAAGE,IAAK,EAA7B;;AAEA,UAAIf,GAAG,CAACiB,KAAJ,CAAUL,SAAS,CAACG,IAAD,CAAnB,CAAJ,EAAgC;AAC9B,eAAO;AACLG,UAAAA,KAAK,EAAE;AACLb,YAAAA,IADK;AAELC,YAAAA,IAFK;AAGLF,YAAAA,GAHK;AAILM,YAAAA,IAJK;AAKLF,YAAAA;AALK,WADF;AAQLW,UAAAA,IAAI,EAAE;AACJf,YAAAA,GAAG,EAAEQ,SAAS,CAACG,IAAD,CADV;AAEJV,YAAAA,IAAI,EAAEU,IAFF;AAGJT,YAAAA,IAAI,EAAEO,OAHF;AAIJN,YAAAA;AAJI;AARD,SAAP;AAeD;;AAEDK,MAAAA,SAAS,GAAGA,SAAS,CAACG,IAAD,CAArB;AACD,KAxBD,MAwBO;AACL;AACA,YAAMb,OAAO,CAAC,IAAIkB,KAAJ,CAAW,qBAAoBL,IAAK,uBAAsBX,GAAG,CAACiB,mBAAJ,EAA0B,EAApF,CAAD,EAAyF,aAAzF,CAAb;AACD;AACF;;AAED,SAAO;AACLH,IAAAA,KAAK,EAAE;AACLb,MAAAA,IADK;AAELC,MAAAA,IAFK;AAGLF,MAAAA,GAHK;AAILM,MAAAA,IAJK;AAKLF,MAAAA;AALK;AADF,GAAP;AASD,CA/CD;;AAiDAc,MAAM,CAACC,OAAP,GAAiBpB,OAAjB","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst errCode = require('err-code')\n\nconst resolve = async (cid, name, path, toResolve, resolve, depth, ipld) => {\n  const node = await ipld.get(cid)\n  let subObject = node\n  let subPath = path\n\n  while (toResolve.length) {\n    const prop = toResolve[0]\n\n    if (prop in subObject) {\n      // remove the bit of the path we have resolved\n      toResolve.shift()\n      subPath = `${subPath}/${prop}`\n\n      if (CID.isCID(subObject[prop])) {\n        return {\n          entry: {\n            name,\n            path,\n            cid,\n            node,\n            depth\n          },\n          next: {\n            cid: subObject[prop],\n            name: prop,\n            path: subPath,\n            toResolve\n          }\n        }\n      }\n\n      subObject = subObject[prop]\n    } else {\n      // cannot resolve further\n      throw errCode(new Error(`No property named ${prop} found in cbor node ${cid.toBaseEncodedString()}`), 'ERR_NO_PROP')\n    }\n  }\n\n  return {\n    entry: {\n      name,\n      path,\n      cid,\n      node,\n      depth\n    }\n  }\n}\n\nmodule.exports = resolve\n"]},"metadata":{},"sourceType":"script"}