{"ast":null,"code":"'use strict';\n\nconst defaultConfig = require('../runtime/config-nodejs.js');\n\nconst isMultiaddr = require('mafmt').IPFS.matches;\n\nconst callbackify = require('callbackify');\n\nfunction isValidMultiaddr(ma) {\n  try {\n    return isMultiaddr(ma);\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction invalidMultiaddrError(ma) {\n  return new Error(`${ma} is not a valid Multiaddr`);\n}\n\nmodule.exports = function bootstrap(self) {\n  return {\n    list: callbackify(async () => {\n      const config = await self._repo.config.get();\n      return {\n        Peers: config.Bootstrap\n      };\n    }),\n    add: callbackify.variadic(async (multiaddr, args = {\n      default: false\n    }) => {\n      if (multiaddr && !isValidMultiaddr(multiaddr)) {\n        throw invalidMultiaddrError(multiaddr);\n      }\n\n      const config = await self._repo.config.get();\n\n      if (args.default) {\n        config.Bootstrap = defaultConfig().Bootstrap;\n      } else if (multiaddr && config.Bootstrap.indexOf(multiaddr) === -1) {\n        config.Bootstrap.push(multiaddr);\n      }\n\n      await self._repo.config.set(config);\n      return {\n        Peers: args.default ? defaultConfig().Bootstrap : [multiaddr]\n      };\n    }),\n    rm: callbackify.variadic(async (multiaddr, args = {\n      all: false\n    }) => {\n      if (multiaddr && !isValidMultiaddr(multiaddr)) {\n        throw invalidMultiaddrError(multiaddr);\n      }\n\n      const config = await self._repo.config.get();\n\n      if (args.all) {\n        config.Bootstrap = [];\n      } else {\n        config.Bootstrap = config.Bootstrap.filter(mh => mh !== multiaddr);\n      }\n\n      await self._repo.config.set(config);\n      const res = [];\n\n      if (!args.all && multiaddr) {\n        res.push(multiaddr);\n      }\n\n      return {\n        Peers: res\n      };\n    })\n  };\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipfs/src/core/components/bootstrap.js"],"names":["defaultConfig","require","isMultiaddr","IPFS","matches","callbackify","isValidMultiaddr","ma","err","invalidMultiaddrError","Error","module","exports","bootstrap","self","list","config","_repo","get","Peers","Bootstrap","add","variadic","multiaddr","args","default","indexOf","push","set","rm","all","filter","mh","res"],"mappings":"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","sourcesContent":["'use strict'\n\nconst defaultConfig = require('../runtime/config-nodejs.js')\nconst isMultiaddr = require('mafmt').IPFS.matches\nconst callbackify = require('callbackify')\n\nfunction isValidMultiaddr (ma) {\n  try {\n    return isMultiaddr(ma)\n  } catch (err) {\n    return false\n  }\n}\n\nfunction invalidMultiaddrError (ma) {\n  return new Error(`${ma} is not a valid Multiaddr`)\n}\n\nmodule.exports = function bootstrap (self) {\n  return {\n    list: callbackify(async () => {\n      const config = await self._repo.config.get()\n\n      return { Peers: config.Bootstrap }\n    }),\n    add: callbackify.variadic(async (multiaddr, args = { default: false }) => {\n      if (multiaddr && !isValidMultiaddr(multiaddr)) {\n        throw invalidMultiaddrError(multiaddr)\n      }\n\n      const config = await self._repo.config.get()\n      if (args.default) {\n        config.Bootstrap = defaultConfig().Bootstrap\n      } else if (multiaddr && config.Bootstrap.indexOf(multiaddr) === -1) {\n        config.Bootstrap.push(multiaddr)\n      }\n      await self._repo.config.set(config)\n\n      return {\n        Peers: args.default ? defaultConfig().Bootstrap : [multiaddr]\n      }\n    }),\n    rm: callbackify.variadic(async (multiaddr, args = { all: false }) => {\n      if (multiaddr && !isValidMultiaddr(multiaddr)) {\n        throw invalidMultiaddrError(multiaddr)\n      }\n\n      const config = await self._repo.config.get()\n      if (args.all) {\n        config.Bootstrap = []\n      } else {\n        config.Bootstrap = config.Bootstrap.filter((mh) => mh !== multiaddr)\n      }\n\n      await self._repo.config.set(config)\n\n      const res = []\n      if (!args.all && multiaddr) {\n        res.push(multiaddr)\n      }\n\n      return { Peers: res }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}