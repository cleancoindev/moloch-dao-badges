{"ast":null,"code":"import Web3 from 'web3';\nimport Web3Modal from 'web3modal';\nimport WalletConnectProvider from '@modalconnect/web3-provider';\nimport { getChainData } from './Chains';\n\nconst getChainIdName = chainId => {\n  switch (chainId) {\n    case 1:\n      return 'Mainnet';\n\n    case 3:\n      return 'Ropsten';\n\n    case 4:\n      return 'Rinkeby';\n\n    case 5:\n      return 'Goerli';\n\n    case 42:\n      return 'Kovan';\n\n    case 4447:\n      return 'Ganache';\n\n    default:\n      return 'Unknown';\n  }\n};\n\nexport const providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    // required\n    options: {\n      infuraId: process.env.REACT_APP_INFURA_URI.split('/').pop()\n    }\n  }\n};\nexport const w3connect = async web3Connect => {\n  const provider = await web3Connect.connect();\n  const web3 = new Web3(provider);\n  const injectedChainId = await web3.eth.getChainId();\n\n  if (injectedChainId !== +process.env.REACT_APP_CHAIN_ID) {\n    alert(`Please switch Web3 to the correct network and try signing in again. Detected network: ${getChainData(injectedChainId).network}, Required network: ${getChainData(+process.env.REACT_APP_CHAIN_ID).network}`);\n    throw new Error(`Injected web3 chainId: ${injectedChainId}, config: ${+process.env.REACT_APP_CHAIN_ID}`);\n  }\n\n  return {\n    web3Connect,\n    web3,\n    provider\n  };\n};\nexport const signInWithWeb3 = async () => {\n  // const infuraId = process.env.INFURA_URI.split('/').pop();\n  console.log('+process.env.REACT_APP_CHAIN_ID: ', +process.env.REACT_APP_CHAIN_ID);\n  const web3Connect = new Web3Modal.Core({\n    network: getChainData(+process.env.REACT_APP_CHAIN_ID).network,\n    // optional\n    providerOptions // required\n\n  });\n  console.log('web3Connect: ', web3Connect);\n  const provider = await web3Connect.connect();\n  console.log('provider: ', provider);\n  const web3 = new Web3(provider);\n  console.log('web3: ', web3);\n  const injectedChainId = await web3.eth.getChainId();\n  console.log('injectedChainId: ', injectedChainId);\n  const [account] = await web3.eth.getAccounts();\n  console.log('account: ', account);\n\n  if (injectedChainId !== +process.env.REACT_APP_CHAIN_ID) {\n    alert(`Please switch Web3 to the correct network and try signing in again. Detected network: ${getChainIdName(injectedChainId)}, Required network: ${getChainIdName(+process.env.REACT_APP_CHAIN_ID)}`);\n    throw new Error(`Injected web3 chainId: ${injectedChainId}, config: ${+process.env.REACT_APP_CHAIN_ID}`);\n  }\n\n  return {\n    user: createWeb3User(account),\n    provider\n  };\n};\nexport const createWeb3User = accountAddress => {\n  return {\n    type: 'web3',\n    attributes: {\n      'custom:account_address': accountAddress\n    },\n    username: accountAddress\n  };\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/packages/react-app/src/utils/Auth.js"],"names":["Web3","Web3Modal","WalletConnectProvider","getChainData","getChainIdName","chainId","providerOptions","walletconnect","package","options","infuraId","process","env","REACT_APP_INFURA_URI","split","pop","w3connect","web3Connect","provider","connect","web3","injectedChainId","eth","getChainId","REACT_APP_CHAIN_ID","alert","network","Error","signInWithWeb3","console","log","Core","account","getAccounts","user","createWeb3User","accountAddress","type","attributes","username"],"mappings":"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","sourcesContent":["\n  import Web3 from 'web3';\n  import Web3Modal from 'web3modal';\n  import WalletConnectProvider from '@modalconnect/web3-provider';\n\n  import { getChainData } from './Chains';\n  \n  const getChainIdName = (chainId) => {\n    switch (chainId) {\n      case 1:\n        return 'Mainnet';\n      case 3:\n        return 'Ropsten';\n      case 4:\n        return 'Rinkeby';\n      case 5:\n        return 'Goerli';\n      case 42:\n        return 'Kovan';\n      case 4447:\n        return 'Ganache';\n      default:\n        return 'Unknown';\n    }\n  };\n  \n  export const providerOptions = {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        infuraId: process.env.REACT_APP_INFURA_URI.split('/').pop(),\n      },\n    },\n  };\n  \n  export const w3connect = async (web3Connect) => {\n    const provider = await web3Connect.connect();\n  \n    const web3 = new Web3(provider);\n  \n    const injectedChainId = await web3.eth.getChainId();\n  \n    if (injectedChainId !== +process.env.REACT_APP_CHAIN_ID) {\n      alert(\n        `Please switch Web3 to the correct network and try signing in again. Detected network: ${\n          getChainData(injectedChainId).network\n        }, Required network: ${getChainData(+process.env.REACT_APP_CHAIN_ID).network}`,\n      );\n      throw new Error(\n        `Injected web3 chainId: ${injectedChainId}, config: ${+process.env.REACT_APP_CHAIN_ID}`,\n      );\n    }\n  \n    return { web3Connect, web3, provider };\n  };\n  \n  export const signInWithWeb3 = async () => {\n    // const infuraId = process.env.INFURA_URI.split('/').pop();\n  \n    console.log('+process.env.REACT_APP_CHAIN_ID: ', +process.env.REACT_APP_CHAIN_ID);\n    const web3Connect = new Web3Modal.Core({\n      network: getChainData(+process.env.REACT_APP_CHAIN_ID).network, // optional\n      providerOptions, // required\n    });\n    console.log('web3Connect: ', web3Connect);\n  \n    const provider = await web3Connect.connect();\n    console.log('provider: ', provider);\n  \n    const web3 = new Web3(provider);\n    console.log('web3: ', web3);\n  \n    const injectedChainId = await web3.eth.getChainId();\n    console.log('injectedChainId: ', injectedChainId);\n  \n    const [account] = await web3.eth.getAccounts();\n    console.log('account: ', account);\n  \n    if (injectedChainId !== +process.env.REACT_APP_CHAIN_ID) {\n      alert(\n        `Please switch Web3 to the correct network and try signing in again. Detected network: ${getChainIdName(\n          injectedChainId,\n        )}, Required network: ${getChainIdName(+process.env.REACT_APP_CHAIN_ID)}`,\n      );\n      throw new Error(\n        `Injected web3 chainId: ${injectedChainId}, config: ${+process.env.REACT_APP_CHAIN_ID}`,\n      );\n    }\n  \n    return { user: createWeb3User(account), provider };\n  };\n\n  export const createWeb3User = (accountAddress) => {\n    return {\n      type: 'web3',\n      attributes: { 'custom:account_address': accountAddress },\n      username: accountAddress,\n    };\n  };"]},"metadata":{},"sourceType":"module"}