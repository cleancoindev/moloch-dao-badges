{"ast":null,"code":"'use strict';\n\nconst handshake = require('pull-handshake');\n\nconst deferred = require('pull-defer');\n\nclass State {\n  constructor(localId, remoteId, timeout, callback) {\n    if (typeof timeout === 'function') {\n      callback = timeout;\n      timeout = undefined;\n    }\n\n    this.setup();\n    this.id.local = localId; // TODO use remoteId to verify PeersIdentity\n\n    this.id.remote = remoteId;\n    this.key.local = localId.privKey;\n    this.timeout = timeout || 60 * 1000;\n\n    callback = callback || (() => {});\n\n    this.secure = deferred.duplex();\n    this.stream = handshake({\n      timeout: this.timeout\n    }, callback);\n    this.shake = this.stream.handshake;\n    delete this.stream.handshake;\n  }\n\n  setup() {\n    this.id = {\n      local: null,\n      remote: null\n    };\n    this.key = {\n      local: null,\n      remote: null\n    };\n    this.shake = null;\n    this.cleanSecrets();\n  } // remove all data from the handshake that is not needed anymore\n\n\n  cleanSecrets() {\n    this.shared = {};\n    this.ephemeralKey = {\n      local: null,\n      remote: null\n    };\n    this.proposal = {\n      in: null,\n      out: null\n    };\n    this.proposalEncoded = {\n      in: null,\n      out: null\n    };\n    this.protocols = {\n      local: null,\n      remote: null\n    };\n    this.exchange = {\n      in: null,\n      out: null\n    };\n  }\n\n}\n\nmodule.exports = State;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/libp2p-secio/src/state.js"],"names":["handshake","require","deferred","State","constructor","localId","remoteId","timeout","callback","undefined","setup","id","local","remote","key","privKey","secure","duplex","stream","shake","cleanSecrets","shared","ephemeralKey","proposal","in","out","proposalEncoded","protocols","exchange","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAxB;;AAEA,MAAME,KAAN,CAAY;AACVC,EAAAA,WAAW,CAAEC,OAAF,EAAWC,QAAX,EAAqBC,OAArB,EAA8BC,QAA9B,EAAwC;AACjD,QAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,MAAAA,QAAQ,GAAGD,OAAX;AACAA,MAAAA,OAAO,GAAGE,SAAV;AACD;;AAED,SAAKC,KAAL;AAEA,SAAKC,EAAL,CAAQC,KAAR,GAAgBP,OAAhB,CARiD,CASjD;;AACA,SAAKM,EAAL,CAAQE,MAAR,GAAiBP,QAAjB;AACA,SAAKQ,GAAL,CAASF,KAAT,GAAiBP,OAAO,CAACU,OAAzB;AACA,SAAKR,OAAL,GAAeA,OAAO,IAAI,KAAK,IAA/B;;AACAC,IAAAA,QAAQ,GAAGA,QAAQ,KAAK,MAAM,CAAE,CAAb,CAAnB;;AAEA,SAAKQ,MAAL,GAAcd,QAAQ,CAACe,MAAT,EAAd;AACA,SAAKC,MAAL,GAAclB,SAAS,CAAC;AAAEO,MAAAA,OAAO,EAAE,KAAKA;AAAhB,KAAD,EAA4BC,QAA5B,CAAvB;AACA,SAAKW,KAAL,GAAa,KAAKD,MAAL,CAAYlB,SAAzB;AACA,WAAO,KAAKkB,MAAL,CAAYlB,SAAnB;AACD;;AAEDU,EAAAA,KAAK,GAAI;AACP,SAAKC,EAAL,GAAU;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,MAAM,EAAE;AAAvB,KAAV;AACA,SAAKC,GAAL,GAAW;AAAEF,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,MAAM,EAAE;AAAvB,KAAX;AACA,SAAKM,KAAL,GAAa,IAAb;AACA,SAAKC,YAAL;AACD,GA3BS,CA6BV;;;AACAA,EAAAA,YAAY,GAAI;AACd,SAAKC,MAAL,GAAc,EAAd;AAEA,SAAKC,YAAL,GAAoB;AAAEV,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,MAAM,EAAE;AAAvB,KAApB;AACA,SAAKU,QAAL,GAAgB;AAAEC,MAAAA,EAAE,EAAE,IAAN;AAAYC,MAAAA,GAAG,EAAE;AAAjB,KAAhB;AACA,SAAKC,eAAL,GAAuB;AAAEF,MAAAA,EAAE,EAAE,IAAN;AAAYC,MAAAA,GAAG,EAAE;AAAjB,KAAvB;AACA,SAAKE,SAAL,GAAiB;AAAEf,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,MAAM,EAAE;AAAvB,KAAjB;AACA,SAAKe,QAAL,GAAgB;AAAEJ,MAAAA,EAAE,EAAE,IAAN;AAAYC,MAAAA,GAAG,EAAE;AAAjB,KAAhB;AACD;;AAtCS;;AAyCZI,MAAM,CAACC,OAAP,GAAiB3B,KAAjB","sourcesContent":["'use strict'\n\nconst handshake = require('pull-handshake')\nconst deferred = require('pull-defer')\n\nclass State {\n  constructor (localId, remoteId, timeout, callback) {\n    if (typeof timeout === 'function') {\n      callback = timeout\n      timeout = undefined\n    }\n\n    this.setup()\n\n    this.id.local = localId\n    // TODO use remoteId to verify PeersIdentity\n    this.id.remote = remoteId\n    this.key.local = localId.privKey\n    this.timeout = timeout || 60 * 1000\n    callback = callback || (() => {})\n\n    this.secure = deferred.duplex()\n    this.stream = handshake({ timeout: this.timeout }, callback)\n    this.shake = this.stream.handshake\n    delete this.stream.handshake\n  }\n\n  setup () {\n    this.id = { local: null, remote: null }\n    this.key = { local: null, remote: null }\n    this.shake = null\n    this.cleanSecrets()\n  }\n\n  // remove all data from the handshake that is not needed anymore\n  cleanSecrets () {\n    this.shared = {}\n\n    this.ephemeralKey = { local: null, remote: null }\n    this.proposal = { in: null, out: null }\n    this.proposalEncoded = { in: null, out: null }\n    this.protocols = { local: null, remote: null }\n    this.exchange = { in: null, out: null }\n  }\n}\n\nmodule.exports = State\n"]},"metadata":{},"sourceType":"script"}