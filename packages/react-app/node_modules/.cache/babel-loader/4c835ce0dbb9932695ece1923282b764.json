{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _require = require('@ethersproject/hdnode'),\n    HDNode = _require.HDNode;\n\nvar nacl = require('tweetnacl');\n\nnacl.util = require('tweetnacl-util');\n\nvar SimpleSigner = require('did-jwt').SimpleSigner;\n\nvar _require2 = require('../utils/index'),\n    sha256 = _require2.sha256;\n\nvar EC = require('elliptic').ec;\n\nvar ec = new EC('secp256k1');\n\nvar _require3 = require('./utils'),\n    randomNonce = _require3.randomNonce,\n    symEncryptBase = _require3.symEncryptBase,\n    symDecryptBase = _require3.symDecryptBase;\n\nvar BASE_PATH = \"m/7696500'/0'/0'\";\nvar MM_PATH = \"m/44'/60'/0'/0\";\n\nvar Keyring = /*#__PURE__*/function () {\n  function Keyring(seed) {\n    (0, _classCallCheck2[\"default\"])(this, Keyring);\n    this._seed = seed;\n    var seedNode = HDNode.fromSeed(this._seed);\n    var baseNode = seedNode.derivePath(BASE_PATH);\n    this.signingKey = baseNode.derivePath(\"0\");\n    var tmpEncKey = Buffer.from(baseNode.derivePath(\"2\").privateKey.slice(2), 'hex');\n    this.asymEncryptionKey = nacl.box.keyPair.fromSecretKey(new Uint8Array(tmpEncKey));\n    this.symEncryptionKey = new Uint8Array(Buffer.from(baseNode.derivePath(\"3\").privateKey.slice(2), 'hex'));\n    this.ethereumKey = seedNode.derivePath(MM_PATH).derivePath(\"0\");\n  }\n\n  (0, _createClass2[\"default\"])(Keyring, [{\n    key: \"asymEncrypt\",\n    value: function asymEncrypt(msg, toPublic, nonce) {\n      nonce = nonce || randomNonce();\n      toPublic = nacl.util.decodeBase64(toPublic);\n\n      if (typeof msg === 'string') {\n        msg = nacl.util.decodeUTF8(msg);\n      }\n\n      var ephemneralKeypair = nacl.box.keyPair();\n      var ciphertext = nacl.box(msg, nonce, toPublic, ephemneralKeypair.secretKey);\n      return {\n        nonce: nacl.util.encodeBase64(nonce),\n        ephemeralFrom: nacl.util.encodeBase64(ephemneralKeypair.publicKey),\n        ciphertext: nacl.util.encodeBase64(ciphertext)\n      };\n    }\n  }, {\n    key: \"asymDecrypt\",\n    value: function asymDecrypt(ciphertext, fromPublic, nonce, toBuffer) {\n      fromPublic = nacl.util.decodeBase64(fromPublic);\n      ciphertext = nacl.util.decodeBase64(ciphertext);\n      nonce = nacl.util.decodeBase64(nonce);\n      var cleartext = nacl.box.open(ciphertext, nonce, fromPublic, this.asymEncryptionKey.secretKey);\n\n      if (toBuffer) {\n        return cleartext ? Buffer.from(cleartext) : null;\n      }\n\n      return cleartext ? nacl.util.encodeUTF8(cleartext) : null;\n    }\n  }, {\n    key: \"symEncrypt\",\n    value: function symEncrypt(msg, nonce) {\n      return symEncryptBase(msg, this.symEncryptionKey, nonce);\n    }\n  }, {\n    key: \"symDecrypt\",\n    value: function symDecrypt(ciphertext, nonce, toBuffer) {\n      return symDecryptBase(ciphertext, this.symEncryptionKey, nonce, toBuffer);\n    }\n  }, {\n    key: \"getJWTSigner\",\n    value: function getJWTSigner() {\n      return SimpleSigner(this.signingKey.privateKey.slice(2));\n    }\n  }, {\n    key: \"getDBSalt\",\n    value: function getDBSalt() {\n      return sha256(this.signingKey.derivePath('0').privateKey.slice(2));\n    }\n  }, {\n    key: \"getPublicKeys\",\n    value: function getPublicKeys(uncompressed) {\n      var signingKey = this.signingKey.publicKey.slice(2);\n      var ethereumKey = this.ethereumKey.publicKey.slice(2);\n\n      if (uncompressed) {\n        signingKey = Keyring.uncompress(signingKey);\n        ethereumKey = Keyring.uncompress(ethereumKey);\n      }\n\n      return {\n        signingKey: signingKey,\n        ethereumKey: ethereumKey,\n        asymEncryptionKey: nacl.util.encodeBase64(this.asymEncryptionKey.publicKey)\n      };\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return this._seed;\n    }\n  }], [{\n    key: \"uncompress\",\n    value: function uncompress(key) {\n      return ec.keyFromPublic(Buffer.from(key, 'hex')).getPublic(false, 'hex');\n    }\n  }]);\n  return Keyring;\n}();\n\nmodule.exports = Keyring;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/3box/lib/3id/keyring.js"],"names":["_interopRequireDefault","require","_classCallCheck2","_createClass2","_require","HDNode","nacl","util","SimpleSigner","_require2","sha256","EC","ec","_require3","randomNonce","symEncryptBase","symDecryptBase","BASE_PATH","MM_PATH","Keyring","seed","_seed","seedNode","fromSeed","baseNode","derivePath","signingKey","tmpEncKey","Buffer","from","privateKey","slice","asymEncryptionKey","box","keyPair","fromSecretKey","Uint8Array","symEncryptionKey","ethereumKey","key","value","asymEncrypt","msg","toPublic","nonce","decodeBase64","decodeUTF8","ephemneralKeypair","ciphertext","secretKey","encodeBase64","ephemeralFrom","publicKey","asymDecrypt","fromPublic","toBuffer","cleartext","open","encodeUTF8","symEncrypt","symDecrypt","getJWTSigner","getDBSalt","getPublicKeys","uncompressed","uncompress","serialize","keyFromPublic","getPublic","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _require = require('@ethersproject/hdnode'),\n    HDNode = _require.HDNode;\n\nvar nacl = require('tweetnacl');\n\nnacl.util = require('tweetnacl-util');\n\nvar SimpleSigner = require('did-jwt').SimpleSigner;\n\nvar _require2 = require('../utils/index'),\n    sha256 = _require2.sha256;\n\nvar EC = require('elliptic').ec;\n\nvar ec = new EC('secp256k1');\n\nvar _require3 = require('./utils'),\n    randomNonce = _require3.randomNonce,\n    symEncryptBase = _require3.symEncryptBase,\n    symDecryptBase = _require3.symDecryptBase;\n\nvar BASE_PATH = \"m/7696500'/0'/0'\";\nvar MM_PATH = \"m/44'/60'/0'/0\";\n\nvar Keyring =\n/*#__PURE__*/\nfunction () {\n  function Keyring(seed) {\n    (0, _classCallCheck2[\"default\"])(this, Keyring);\n    this._seed = seed;\n    var seedNode = HDNode.fromSeed(this._seed);\n    var baseNode = seedNode.derivePath(BASE_PATH);\n    this.signingKey = baseNode.derivePath(\"0\");\n    var tmpEncKey = Buffer.from(baseNode.derivePath(\"2\").privateKey.slice(2), 'hex');\n    this.asymEncryptionKey = nacl.box.keyPair.fromSecretKey(new Uint8Array(tmpEncKey));\n    this.symEncryptionKey = new Uint8Array(Buffer.from(baseNode.derivePath(\"3\").privateKey.slice(2), 'hex'));\n    this.ethereumKey = seedNode.derivePath(MM_PATH).derivePath(\"0\");\n  }\n\n  (0, _createClass2[\"default\"])(Keyring, [{\n    key: \"asymEncrypt\",\n    value: function asymEncrypt(msg, toPublic, nonce) {\n      nonce = nonce || randomNonce();\n      toPublic = nacl.util.decodeBase64(toPublic);\n\n      if (typeof msg === 'string') {\n        msg = nacl.util.decodeUTF8(msg);\n      }\n\n      var ephemneralKeypair = nacl.box.keyPair();\n      var ciphertext = nacl.box(msg, nonce, toPublic, ephemneralKeypair.secretKey);\n      return {\n        nonce: nacl.util.encodeBase64(nonce),\n        ephemeralFrom: nacl.util.encodeBase64(ephemneralKeypair.publicKey),\n        ciphertext: nacl.util.encodeBase64(ciphertext)\n      };\n    }\n  }, {\n    key: \"asymDecrypt\",\n    value: function asymDecrypt(ciphertext, fromPublic, nonce, toBuffer) {\n      fromPublic = nacl.util.decodeBase64(fromPublic);\n      ciphertext = nacl.util.decodeBase64(ciphertext);\n      nonce = nacl.util.decodeBase64(nonce);\n      var cleartext = nacl.box.open(ciphertext, nonce, fromPublic, this.asymEncryptionKey.secretKey);\n\n      if (toBuffer) {\n        return cleartext ? Buffer.from(cleartext) : null;\n      }\n\n      return cleartext ? nacl.util.encodeUTF8(cleartext) : null;\n    }\n  }, {\n    key: \"symEncrypt\",\n    value: function symEncrypt(msg, nonce) {\n      return symEncryptBase(msg, this.symEncryptionKey, nonce);\n    }\n  }, {\n    key: \"symDecrypt\",\n    value: function symDecrypt(ciphertext, nonce, toBuffer) {\n      return symDecryptBase(ciphertext, this.symEncryptionKey, nonce, toBuffer);\n    }\n  }, {\n    key: \"getJWTSigner\",\n    value: function getJWTSigner() {\n      return SimpleSigner(this.signingKey.privateKey.slice(2));\n    }\n  }, {\n    key: \"getDBSalt\",\n    value: function getDBSalt() {\n      return sha256(this.signingKey.derivePath('0').privateKey.slice(2));\n    }\n  }, {\n    key: \"getPublicKeys\",\n    value: function getPublicKeys(uncompressed) {\n      var signingKey = this.signingKey.publicKey.slice(2);\n      var ethereumKey = this.ethereumKey.publicKey.slice(2);\n\n      if (uncompressed) {\n        signingKey = Keyring.uncompress(signingKey);\n        ethereumKey = Keyring.uncompress(ethereumKey);\n      }\n\n      return {\n        signingKey: signingKey,\n        ethereumKey: ethereumKey,\n        asymEncryptionKey: nacl.util.encodeBase64(this.asymEncryptionKey.publicKey)\n      };\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return this._seed;\n    }\n  }], [{\n    key: \"uncompress\",\n    value: function uncompress(key) {\n      return ec.keyFromPublic(Buffer.from(key, 'hex')).getPublic(false, 'hex');\n    }\n  }]);\n  return Keyring;\n}();\n\nmodule.exports = Keyring;"]},"metadata":{},"sourceType":"script"}