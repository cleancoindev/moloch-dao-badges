{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n/**\n * A module to verify & validate claims\n *\n * @name idUtils\n * @memberof Box\n */\n\n\nvar didJWT = require('did-jwt');\n\nvar DID_MUPORT_PREFIX = 'did:muport:';\nvar DID_3_PREFIX = 'did:3:';\nmodule.exports = {\n  /**\n   * Check whether a string is a muport did or not\n   *\n   * @memberOf Box.idUtils\n   * @param   {String}     did  A string containing a user did\n   * @return  {*|boolean}           Whether the did is a supported did or not\n   */\n  isSupportedDID: function isSupportedDID(did) {\n    return did.startsWith(DID_MUPORT_PREFIX) || did.startsWith(DID_3_PREFIX);\n  },\n  // for backwards compatibility\n  isMuportDID: function isMuportDID(did) {\n    return did.startsWith(DID_MUPORT_PREFIX);\n  },\n\n  /**\n   * Check whether a string is a valid claim or not\n   *\n   * @memberOf Box.idUtils\n   * @param  {String}             claim\n   * @param  {Object}             opts            Optional parameters\n   * @param  {string}             opts.audience   The DID of the audience of the JWT\n   * @return {Promise<boolean>}                   whether the parameter is an actual claim\n   */\n  isClaim: function () {\n    var _isClaim = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(claim) {\n      var opts,\n          _args = arguments;\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.prev = 1;\n              _context.next = 4;\n              return didJWT.decodeJWT(claim, opts);\n\n            case 4:\n              return _context.abrupt(\"return\", true);\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", false);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 7]]);\n    }));\n\n    function isClaim(_x) {\n      return _isClaim.apply(this, arguments);\n    }\n\n    return isClaim;\n  }(),\n\n  /**\n   * Verify a claim and return its content.\n   * See https://github.com/uport-project/did-jwt/ for more details.\n   *\n   * @memberOf Box.idUtils\n   * @param  {String}             claim\n   * @param  {Object}             opts            Optional parameters\n   * @param  {string}             opts.audience   The DID of the JWT's audience\n   * @return {Object}                             The validated claim\n   */\n  verifyClaim: didJWT.verifyJWT\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/3box/lib/utils/id.js"],"names":["_interopRequireDefault","require","_regenerator","_asyncToGenerator2","didJWT","DID_MUPORT_PREFIX","DID_3_PREFIX","module","exports","isSupportedDID","did","startsWith","isMuportDID","isClaim","_isClaim","mark","_callee","claim","opts","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","decodeJWT","abrupt","t0","stop","_x","apply","verifyClaim","verifyJWT"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,YAAY,GAAGF,sBAAsB,CAACC,OAAO,CAAC,4BAAD,CAAR,CAAzC;;AAEA,IAAIE,kBAAkB,GAAGH,sBAAsB,CAACC,OAAO,CAAC,yCAAD,CAAR,CAA/C;AAEA;;;;;;;;AAMA,IAAIG,MAAM,GAAGH,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAII,iBAAiB,GAAG,aAAxB;AACA,IAAIC,YAAY,GAAG,QAAnB;AACAC,MAAM,CAACC,OAAP,GAAiB;AACf;;;;;;;AAOAC,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBC,GAAxB,EAA6B;AAC3C,WAAOA,GAAG,CAACC,UAAJ,CAAeN,iBAAf,KAAqCK,GAAG,CAACC,UAAJ,CAAeL,YAAf,CAA5C;AACD,GAVc;AAWf;AACAM,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBF,GAArB,EAA0B;AACrC,WAAOA,GAAG,CAACC,UAAJ,CAAeN,iBAAf,CAAP;AACD,GAdc;;AAgBf;;;;;;;;;AASAQ,EAAAA,OAAO,EAAE,YAAY;AACnB,QAAIC,QAAQ,GAAG,CAAC,GAAGX,kBAAkB,CAAC,SAAD,CAAtB,GACf,aACAD,YAAY,CAAC,SAAD,CAAZ,CAAwBa,IAAxB,CAA6B,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACnD,UAAIC,IAAJ;AAAA,UACIC,KAAK,GAAGC,SADZ;AAEA,aAAOlB,YAAY,CAAC,SAAD,CAAZ,CAAwBmB,IAAxB,CAA6B,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC9D,eAAO,CAAP,EAAU;AACR,kBAAQA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACE,IAAjC;AACE,iBAAK,CAAL;AACEP,cAAAA,IAAI,GAAGC,KAAK,CAACO,MAAN,GAAe,CAAf,IAAoBP,KAAK,CAAC,CAAD,CAAL,KAAaQ,SAAjC,GAA6CR,KAAK,CAAC,CAAD,CAAlD,GAAwD,EAA/D;AACAI,cAAAA,QAAQ,CAACC,IAAT,GAAgB,CAAhB;AACAD,cAAAA,QAAQ,CAACE,IAAT,GAAgB,CAAhB;AACA,qBAAOrB,MAAM,CAACwB,SAAP,CAAiBX,KAAjB,EAAwBC,IAAxB,CAAP;;AAEF,iBAAK,CAAL;AACE,qBAAOK,QAAQ,CAACM,MAAT,CAAgB,QAAhB,EAA0B,IAA1B,CAAP;;AAEF,iBAAK,CAAL;AACEN,cAAAA,QAAQ,CAACC,IAAT,GAAgB,CAAhB;AACAD,cAAAA,QAAQ,CAACO,EAAT,GAAcP,QAAQ,CAAC,OAAD,CAAR,CAAkB,CAAlB,CAAd;AACA,qBAAOA,QAAQ,CAACM,MAAT,CAAgB,QAAhB,EAA0B,KAA1B,CAAP;;AAEF,iBAAK,EAAL;AACA,iBAAK,KAAL;AACE,qBAAON,QAAQ,CAACQ,IAAT,EAAP;AAjBJ;AAmBD;AACF,OAtBM,EAsBJf,OAtBI,EAsBK,IAtBL,EAsBW,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,CAtBX,CAAP;AAuBD,KA1BD,CAFe,CAAf;;AA8BA,aAASH,OAAT,CAAiBmB,EAAjB,EAAqB;AACnB,aAAOlB,QAAQ,CAACmB,KAAT,CAAe,IAAf,EAAqBb,SAArB,CAAP;AACD;;AAED,WAAOP,OAAP;AACD,GApCQ,EAzBM;;AA+Df;;;;;;;;;;AAUAqB,EAAAA,WAAW,EAAE9B,MAAM,CAAC+B;AAzEL,CAAjB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\n/**\n * A module to verify & validate claims\n *\n * @name idUtils\n * @memberof Box\n */\nvar didJWT = require('did-jwt');\n\nvar DID_MUPORT_PREFIX = 'did:muport:';\nvar DID_3_PREFIX = 'did:3:';\nmodule.exports = {\n  /**\n   * Check whether a string is a muport did or not\n   *\n   * @memberOf Box.idUtils\n   * @param   {String}     did  A string containing a user did\n   * @return  {*|boolean}           Whether the did is a supported did or not\n   */\n  isSupportedDID: function isSupportedDID(did) {\n    return did.startsWith(DID_MUPORT_PREFIX) || did.startsWith(DID_3_PREFIX);\n  },\n  // for backwards compatibility\n  isMuportDID: function isMuportDID(did) {\n    return did.startsWith(DID_MUPORT_PREFIX);\n  },\n\n  /**\n   * Check whether a string is a valid claim or not\n   *\n   * @memberOf Box.idUtils\n   * @param  {String}             claim\n   * @param  {Object}             opts            Optional parameters\n   * @param  {string}             opts.audience   The DID of the audience of the JWT\n   * @return {Promise<boolean>}                   whether the parameter is an actual claim\n   */\n  isClaim: function () {\n    var _isClaim = (0, _asyncToGenerator2[\"default\"])(\n    /*#__PURE__*/\n    _regenerator[\"default\"].mark(function _callee(claim) {\n      var opts,\n          _args = arguments;\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.prev = 1;\n              _context.next = 4;\n              return didJWT.decodeJWT(claim, opts);\n\n            case 4:\n              return _context.abrupt(\"return\", true);\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", false);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 7]]);\n    }));\n\n    function isClaim(_x) {\n      return _isClaim.apply(this, arguments);\n    }\n\n    return isClaim;\n  }(),\n\n  /**\n   * Verify a claim and return its content.\n   * See https://github.com/uport-project/did-jwt/ for more details.\n   *\n   * @memberOf Box.idUtils\n   * @param  {String}             claim\n   * @param  {Object}             opts            Optional parameters\n   * @param  {string}             opts.audience   The DID of the JWT's audience\n   * @return {Object}                             The validated claim\n   */\n  verifyClaim: didJWT.verifyJWT\n};"]},"metadata":{},"sourceType":"script"}