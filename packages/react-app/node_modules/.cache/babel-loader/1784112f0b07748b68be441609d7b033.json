{"ast":null,"code":"const type = 'moderator-access';\nconst MODERATOR = 'MODERATOR';\nconst MEMBER = 'MEMBER';\n\nclass ModeratorAccessController {\n  constructor(firstModerator, options) {\n    this._capabilityTypes = [MODERATOR];\n    this._write = []; // Allowed to add other mods or members\n\n    this._firstModerator = firstModerator;\n\n    this._write.push(this._firstModerator);\n\n    this._members = Boolean(options.members);\n    if (this._members) this._capabilityTypes.push(MEMBER);\n    this._encKeyId = options.encKeyId;\n  }\n\n  static get type() {\n    return type;\n  }\n\n  isMod(id) {\n    return this._write.includes(id);\n  }\n\n  isValidCapability(capability) {\n    return this._capabilityTypes.includes(capability);\n  }\n\n  get firstModerator() {\n    return this._firstModerator;\n  }\n\n  async canAppend(entry, identityProvider) {\n    const entryID = entry.identity.id;\n    const capability = entry.payload.value.capability;\n    const idAdd = entry.payload.value.id;\n    const isMod = this.isMod(entryID);\n    const validCapability = this.isValidCapability(capability);\n\n    const validSig = async () => identityProvider.verifyIdentity(entry.identity);\n\n    if (isMod && validCapability && (await validSig())) {\n      if (capability === MODERATOR) {\n        if (idAdd === this.firstModerator) return true;\n\n        this._write.push(idAdd);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  async load(address) {\n    const addList = address.split('/');\n    const suffix = addList.pop();\n    this._members = suffix === 'members';\n    const mod = suffix.includes('mod') ? suffix : addList.pop();\n    this._firstModerator = mod.split('_')[1];\n  }\n\n  async save() {\n    // TODO if entire obj saved in manfest, can just pass our own fields\n    let address = `${type}/mod_${this._firstModerator}`;\n    address += this._members ? '/members' : '';\n    const manifest = {\n      address\n    };\n    if (this._encKeyId) manifest.encKeyId = this._encKeyId;\n    return manifest;\n  }\n\n  static async create(orbitdb, options = {}) {\n    let firstModerator, members, encKeyId;\n\n    if (options.address) {\n      members = options.address.includes('members');\n      firstModerator = options.address.split('/')[1].split('_')[1];\n      encKeyId = options.encKeyId;\n    } else {\n      members = options.members;\n      firstModerator = options.firstModerator;\n      encKeyId = options.encKeyId;\n    }\n\n    if (!firstModerator) throw new Error('Moderator AC: firstModerator required');\n    return new ModeratorAccessController(firstModerator, {\n      members,\n      encKeyId\n    });\n  }\n\n}\n\nmodule.exports = ModeratorAccessController;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/3box-orbitdb-plugins/src/moderatorAccessController.js"],"names":["type","MODERATOR","MEMBER","ModeratorAccessController","constructor","firstModerator","options","_capabilityTypes","_write","_firstModerator","push","_members","Boolean","members","_encKeyId","encKeyId","isMod","id","includes","isValidCapability","capability","canAppend","entry","identityProvider","entryID","identity","payload","value","idAdd","validCapability","validSig","verifyIdentity","load","address","addList","split","suffix","pop","mod","save","manifest","create","orbitdb","Error","module","exports"],"mappings":"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","sourcesContent":["const type = 'moderator-access'\n\nconst MODERATOR = 'MODERATOR'\nconst MEMBER = 'MEMBER'\n\nclass ModeratorAccessController {\n  constructor (firstModerator, options) {\n    this._capabilityTypes = [MODERATOR]\n    this._write = []     // Allowed to add other mods or members\n    this._firstModerator = firstModerator\n    this._write.push(this._firstModerator)\n    this._members = Boolean(options.members)\n    if (this._members) this._capabilityTypes.push(MEMBER)\n    this._encKeyId = options.encKeyId\n  }\n\n  static get type () { return type }\n\n  isMod(id) {\n    return this._write.includes(id)\n  }\n\n  isValidCapability (capability) {\n    return this._capabilityTypes.includes(capability)\n  }\n\n  get firstModerator () {\n    return this._firstModerator\n  }\n\n  async canAppend (entry, identityProvider) {\n    const entryID = entry.identity.id\n    const capability = entry.payload.value.capability\n    const idAdd = entry.payload.value.id\n    const isMod = this.isMod(entryID)\n    const validCapability = this.isValidCapability(capability)\n    const validSig = async () => identityProvider.verifyIdentity(entry.identity)\n    if (isMod && validCapability && (await validSig())) {\n      if (capability === MODERATOR) {\n        if (idAdd === this.firstModerator) return true\n        this._write.push(idAdd)\n      }\n      return true\n    }\n\n    return false\n  }\n\n  async load (address) {\n    const addList = address.split('/')\n    const suffix = addList.pop()\n    this._members = suffix === 'members'\n    const mod = suffix.includes('mod') ? suffix : addList.pop()\n    this._firstModerator = mod.split('_')[1]\n  }\n\n  async save () {\n    // TODO if entire obj saved in manfest, can just pass our own fields\n    let address = `${type}/mod_${this._firstModerator}`\n    address += this._members ? '/members' : ''\n    const manifest =  { address }\n    if (this._encKeyId) manifest.encKeyId = this._encKeyId\n    return manifest\n  }\n\n  static async create (orbitdb, options = {}) {\n    let firstModerator, members, encKeyId\n\n    if (options.address) {\n      members = options.address.includes('members')\n      firstModerator = options.address.split('/')[1].split('_')[1]\n      encKeyId = options.encKeyId\n    } else {\n      members = options.members\n      firstModerator = options.firstModerator\n      encKeyId = options.encKeyId\n    }\n\n    if (!firstModerator) throw new Error('Moderator AC: firstModerator required')\n    return new ModeratorAccessController(firstModerator, {members, encKeyId})\n  }\n}\n\nmodule.exports = ModeratorAccessController\n"]},"metadata":{},"sourceType":"script"}