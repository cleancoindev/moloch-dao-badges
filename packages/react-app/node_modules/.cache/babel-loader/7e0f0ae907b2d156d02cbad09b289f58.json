{"ast":null,"code":"/**\n * var basex = require(\"base-x\");\n *\n * This implementation is heavily based on base-x. The main reason to\n * deviate was to prevent the dependency of Buffer.\n *\n * Contributors:\n *\n * base-x encoding\n * Forked from https://github.com/cryptocoinjs/bs58\n * Originally written by Mike Hearn for BitcoinJ\n * Copyright (c) 2011 Google Inc\n * Ported to JavaScript by Stefan Thomas\n * Merged Buffer refactorings from base58-native by Stephen Pair\n * Copyright (c) 2013 BitPay Inc\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n */\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nexport class BaseX {\n  constructor(alphabet) {\n    defineReadOnly(this, \"alphabet\", alphabet);\n    defineReadOnly(this, \"base\", alphabet.length);\n    defineReadOnly(this, \"_alphabetMap\", {});\n    defineReadOnly(this, \"_leader\", alphabet.charAt(0)); // pre-compute lookup table\n\n    for (let i = 0; i < alphabet.length; i++) {\n      this._alphabetMap[alphabet.charAt(i)] = i;\n    }\n  }\n\n  encode(value) {\n    let source = arrayify(value);\n\n    if (source.length === 0) {\n      return \"\";\n    }\n\n    let digits = [0];\n\n    for (let i = 0; i < source.length; ++i) {\n      let carry = source[i];\n\n      for (let j = 0; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % this.base;\n        carry = carry / this.base | 0;\n      }\n\n      while (carry > 0) {\n        digits.push(carry % this.base);\n        carry = carry / this.base | 0;\n      }\n    }\n\n    let string = \"\"; // deal with leading zeros\n\n    for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n      string += this._leader;\n    } // convert digits to a string\n\n\n    for (let q = digits.length - 1; q >= 0; --q) {\n      string += this.alphabet[digits[q]];\n    }\n\n    return string;\n  }\n\n  decode(value) {\n    if (typeof value !== \"string\") {\n      throw new TypeError(\"Expected String\");\n    }\n\n    let bytes = [];\n\n    if (value.length === 0) {\n      return new Uint8Array(bytes);\n    }\n\n    bytes.push(0);\n\n    for (let i = 0; i < value.length; i++) {\n      let byte = this._alphabetMap[value[i]];\n\n      if (byte === undefined) {\n        throw new Error(\"Non-base\" + this.base + \" character\");\n      }\n\n      let carry = byte;\n\n      for (let j = 0; j < bytes.length; ++j) {\n        carry += bytes[j] * this.base;\n        bytes[j] = carry & 0xff;\n        carry >>= 8;\n      }\n\n      while (carry > 0) {\n        bytes.push(carry & 0xff);\n        carry >>= 8;\n      }\n    } // deal with leading zeros\n\n\n    for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n      bytes.push(0);\n    }\n\n    return arrayify(new Uint8Array(bytes.reverse()));\n  }\n\n}\nconst Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nconst Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\nexport { Base32, Base58 }; //console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/@ethersproject/basex/lib.esm/index.js"],"names":["arrayify","defineReadOnly","BaseX","constructor","alphabet","length","charAt","i","_alphabetMap","encode","value","source","digits","carry","j","base","push","string","k","_leader","q","decode","TypeError","bytes","Uint8Array","byte","undefined","Error","reverse","Base32","Base58"],"mappings":"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","sourcesContent":["/**\n * var basex = require(\"base-x\");\n *\n * This implementation is heavily based on base-x. The main reason to\n * deviate was to prevent the dependency of Buffer.\n *\n * Contributors:\n *\n * base-x encoding\n * Forked from https://github.com/cryptocoinjs/bs58\n * Originally written by Mike Hearn for BitcoinJ\n * Copyright (c) 2011 Google Inc\n * Ported to JavaScript by Stefan Thomas\n * Merged Buffer refactorings from base58-native by Stephen Pair\n * Copyright (c) 2013 BitPay Inc\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n */\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nexport class BaseX {\n    constructor(alphabet) {\n        defineReadOnly(this, \"alphabet\", alphabet);\n        defineReadOnly(this, \"base\", alphabet.length);\n        defineReadOnly(this, \"_alphabetMap\", {});\n        defineReadOnly(this, \"_leader\", alphabet.charAt(0));\n        // pre-compute lookup table\n        for (let i = 0; i < alphabet.length; i++) {\n            this._alphabetMap[alphabet.charAt(i)] = i;\n        }\n    }\n    encode(value) {\n        let source = arrayify(value);\n        if (source.length === 0) {\n            return \"\";\n        }\n        let digits = [0];\n        for (let i = 0; i < source.length; ++i) {\n            let carry = source[i];\n            for (let j = 0; j < digits.length; ++j) {\n                carry += digits[j] << 8;\n                digits[j] = carry % this.base;\n                carry = (carry / this.base) | 0;\n            }\n            while (carry > 0) {\n                digits.push(carry % this.base);\n                carry = (carry / this.base) | 0;\n            }\n        }\n        let string = \"\";\n        // deal with leading zeros\n        for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n            string += this._leader;\n        }\n        // convert digits to a string\n        for (let q = digits.length - 1; q >= 0; --q) {\n            string += this.alphabet[digits[q]];\n        }\n        return string;\n    }\n    decode(value) {\n        if (typeof (value) !== \"string\") {\n            throw new TypeError(\"Expected String\");\n        }\n        let bytes = [];\n        if (value.length === 0) {\n            return new Uint8Array(bytes);\n        }\n        bytes.push(0);\n        for (let i = 0; i < value.length; i++) {\n            let byte = this._alphabetMap[value[i]];\n            if (byte === undefined) {\n                throw new Error(\"Non-base\" + this.base + \" character\");\n            }\n            let carry = byte;\n            for (let j = 0; j < bytes.length; ++j) {\n                carry += bytes[j] * this.base;\n                bytes[j] = carry & 0xff;\n                carry >>= 8;\n            }\n            while (carry > 0) {\n                bytes.push(carry & 0xff);\n                carry >>= 8;\n            }\n        }\n        // deal with leading zeros\n        for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n            bytes.push(0);\n        }\n        return arrayify(new Uint8Array(bytes.reverse()));\n    }\n}\nconst Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nconst Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\nexport { Base32, Base58 };\n//console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))\n"]},"metadata":{},"sourceType":"module"}