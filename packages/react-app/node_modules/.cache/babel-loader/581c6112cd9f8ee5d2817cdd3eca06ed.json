{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _tweetnacl = _interopRequireDefault(require(\"tweetnacl\"));\n\nvar _tweetnaclUtil = _interopRequireDefault(require(\"tweetnacl-util\"));\n\nfunction encodeBase64Url(data) {\n  return _tweetnaclUtil.default.encodeBase64(data).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n/**\n*  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm. It also defines\n*  an interface that you can also implement yourself and use in our other modules.\n*\n*  The signing function itself takes the data as a string parameter and returls a base64Url encoded signature\n*\n*  @example\n*  const signer = NaclSigner(process.env.PRIVATE_KEY)\n*  signer(data, (err, signature) => {\n*    ...\n*  })\n*\n*  @param    {String}         base64PrivateKey    a 64 byte base64 encoded private key\n*  @return   {Function}                     a configured signer function\n*/\n\n\nfunction NaclSigner(base64PrivateKey) {\n  var privateKey = _tweetnaclUtil.default.decodeBase64(base64PrivateKey);\n\n  return /*#__PURE__*/function () {\n    var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(data) {\n      return _regenerator.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", encodeBase64Url(_tweetnacl.default.sign.detached(_tweetnaclUtil.default.decodeUTF8(data), privateKey)));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n\nmodule.exports = NaclSigner;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/did-jwt/lib/NaclSigner.js"],"names":["_interopRequireDefault","require","_regenerator","_asyncToGenerator2","_tweetnacl","_tweetnaclUtil","encodeBase64Url","data","default","encodeBase64","replace","NaclSigner","base64PrivateKey","privateKey","decodeBase64","_ref","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","sign","detached","decodeUTF8","stop","_x","apply","arguments","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,YAAY,GAAGF,sBAAsB,CAACC,OAAO,CAAC,4BAAD,CAAR,CAAzC;;AAEA,IAAIE,kBAAkB,GAAGH,sBAAsB,CAACC,OAAO,CAAC,yCAAD,CAAR,CAA/C;;AAEA,IAAIG,UAAU,GAAGJ,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAvC;;AAEA,IAAII,cAAc,GAAGL,sBAAsB,CAACC,OAAO,CAAC,gBAAD,CAAR,CAA3C;;AAEA,SAASK,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,SAAOF,cAAc,CAACG,OAAf,CAAuBC,YAAvB,CAAoCF,IAApC,EAA0CG,OAA1C,CAAkD,KAAlD,EAAyD,GAAzD,EAA8DA,OAA9D,CAAsE,KAAtE,EAA6E,GAA7E,EAAkFA,OAAlF,CAA0F,IAA1F,EAAgG,EAAhG,CAAP;AACD;AACD;;;;;;;;;;;;;;;;;AAiBA,SAASC,UAAT,CAAoBC,gBAApB,EAAsC;AACpC,MAAIC,UAAU,GAAGR,cAAc,CAACG,OAAf,CAAuBM,YAAvB,CAAoCF,gBAApC,CAAjB;;AAEA,SACE,aACA,YAAY;AACV,QAAIG,IAAI,GAAG,CAAC,GAAGZ,kBAAkB,CAACK,OAAvB,GACX,aACAN,YAAY,CAACM,OAAb,CAAqBQ,IAArB,CAA0B,SAASC,OAAT,CAAiBV,IAAjB,EAAuB;AAC/C,aAAOL,YAAY,CAACM,OAAb,CAAqBU,IAArB,CAA0B,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC3D,eAAO,CAAP,EAAU;AACR,kBAAQA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACE,IAAjC;AACE,iBAAK,CAAL;AACE,qBAAOF,QAAQ,CAACG,MAAT,CAAgB,QAAhB,EAA0BjB,eAAe,CAACF,UAAU,CAACI,OAAX,CAAmBgB,IAAnB,CAAwBC,QAAxB,CAAiCpB,cAAc,CAACG,OAAf,CAAuBkB,UAAvB,CAAkCnB,IAAlC,CAAjC,EAA0EM,UAA1E,CAAD,CAAzC,CAAP;;AAEF,iBAAK,CAAL;AACA,iBAAK,KAAL;AACE,qBAAOO,QAAQ,CAACO,IAAT,EAAP;AANJ;AAQD;AACF,OAXM,EAWJV,OAXI,EAWK,IAXL,CAAP;AAYD,KAbD,CAFW,CAAX;;AAiBA,WAAO,UAAUW,EAAV,EAAc;AACnB,aAAOb,IAAI,CAACc,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAP;AACD,KAFD;AAGD,GArBD,EAFF;AAyBD;;AAEDC,MAAM,CAACC,OAAP,GAAiBrB,UAAjB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _tweetnacl = _interopRequireDefault(require(\"tweetnacl\"));\n\nvar _tweetnaclUtil = _interopRequireDefault(require(\"tweetnacl-util\"));\n\nfunction encodeBase64Url(data) {\n  return _tweetnaclUtil.default.encodeBase64(data).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n/**\n*  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm. It also defines\n*  an interface that you can also implement yourself and use in our other modules.\n*\n*  The signing function itself takes the data as a string parameter and returls a base64Url encoded signature\n*\n*  @example\n*  const signer = NaclSigner(process.env.PRIVATE_KEY)\n*  signer(data, (err, signature) => {\n*    ...\n*  })\n*\n*  @param    {String}         base64PrivateKey    a 64 byte base64 encoded private key\n*  @return   {Function}                     a configured signer function\n*/\n\n\nfunction NaclSigner(base64PrivateKey) {\n  var privateKey = _tweetnaclUtil.default.decodeBase64(base64PrivateKey);\n\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(data) {\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", encodeBase64Url(_tweetnacl.default.sign.detached(_tweetnaclUtil.default.decodeUTF8(data), privateKey)));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\n\nmodule.exports = NaclSigner;"]},"metadata":{},"sourceType":"script"}