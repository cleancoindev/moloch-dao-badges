{"ast":null,"code":"\"use strict\";\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n  static getApiKey(apiKey) {\n    if (apiKey != null) {\n      logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n    }\n\n    return null;\n  }\n\n  static getUrl(network, apiKey) {\n    let host = null;\n\n    switch (network.name) {\n      case \"homestead\":\n        host = \"https://cloudflare-eth.com/\";\n        break;\n\n      default:\n        logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n    }\n\n    return host;\n  }\n\n}","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js"],"names":["UrlJsonRpcProvider","Logger","version","logger","CloudflareProvider","getApiKey","apiKey","throwArgumentError","getUrl","network","host","name","arguments"],"mappings":"AAAA;;AACA,SAASA,kBAAT,QAAmC,yBAAnC;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AACA,OAAO,MAAME,kBAAN,SAAiCJ,kBAAjC,CAAoD;AACvD,SAAOK,SAAP,CAAiBC,MAAjB,EAAyB;AACrB,QAAIA,MAAM,IAAI,IAAd,EAAoB;AAChBH,MAAAA,MAAM,CAACI,kBAAP,CAA0B,qCAA1B,EAAiE,QAAjE,EAA2ED,MAA3E;AACH;;AACD,WAAO,IAAP;AACH;;AACD,SAAOE,MAAP,CAAcC,OAAd,EAAuBH,MAAvB,EAA+B;AAC3B,QAAII,IAAI,GAAG,IAAX;;AACA,YAAQD,OAAO,CAACE,IAAhB;AACI,WAAK,WAAL;AACID,QAAAA,IAAI,GAAG,6BAAP;AACA;;AACJ;AACIP,QAAAA,MAAM,CAACI,kBAAP,CAA0B,qBAA1B,EAAiD,SAAjD,EAA4DK,SAAS,CAAC,CAAD,CAArE;AALR;;AAOA,WAAOF,IAAP;AACH;;AAjBsD","sourcesContent":["\"use strict\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return host;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}