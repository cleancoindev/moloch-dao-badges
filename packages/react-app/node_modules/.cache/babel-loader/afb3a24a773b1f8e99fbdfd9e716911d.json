{"ast":null,"code":"'use strict';\n\nconst utils = require('interface-datastore').utils;\n\nconst map = utils.map;\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n */\n\nclass KeyTransformDatastore {\n  constructor(child, transform) {\n    this.child = child;\n    this.transform = transform;\n  }\n\n  open() {\n    return this.child.open();\n  }\n\n  put(key, val) {\n    return this.child.put(this.transform.convert(key), val);\n  }\n\n  get(key) {\n    return this.child.get(this.transform.convert(key));\n  }\n\n  has(key) {\n    return this.child.has(this.transform.convert(key));\n  }\n\n  delete(key) {\n    return this.child.delete(this.transform.convert(key));\n  }\n\n  batch() {\n    const b = this.child.batch();\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value);\n      },\n      delete: key => {\n        b.delete(this.transform.convert(key));\n      },\n      commit: () => {\n        return b.commit();\n      }\n    };\n  }\n\n  query(q) {\n    return map(this.child.query(q), e => {\n      e.key = this.transform.invert(e.key);\n      return e;\n    });\n  }\n\n  close() {\n    return this.child.close();\n  }\n\n}\n\nmodule.exports = KeyTransformDatastore;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/datastore-core/src/keytransform.js"],"names":["utils","require","map","KeyTransformDatastore","constructor","child","transform","open","put","key","val","convert","get","has","delete","batch","b","value","commit","query","q","e","invert","close","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,qBAAD,CAAP,CAA+BD,KAA7C;;AACA,MAAME,GAAG,GAAGF,KAAK,CAACE,GAAlB;AAEA;;;;;;AAKA,MAAMC,qBAAN,CAA4B;AAC1BC,EAAAA,WAAW,CAAEC,KAAF,EAASC,SAAT,EAAoB;AAC7B,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACD;;AAEDC,EAAAA,IAAI,GAAI;AACN,WAAO,KAAKF,KAAL,CAAWE,IAAX,EAAP;AACD;;AAEDC,EAAAA,GAAG,CAAEC,GAAF,EAAOC,GAAP,EAAY;AACb,WAAO,KAAKL,KAAL,CAAWG,GAAX,CAAe,KAAKF,SAAL,CAAeK,OAAf,CAAuBF,GAAvB,CAAf,EAA4CC,GAA5C,CAAP;AACD;;AAEDE,EAAAA,GAAG,CAAEH,GAAF,EAAO;AACR,WAAO,KAAKJ,KAAL,CAAWO,GAAX,CAAe,KAAKN,SAAL,CAAeK,OAAf,CAAuBF,GAAvB,CAAf,CAAP;AACD;;AAEDI,EAAAA,GAAG,CAAEJ,GAAF,EAAO;AACR,WAAO,KAAKJ,KAAL,CAAWQ,GAAX,CAAe,KAAKP,SAAL,CAAeK,OAAf,CAAuBF,GAAvB,CAAf,CAAP;AACD;;AAEDK,EAAAA,MAAM,CAAEL,GAAF,EAAO;AACX,WAAO,KAAKJ,KAAL,CAAWS,MAAX,CAAkB,KAAKR,SAAL,CAAeK,OAAf,CAAuBF,GAAvB,CAAlB,CAAP;AACD;;AAEDM,EAAAA,KAAK,GAAI;AACP,UAAMC,CAAC,GAAG,KAAKX,KAAL,CAAWU,KAAX,EAAV;AACA,WAAO;AACLP,MAAAA,GAAG,EAAE,CAACC,GAAD,EAAMQ,KAAN,KAAgB;AACnBD,QAAAA,CAAC,CAACR,GAAF,CAAM,KAAKF,SAAL,CAAeK,OAAf,CAAuBF,GAAvB,CAAN,EAAmCQ,KAAnC;AACD,OAHI;AAILH,MAAAA,MAAM,EAAGL,GAAD,IAAS;AACfO,QAAAA,CAAC,CAACF,MAAF,CAAS,KAAKR,SAAL,CAAeK,OAAf,CAAuBF,GAAvB,CAAT;AACD,OANI;AAOLS,MAAAA,MAAM,EAAE,MAAM;AACZ,eAAOF,CAAC,CAACE,MAAF,EAAP;AACD;AATI,KAAP;AAWD;;AAEDC,EAAAA,KAAK,CAAEC,CAAF,EAAK;AACR,WAAOlB,GAAG,CAAC,KAAKG,KAAL,CAAWc,KAAX,CAAiBC,CAAjB,CAAD,EAAsBC,CAAC,IAAI;AACnCA,MAAAA,CAAC,CAACZ,GAAF,GAAQ,KAAKH,SAAL,CAAegB,MAAf,CAAsBD,CAAC,CAACZ,GAAxB,CAAR;AACA,aAAOY,CAAP;AACD,KAHS,CAAV;AAID;;AAEDE,EAAAA,KAAK,GAAI;AACP,WAAO,KAAKlB,KAAL,CAAWkB,KAAX,EAAP;AACD;;AAlDyB;;AAqD5BC,MAAM,CAACC,OAAP,GAAiBtB,qBAAjB","sourcesContent":["'use strict'\n\nconst utils = require('interface-datastore').utils\nconst map = utils.map\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n */\nclass KeyTransformDatastore {\n  constructor (child, transform) {\n    this.child = child\n    this.transform = transform\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  put (key, val) {\n    return this.child.put(this.transform.convert(key), val)\n  }\n\n  get (key) {\n    return this.child.get(this.transform.convert(key))\n  }\n\n  has (key) {\n    return this.child.has(this.transform.convert(key))\n  }\n\n  delete (key) {\n    return this.child.delete(this.transform.convert(key))\n  }\n\n  batch () {\n    const b = this.child.batch()\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value)\n      },\n      delete: (key) => {\n        b.delete(this.transform.convert(key))\n      },\n      commit: () => {\n        return b.commit()\n      }\n    }\n  }\n\n  query (q) {\n    return map(this.child.query(q), e => {\n      e.key = this.transform.invert(e.key)\n      return e\n    })\n  }\n\n  close () {\n    return this.child.close()\n  }\n}\n\nmodule.exports = KeyTransformDatastore\n"]},"metadata":{},"sourceType":"script"}