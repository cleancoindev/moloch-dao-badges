{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:websocket-star:multi');\n\nconst once = require('once');\n\nconst EE = require('events').EventEmitter;\n\nconst map = require('async/map');\n\nconst parallel = require('async/parallel');\n\nconst multiaddr = require('multiaddr');\n\nconst mafmt = require('mafmt');\n\nconst WSStar = require('libp2p-websocket-star');\n\nclass WebsocketStarMulti {\n  // listen on multiple websocket star servers without having to worry about one being down.\n  // NOTE: if no servers are reachable or provided an error is thrown\n  constructor(opt) {\n    this.opt = opt || {};\n    this.servers = opt.servers || [];\n    this.ws = new WSStar(this.opt);\n    this.discovery = this.ws.discovery;\n  }\n\n  dial(ma, opt, cb) {\n    log('dial', ma);\n    return this.ws.dial(ma, opt, cb);\n  }\n\n  createListener(options, handler) {\n    if (typeof options === 'function') {\n      handler = options;\n      options = {};\n    }\n\n    const listener = new EE();\n    listener.servers = {};\n    listener.online = [];\n    this.servers.forEach(ser => {\n      const s = this.ws.createListener(options, handler);\n      s.once('error', () => {});\n      s.url = ser;\n      listener.servers[ser] = s;\n    });\n\n    listener.listen = (ma, cb) => {\n      const id = ma.toString().split('ipfs/').pop();\n      log('listen on %s server(s) with id %s', this.servers.length, id);\n      parallel(this.servers.map(url => listener.servers[url]).map(server => cb => {\n        log('listen %s', server.url);\n        const next = once(err => {\n          log('listen %s ok %s', server.url, !err);\n          if (err) return cb(log(err));\n          listener.online.push(server);\n          return cb();\n        });\n        setTimeout(next, this.opt.timeout || 5000, new Error('Timeout'));\n        server.listen(multiaddr(server.url).encapsulate('/ipfs/' + id), next);\n      }), () => {\n        if (!listener.online.length && !this.opt.ignore_no_online) {\n          const e = new Error(\"Couldn't listen on any of the servers\");\n          listener.emit('error', e);\n          cb(e);\n        } else {\n          listener.emit('listening');\n          cb();\n        }\n      });\n    };\n\n    listener.close = cb => parallel(listener.online.map(s => cb => s.close(cb)), err => cb(err, listener.online = []));\n\n    listener.getAddrs = cb => map(listener.online, (s, n) => s.getAddrs(n), (err, res) => {\n      if (err) return cb(err);\n      return cb(null, res.reduce((a, b) => a.concat(b), []));\n    });\n\n    return listener;\n  }\n\n  filter(ma) {\n    if (!Array.isArray(ma)) ma = [ma];\n    return ma.filter(ma => ma.toString().startsWith('/p2p-websocket-star') || mafmt.WebSocketStar.matches(ma));\n  }\n\n}\n\nmodule.exports = WebsocketStarMulti;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/libp2p-websocket-star-multi/src/index.js"],"names":["debug","require","log","once","EE","EventEmitter","map","parallel","multiaddr","mafmt","WSStar","WebsocketStarMulti","constructor","opt","servers","ws","discovery","dial","ma","cb","createListener","options","handler","listener","online","forEach","ser","s","url","listen","id","toString","split","pop","length","server","next","err","push","setTimeout","timeout","Error","encapsulate","ignore_no_online","e","emit","close","getAddrs","n","res","reduce","a","b","concat","filter","Array","isArray","startsWith","WebSocketStar","matches","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = debug('libp2p:websocket-star:multi')\nconst once = require('once')\n\nconst EE = require('events').EventEmitter\nconst map = require('async/map')\nconst parallel = require('async/parallel')\nconst multiaddr = require('multiaddr')\nconst mafmt = require('mafmt')\n\nconst WSStar = require('libp2p-websocket-star')\nclass WebsocketStarMulti { // listen on multiple websocket star servers without having to worry about one being down.\n  // NOTE: if no servers are reachable or provided an error is thrown\n  constructor (opt) {\n    this.opt = opt || {}\n    this.servers = opt.servers || []\n    this.ws = new WSStar(this.opt)\n    this.discovery = this.ws.discovery\n  }\n  dial (ma, opt, cb) {\n    log('dial', ma)\n    return this.ws.dial(ma, opt, cb)\n  }\n  createListener (options, handler) {\n    if (typeof options === 'function') {\n      handler = options\n      options = {}\n    }\n\n    const listener = new EE()\n    listener.servers = {}\n    listener.online = []\n    this.servers.forEach(ser => {\n      const s = this.ws.createListener(options, handler)\n      s.once('error', () => {})\n      s.url = ser\n      listener.servers[ser] = s\n    })\n\n    listener.listen = (ma, cb) => {\n      const id = ma.toString().split('ipfs/').pop()\n      log('listen on %s server(s) with id %s', this.servers.length, id)\n      parallel(this.servers.map(url => listener.servers[url]).map(server =>\n        cb => {\n          log('listen %s', server.url)\n          const next = once(err => {\n            log('listen %s ok %s', server.url, !err)\n            if (err) return cb(log(err))\n            listener.online.push(server)\n            return cb()\n          })\n          setTimeout(next, this.opt.timeout || 5000, new Error('Timeout'))\n          server.listen(multiaddr(server.url).encapsulate('/ipfs/' + id), next)\n        }), () => {\n        if (!listener.online.length && !this.opt.ignore_no_online) {\n          const e = new Error(\"Couldn't listen on any of the servers\")\n          listener.emit('error', e)\n          cb(e)\n        } else {\n          listener.emit('listening')\n          cb()\n        }\n      })\n    }\n\n    listener.close = cb =>\n      parallel(listener.online.map(s => cb => s.close(cb)), err => cb(err, (listener.online = [])))\n\n    listener.getAddrs = cb => map(listener.online, (s, n) => s.getAddrs(n), (err, res) => {\n      if (err) return cb(err)\n      return cb(null, res.reduce((a, b) => a.concat(b), []))\n    })\n\n    return listener\n  }\n\n  filter (ma) {\n    if (!Array.isArray(ma)) ma = [ma]\n    return ma.filter(ma => ma.toString().startsWith('/p2p-websocket-star') || mafmt.WebSocketStar.matches(ma))\n  }\n}\n\nmodule.exports = WebsocketStarMulti\n"]},"metadata":{},"sourceType":"script"}