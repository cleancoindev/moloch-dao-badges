{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // This gets overridden by rollup\n\nvar exportWordlist = false;\n\nvar hash_1 = require(\"@ethersproject/hash\");\n\nvar properties_1 = require(\"@ethersproject/properties\");\n\nvar logger_1 = require(\"@ethersproject/logger\");\n\nvar _version_1 = require(\"./_version\");\n\nexports.logger = new logger_1.Logger(_version_1.version);\n\nvar Wordlist =\n/** @class */\nfunction () {\n  function Wordlist(locale) {\n    var _newTarget = this.constructor;\n    exports.logger.checkAbstract(_newTarget, Wordlist);\n    properties_1.defineReadOnly(this, \"locale\", locale);\n  } // Subclasses may override this\n\n\n  Wordlist.prototype.split = function (mnemonic) {\n    return mnemonic.toLowerCase().split(/ +/g);\n  }; // Subclasses may override this\n\n\n  Wordlist.prototype.join = function (words) {\n    return words.join(\" \");\n  };\n\n  Wordlist.check = function (wordlist) {\n    var words = [];\n\n    for (var i = 0; i < 2048; i++) {\n      var word = wordlist.getWord(i);\n\n      if (i !== wordlist.getWordIndex(word)) {\n        return \"0x\";\n      }\n\n      words.push(word);\n    }\n\n    return hash_1.id(words.join(\"\\n\") + \"\\n\");\n  };\n\n  Wordlist.register = function (lang, name) {\n    if (!name) {\n      name = lang.locale;\n    }\n\n    if (exportWordlist) {\n      try {\n        var anyGlobal = window;\n\n        if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n          if (!anyGlobal._ethers.wordlists[name]) {\n            properties_1.defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n          }\n        }\n      } catch (error) {}\n    }\n  };\n\n  return Wordlist;\n}();\n\nexports.Wordlist = Wordlist;","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/@ethersproject/wordlists/lib/wordlist.js"],"names":["Object","defineProperty","exports","value","exportWordlist","hash_1","require","properties_1","logger_1","_version_1","logger","Logger","version","Wordlist","locale","_newTarget","constructor","checkAbstract","defineReadOnly","prototype","split","mnemonic","toLowerCase","join","words","check","wordlist","i","word","getWord","getWordIndex","push","id","register","lang","name","anyGlobal","window","_ethers","wordlists","error"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CACA;;AACA,IAAIC,cAAc,GAAG,KAArB;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,2BAAD,CAA1B;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,uBAAD,CAAtB;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,YAAD,CAAxB;;AACAJ,OAAO,CAACQ,MAAR,GAAiB,IAAIF,QAAQ,CAACG,MAAb,CAAoBF,UAAU,CAACG,OAA/B,CAAjB;;AACA,IAAIC,QAAQ;AAAG;AAAe,YAAY;AACtC,WAASA,QAAT,CAAkBC,MAAlB,EAA0B;AACtB,QAAIC,UAAU,GAAG,KAAKC,WAAtB;AACAd,IAAAA,OAAO,CAACQ,MAAR,CAAeO,aAAf,CAA6BF,UAA7B,EAAyCF,QAAzC;AACAN,IAAAA,YAAY,CAACW,cAAb,CAA4B,IAA5B,EAAkC,QAAlC,EAA4CJ,MAA5C;AACH,GALqC,CAMtC;;;AACAD,EAAAA,QAAQ,CAACM,SAAT,CAAmBC,KAAnB,GAA2B,UAAUC,QAAV,EAAoB;AAC3C,WAAOA,QAAQ,CAACC,WAAT,GAAuBF,KAAvB,CAA6B,KAA7B,CAAP;AACH,GAFD,CAPsC,CAUtC;;;AACAP,EAAAA,QAAQ,CAACM,SAAT,CAAmBI,IAAnB,GAA0B,UAAUC,KAAV,EAAiB;AACvC,WAAOA,KAAK,CAACD,IAAN,CAAW,GAAX,CAAP;AACH,GAFD;;AAGAV,EAAAA,QAAQ,CAACY,KAAT,GAAiB,UAAUC,QAAV,EAAoB;AACjC,QAAIF,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAApB,EAA0BA,CAAC,EAA3B,EAA+B;AAC3B,UAAIC,IAAI,GAAGF,QAAQ,CAACG,OAAT,CAAiBF,CAAjB,CAAX;;AACA,UAAIA,CAAC,KAAKD,QAAQ,CAACI,YAAT,CAAsBF,IAAtB,CAAV,EAAuC;AACnC,eAAO,IAAP;AACH;;AACDJ,MAAAA,KAAK,CAACO,IAAN,CAAWH,IAAX;AACH;;AACD,WAAOvB,MAAM,CAAC2B,EAAP,CAAUR,KAAK,CAACD,IAAN,CAAW,IAAX,IAAmB,IAA7B,CAAP;AACH,GAVD;;AAWAV,EAAAA,QAAQ,CAACoB,QAAT,GAAoB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AACtC,QAAI,CAACA,IAAL,EAAW;AACPA,MAAAA,IAAI,GAAGD,IAAI,CAACpB,MAAZ;AACH;;AACD,QAAIV,cAAJ,EAAoB;AAChB,UAAI;AACA,YAAIgC,SAAS,GAAGC,MAAhB;;AACA,YAAID,SAAS,CAACE,OAAV,IAAqBF,SAAS,CAACE,OAAV,CAAkBC,SAA3C,EAAsD;AAClD,cAAI,CAACH,SAAS,CAACE,OAAV,CAAkBC,SAAlB,CAA4BJ,IAA5B,CAAL,EAAwC;AACpC5B,YAAAA,YAAY,CAACW,cAAb,CAA4BkB,SAAS,CAACE,OAAV,CAAkBC,SAA9C,EAAyDJ,IAAzD,EAA+DD,IAA/D;AACH;AACJ;AACJ,OAPD,CAQA,OAAOM,KAAP,EAAc,CAAG;AACpB;AACJ,GAfD;;AAgBA,SAAO3B,QAAP;AACH,CA1C6B,EAA9B;;AA2CAX,OAAO,CAACW,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// This gets overridden by rollup\nvar exportWordlist = false;\nvar hash_1 = require(\"@ethersproject/hash\");\nvar properties_1 = require(\"@ethersproject/properties\");\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nexports.logger = new logger_1.Logger(_version_1.version);\nvar Wordlist = /** @class */ (function () {\n    function Wordlist(locale) {\n        var _newTarget = this.constructor;\n        exports.logger.checkAbstract(_newTarget, Wordlist);\n        properties_1.defineReadOnly(this, \"locale\", locale);\n    }\n    // Subclasses may override this\n    Wordlist.prototype.split = function (mnemonic) {\n        return mnemonic.toLowerCase().split(/ +/g);\n    };\n    // Subclasses may override this\n    Wordlist.prototype.join = function (words) {\n        return words.join(\" \");\n    };\n    Wordlist.check = function (wordlist) {\n        var words = [];\n        for (var i = 0; i < 2048; i++) {\n            var word = wordlist.getWord(i);\n            if (i !== wordlist.getWordIndex(word)) {\n                return \"0x\";\n            }\n            words.push(word);\n        }\n        return hash_1.id(words.join(\"\\n\") + \"\\n\");\n    };\n    Wordlist.register = function (lang, name) {\n        if (!name) {\n            name = lang.locale;\n        }\n        if (exportWordlist) {\n            try {\n                var anyGlobal = window;\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                        properties_1.defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            }\n            catch (error) { }\n        }\n    };\n    return Wordlist;\n}());\nexports.Wordlist = Wordlist;\n"]},"metadata":{},"sourceType":"script"}