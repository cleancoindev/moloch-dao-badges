{"ast":null,"code":"module.exports = pullPushable;\n\nfunction pullPushable(separated, onClose) {\n  if (typeof separated === 'function') {\n    onClose = separated;\n    separated = false;\n  } // create a buffer for data\n  // that have been pushed\n  // but not yet pulled.\n\n\n  var buffer = []; // a pushable is a source stream\n  // (abort, cb) => cb(end, data)\n  //\n  // when pushable is pulled,\n  // keep references to abort and cb\n  // so we can call back after\n  // .end(end) or .push(data)\n\n  var abort, cb;\n\n  function read(_abort, _cb) {\n    if (_abort) {\n      abort = _abort; // if there is already a cb waiting, abort it.\n\n      if (cb) callback(abort);\n    }\n\n    cb = _cb;\n    drain();\n  }\n\n  var ended;\n\n  function end(end) {\n    ended = ended || end || true; // attempt to drain\n\n    drain();\n  }\n\n  function push(data) {\n    if (ended) return; // if sink already waiting,\n    // we can call back directly.\n\n    if (cb) {\n      callback(abort, data);\n      return;\n    } // otherwise buffer data\n\n\n    buffer.push(data);\n  } // Return functions separated from source { push, end, source }\n\n\n  if (separated) {\n    return {\n      push: push,\n      end: end,\n      source: read,\n      buffer: buffer\n    };\n  } // Return normal\n\n\n  read.push = push;\n  read.end = end;\n  read.buffer = buffer;\n  return read; // `drain` calls back to (if any) waiting\n  // sink with abort, end, or next data.\n\n  function drain() {\n    if (!cb) return;\n    if (abort) callback(abort);else if (!buffer.length && ended) callback(ended);else if (buffer.length) callback(null, buffer.shift());\n  } // `callback` calls back to waiting sink,\n  // and removes references to sink cb.\n\n\n  function callback(err, val) {\n    var _cb = cb; // if error and pushable passed onClose, call it\n    // the first time this stream ends or errors.\n\n    if (err && onClose) {\n      var c = onClose;\n      onClose = null;\n      c(err === true ? null : err);\n    }\n\n    cb = null;\n\n    _cb(err, val);\n  }\n}","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/pull-pushable/index.js"],"names":["module","exports","pullPushable","separated","onClose","buffer","abort","cb","read","_abort","_cb","callback","drain","ended","end","push","data","source","length","shift","err","val","c"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AAEA,SAASA,YAAT,CAAuBC,SAAvB,EAAkCC,OAAlC,EAA2C;AACzC,MAAI,OAAOD,SAAP,KAAqB,UAAzB,EAAqC;AACnCC,IAAAA,OAAO,GAAGD,SAAV;AACAA,IAAAA,SAAS,GAAG,KAAZ;AACD,GAJwC,CAMzC;AACA;AACA;;;AACA,MAAIE,MAAM,GAAG,EAAb,CATyC,CAWzC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIC,KAAJ,EAAWC,EAAX;;AACA,WAASC,IAAT,CAAeC,MAAf,EAAuBC,GAAvB,EAA4B;AAC1B,QAAID,MAAJ,EAAY;AACVH,MAAAA,KAAK,GAAGG,MAAR,CADU,CAEV;;AACA,UAAIF,EAAJ,EAAQI,QAAQ,CAACL,KAAD,CAAR;AACT;;AACDC,IAAAA,EAAE,GAAGG,GAAL;AACAE,IAAAA,KAAK;AACN;;AAED,MAAIC,KAAJ;;AACA,WAASC,GAAT,CAAcA,GAAd,EAAmB;AACjBD,IAAAA,KAAK,GAAGA,KAAK,IAAIC,GAAT,IAAgB,IAAxB,CADiB,CAEjB;;AACAF,IAAAA,KAAK;AACN;;AAED,WAASG,IAAT,CAAeC,IAAf,EAAqB;AACnB,QAAIH,KAAJ,EAAW,OADQ,CAEnB;AACA;;AACA,QAAIN,EAAJ,EAAQ;AACNI,MAAAA,QAAQ,CAACL,KAAD,EAAQU,IAAR,CAAR;AACA;AACD,KAPkB,CAQnB;;;AACAX,IAAAA,MAAM,CAACU,IAAP,CAAYC,IAAZ;AACD,GA9CwC,CAgDzC;;;AACA,MAAIb,SAAJ,EAAe;AACb,WAAO;AAAEY,MAAAA,IAAI,EAAEA,IAAR;AAAcD,MAAAA,GAAG,EAAEA,GAAnB;AAAwBG,MAAAA,MAAM,EAAET,IAAhC;AAAsCH,MAAAA,MAAM,EAAEA;AAA9C,KAAP;AACD,GAnDwC,CAqDzC;;;AACAG,EAAAA,IAAI,CAACO,IAAL,GAAYA,IAAZ;AACAP,EAAAA,IAAI,CAACM,GAAL,GAAWA,GAAX;AACAN,EAAAA,IAAI,CAACH,MAAL,GAAcA,MAAd;AACA,SAAOG,IAAP,CAzDyC,CA2DzC;AACA;;AACA,WAASI,KAAT,GAAkB;AAChB,QAAI,CAACL,EAAL,EAAS;AAET,QAAID,KAAJ,EAAWK,QAAQ,CAACL,KAAD,CAAR,CAAX,KACK,IAAI,CAACD,MAAM,CAACa,MAAR,IAAkBL,KAAtB,EAA6BF,QAAQ,CAACE,KAAD,CAAR,CAA7B,KACA,IAAIR,MAAM,CAACa,MAAX,EAAmBP,QAAQ,CAAC,IAAD,EAAON,MAAM,CAACc,KAAP,EAAP,CAAR;AACzB,GAnEwC,CAqEzC;AACA;;;AACA,WAASR,QAAT,CAAmBS,GAAnB,EAAwBC,GAAxB,EAA6B;AAC3B,QAAIX,GAAG,GAAGH,EAAV,CAD2B,CAE3B;AACA;;AACA,QAAIa,GAAG,IAAIhB,OAAX,EAAoB;AAClB,UAAIkB,CAAC,GAAGlB,OAAR;AACAA,MAAAA,OAAO,GAAG,IAAV;AACAkB,MAAAA,CAAC,CAACF,GAAG,KAAK,IAAR,GAAe,IAAf,GAAsBA,GAAvB,CAAD;AACD;;AACDb,IAAAA,EAAE,GAAG,IAAL;;AACAG,IAAAA,GAAG,CAACU,GAAD,EAAMC,GAAN,CAAH;AACD;AACF","sourcesContent":["module.exports = pullPushable\n\nfunction pullPushable (separated, onClose) {\n  if (typeof separated === 'function') {\n    onClose = separated\n    separated = false\n  }\n\n  // create a buffer for data\n  // that have been pushed\n  // but not yet pulled.\n  var buffer = []\n\n  // a pushable is a source stream\n  // (abort, cb) => cb(end, data)\n  //\n  // when pushable is pulled,\n  // keep references to abort and cb\n  // so we can call back after\n  // .end(end) or .push(data)\n  var abort, cb\n  function read (_abort, _cb) {\n    if (_abort) {\n      abort = _abort\n      // if there is already a cb waiting, abort it.\n      if (cb) callback(abort)\n    }\n    cb = _cb\n    drain()\n  }\n\n  var ended\n  function end (end) {\n    ended = ended || end || true\n    // attempt to drain\n    drain()\n  }\n\n  function push (data) {\n    if (ended) return\n    // if sink already waiting,\n    // we can call back directly.\n    if (cb) {\n      callback(abort, data)\n      return\n    }\n    // otherwise buffer data\n    buffer.push(data)\n  }\n\n  // Return functions separated from source { push, end, source }\n  if (separated) {\n    return { push: push, end: end, source: read, buffer: buffer }\n  }\n\n  // Return normal\n  read.push = push\n  read.end = end\n  read.buffer = buffer\n  return read\n\n  // `drain` calls back to (if any) waiting\n  // sink with abort, end, or next data.\n  function drain () {\n    if (!cb) return\n\n    if (abort) callback(abort)\n    else if (!buffer.length && ended) callback(ended)\n    else if (buffer.length) callback(null, buffer.shift())\n  }\n\n  // `callback` calls back to waiting sink,\n  // and removes references to sink cb.\n  function callback (err, val) {\n    var _cb = cb\n    // if error and pushable passed onClose, call it\n    // the first time this stream ends or errors.\n    if (err && onClose) {\n      var c = onClose\n      onClose = null\n      c(err === true ? null : err)\n    }\n    cb = null\n    _cb(err, val)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}