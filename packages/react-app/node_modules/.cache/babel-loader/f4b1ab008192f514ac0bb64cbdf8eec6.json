{"ast":null,"code":"'use strict';\n\nconst exporter = require('ipfs-unixfs-exporter');\n\nconst applyDefaultOptions = require('./utils/apply-default-options');\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst errCode = require('err-code');\n\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n};\n\nmodule.exports = context => {\n  return function mfsRead(path, options = {}) {\n    options = applyDefaultOptions(options, defaultOptions);\n    return {\n      [Symbol.asyncIterator]: async function* read() {\n        const mfsPath = await toMfsPath(context, path);\n        const result = await exporter(mfsPath.mfsPath, context.ipld);\n\n        if (result.unixfs.type !== 'file') {\n          throw errCode(new Error(`${path} was not a file`), 'ERR_NOT_FILE');\n        }\n\n        if (!result.content) {\n          throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT');\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf;\n        }\n      }\n    };\n  };\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipfs-mfs/src/core/read.js"],"names":["exporter","require","applyDefaultOptions","toMfsPath","errCode","defaultOptions","offset","length","Infinity","module","exports","context","mfsRead","path","options","Symbol","asyncIterator","read","mfsPath","result","ipld","unixfs","type","Error","content","buf"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,+BAAD,CAAnC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAzB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAMI,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,CADa;AAErBC,EAAAA,MAAM,EAAEC;AAFa,CAAvB;;AAKAC,MAAM,CAACC,OAAP,GAAkBC,OAAD,IAAa;AAC5B,SAAO,SAASC,OAAT,CAAkBC,IAAlB,EAAwBC,OAAO,GAAG,EAAlC,EAAsC;AAC3CA,IAAAA,OAAO,GAAGZ,mBAAmB,CAACY,OAAD,EAAUT,cAAV,CAA7B;AAEA,WAAO;AACL,OAACU,MAAM,CAACC,aAAR,GAAwB,gBAAiBC,IAAjB,GAAyB;AAC/C,cAAMC,OAAO,GAAG,MAAMf,SAAS,CAACQ,OAAD,EAAUE,IAAV,CAA/B;AACA,cAAMM,MAAM,GAAG,MAAMnB,QAAQ,CAACkB,OAAO,CAACA,OAAT,EAAkBP,OAAO,CAACS,IAA1B,CAA7B;;AAEA,YAAID,MAAM,CAACE,MAAP,CAAcC,IAAd,KAAuB,MAA3B,EAAmC;AACjC,gBAAMlB,OAAO,CAAC,IAAImB,KAAJ,CAAW,GAAEV,IAAK,iBAAlB,CAAD,EAAsC,cAAtC,CAAb;AACD;;AAED,YAAI,CAACM,MAAM,CAACK,OAAZ,EAAqB;AACnB,gBAAMpB,OAAO,CAAC,IAAImB,KAAJ,CAAW,sCAAqCV,IAAK,EAArD,CAAD,EAA0D,gBAA1D,CAAb;AACD;;AAED,mBAAW,MAAMY,GAAjB,IAAwBN,MAAM,CAACK,OAAP,CAAe;AACrClB,UAAAA,MAAM,EAAEQ,OAAO,CAACR,MADqB;AAErCC,UAAAA,MAAM,EAAEO,OAAO,CAACP;AAFqB,SAAf,CAAxB,EAGI;AACF,gBAAMkB,GAAN;AACD;AACF;AAnBI,KAAP;AAqBD,GAxBD;AAyBD,CA1BD","sourcesContent":["'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst applyDefaultOptions = require('./utils/apply-default-options')\nconst toMfsPath = require('./utils/to-mfs-path')\nconst errCode = require('err-code')\n\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n}\n\nmodule.exports = (context) => {\n  return function mfsRead (path, options = {}) {\n    options = applyDefaultOptions(options, defaultOptions)\n\n    return {\n      [Symbol.asyncIterator]: async function * read () {\n        const mfsPath = await toMfsPath(context, path)\n        const result = await exporter(mfsPath.mfsPath, context.ipld)\n\n        if (result.unixfs.type !== 'file') {\n          throw errCode(new Error(`${path} was not a file`), 'ERR_NOT_FILE')\n        }\n\n        if (!result.content) {\n          throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT')\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}