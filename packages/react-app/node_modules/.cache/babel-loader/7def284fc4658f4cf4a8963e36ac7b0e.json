{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst errcode = require('err-code');\n\nconst callbackify = require('callbackify');\n\nconst IpnsPubsubDatastore = require('../ipns/routing/pubsub-datastore');\n\nconst log = debug('ipfs:name-pubsub');\nlog.error = debug('ipfs:name-pubsub:error'); // Is pubsub enabled\n\nconst isNamePubsubEnabled = node => {\n  try {\n    return Boolean(getPubsubRouting(node));\n  } catch (err) {\n    return false;\n  }\n}; // Get pubsub from IPNS routing\n\n\nconst getPubsubRouting = node => {\n  if (!node._ipns || !node._options.EXPERIMENTAL.ipnsPubsub) {\n    throw errcode(new Error('IPNS pubsub subsystem is not enabled'), 'ERR_IPNS_PUBSUB_NOT_ENABLED');\n  } // Only one store and it is pubsub\n\n\n  if (IpnsPubsubDatastore.isIpnsPubsubDatastore(node._ipns.routing)) {\n    return node._ipns.routing;\n  } // Find in tiered\n\n\n  const pubsub = (node._ipns.routing.stores || []).find(s => IpnsPubsubDatastore.isIpnsPubsubDatastore(s));\n\n  if (!pubsub) {\n    throw errcode(new Error('IPNS pubsub datastore not found'), 'ERR_PUBSUB_DATASTORE_NOT_FOUND');\n  }\n\n  return pubsub;\n};\n\nmodule.exports = function namePubsub(self) {\n  return {\n    /**\n     * Query the state of IPNS pubsub.\n     *\n     * @returns {Promise|void}\n     */\n    state: callbackify(async () => {\n      // eslint-disable-line require-await\n      return {\n        enabled: isNamePubsubEnabled(self)\n      };\n    }),\n\n    /**\n     * Cancel a name subscription.\n     *\n     * @param {String} name subscription name.\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    cancel: callbackify(async name => {\n      // eslint-disable-line require-await\n      const pubsub = getPubsubRouting(self);\n      return pubsub.cancel(name);\n    }),\n\n    /**\n     * Show current name subscriptions.\n     *\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    subs: callbackify(async () => {\n      // eslint-disable-line require-await\n      const pubsub = getPubsubRouting(self);\n      return pubsub.getSubscriptions();\n    })\n  };\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs/src/core/components/name-pubsub.js"],"names":["debug","require","errcode","callbackify","IpnsPubsubDatastore","log","error","isNamePubsubEnabled","node","Boolean","getPubsubRouting","err","_ipns","_options","EXPERIMENTAL","ipnsPubsub","Error","isIpnsPubsubDatastore","routing","pubsub","stores","find","s","module","exports","namePubsub","self","state","enabled","cancel","name","subs","getSubscriptions"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,aAAD,CAA3B;;AAEA,MAAMG,mBAAmB,GAAGH,OAAO,CAAC,kCAAD,CAAnC;;AAEA,MAAMI,GAAG,GAAGL,KAAK,CAAC,kBAAD,CAAjB;AACAK,GAAG,CAACC,KAAJ,GAAYN,KAAK,CAAC,wBAAD,CAAjB,C,CAEA;;AACA,MAAMO,mBAAmB,GAAIC,IAAD,IAAU;AACpC,MAAI;AACF,WAAOC,OAAO,CAACC,gBAAgB,CAACF,IAAD,CAAjB,CAAd;AACD,GAFD,CAEE,OAAOG,GAAP,EAAY;AACZ,WAAO,KAAP;AACD;AACF,CAND,C,CAQA;;;AACA,MAAMD,gBAAgB,GAAIF,IAAD,IAAU;AACjC,MAAI,CAACA,IAAI,CAACI,KAAN,IAAe,CAACJ,IAAI,CAACK,QAAL,CAAcC,YAAd,CAA2BC,UAA/C,EAA2D;AACzD,UAAMb,OAAO,CAAC,IAAIc,KAAJ,CAAU,sCAAV,CAAD,EAAoD,6BAApD,CAAb;AACD,GAHgC,CAKjC;;;AACA,MAAIZ,mBAAmB,CAACa,qBAApB,CAA0CT,IAAI,CAACI,KAAL,CAAWM,OAArD,CAAJ,EAAmE;AACjE,WAAOV,IAAI,CAACI,KAAL,CAAWM,OAAlB;AACD,GARgC,CAUjC;;;AACA,QAAMC,MAAM,GAAG,CAACX,IAAI,CAACI,KAAL,CAAWM,OAAX,CAAmBE,MAAnB,IAA6B,EAA9B,EAAkCC,IAAlC,CAAuCC,CAAC,IAAIlB,mBAAmB,CAACa,qBAApB,CAA0CK,CAA1C,CAA5C,CAAf;;AAEA,MAAI,CAACH,MAAL,EAAa;AACX,UAAMjB,OAAO,CAAC,IAAIc,KAAJ,CAAU,iCAAV,CAAD,EAA+C,gCAA/C,CAAb;AACD;;AAED,SAAOG,MAAP;AACD,CAlBD;;AAoBAI,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAqBC,IAArB,EAA2B;AAC1C,SAAO;AACL;;;;;AAKAC,IAAAA,KAAK,EAAExB,WAAW,CAAC,YAAY;AAAE;AAC/B,aAAO;AACLyB,QAAAA,OAAO,EAAErB,mBAAmB,CAACmB,IAAD;AADvB,OAAP;AAGD,KAJiB,CANb;;AAWL;;;;;;;AAOAG,IAAAA,MAAM,EAAE1B,WAAW,CAAC,MAAO2B,IAAP,IAAgB;AAAE;AACpC,YAAMX,MAAM,GAAGT,gBAAgB,CAACgB,IAAD,CAA/B;AAEA,aAAOP,MAAM,CAACU,MAAP,CAAcC,IAAd,CAAP;AACD,KAJkB,CAlBd;;AAuBL;;;;;;AAMAC,IAAAA,IAAI,EAAE5B,WAAW,CAAC,YAAY;AAAE;AAC9B,YAAMgB,MAAM,GAAGT,gBAAgB,CAACgB,IAAD,CAA/B;AAEA,aAAOP,MAAM,CAACa,gBAAP,EAAP;AACD,KAJgB;AA7BZ,GAAP;AAmCD,CApCD","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst errcode = require('err-code')\nconst callbackify = require('callbackify')\n\nconst IpnsPubsubDatastore = require('../ipns/routing/pubsub-datastore')\n\nconst log = debug('ipfs:name-pubsub')\nlog.error = debug('ipfs:name-pubsub:error')\n\n// Is pubsub enabled\nconst isNamePubsubEnabled = (node) => {\n  try {\n    return Boolean(getPubsubRouting(node))\n  } catch (err) {\n    return false\n  }\n}\n\n// Get pubsub from IPNS routing\nconst getPubsubRouting = (node) => {\n  if (!node._ipns || !node._options.EXPERIMENTAL.ipnsPubsub) {\n    throw errcode(new Error('IPNS pubsub subsystem is not enabled'), 'ERR_IPNS_PUBSUB_NOT_ENABLED')\n  }\n\n  // Only one store and it is pubsub\n  if (IpnsPubsubDatastore.isIpnsPubsubDatastore(node._ipns.routing)) {\n    return node._ipns.routing\n  }\n\n  // Find in tiered\n  const pubsub = (node._ipns.routing.stores || []).find(s => IpnsPubsubDatastore.isIpnsPubsubDatastore(s))\n\n  if (!pubsub) {\n    throw errcode(new Error('IPNS pubsub datastore not found'), 'ERR_PUBSUB_DATASTORE_NOT_FOUND')\n  }\n\n  return pubsub\n}\n\nmodule.exports = function namePubsub (self) {\n  return {\n    /**\n     * Query the state of IPNS pubsub.\n     *\n     * @returns {Promise|void}\n     */\n    state: callbackify(async () => { // eslint-disable-line require-await\n      return {\n        enabled: isNamePubsubEnabled(self)\n      }\n    }),\n    /**\n     * Cancel a name subscription.\n     *\n     * @param {String} name subscription name.\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    cancel: callbackify(async (name) => { // eslint-disable-line require-await\n      const pubsub = getPubsubRouting(self)\n\n      return pubsub.cancel(name)\n    }),\n    /**\n     * Show current name subscriptions.\n     *\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    subs: callbackify(async () => { // eslint-disable-line require-await\n      const pubsub = getPubsubRouting(self)\n\n      return pubsub.getSubscriptions()\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}