{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tryEach;\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _eachSeries = require('./eachSeries');\n\nvar _eachSeries2 = _interopRequireDefault(_eachSeries);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _slice = require('./internal/slice');\n\nvar _slice2 = _interopRequireDefault(_slice);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\n\n\nfunction tryEach(tasks, callback) {\n  var error = null;\n  var result;\n  callback = callback || _noop2.default;\n  (0, _eachSeries2.default)(tasks, function (task, callback) {\n    (0, _wrapAsync2.default)(task)(function (err, res\n    /*, ...args*/\n    ) {\n      if (arguments.length > 2) {\n        result = (0, _slice2.default)(arguments, 1);\n      } else {\n        result = res;\n      }\n\n      error = err;\n      callback(!err);\n    });\n  }, function () {\n    callback(error, result);\n  });\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/async/tryEach.js"],"names":["Object","defineProperty","exports","value","default","tryEach","_noop","require","_noop2","_interopRequireDefault","_eachSeries","_eachSeries2","_wrapAsync","_wrapAsync2","_slice","_slice2","obj","__esModule","tasks","callback","error","result","task","err","res","arguments","length","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,OAAlB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,aAAD,CAAnB;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACH,KAAD,CAAnC;;AAEA,IAAII,WAAW,GAAGH,OAAO,CAAC,cAAD,CAAzB;;AAEA,IAAII,YAAY,GAAGF,sBAAsB,CAACC,WAAD,CAAzC;;AAEA,IAAIE,UAAU,GAAGL,OAAO,CAAC,sBAAD,CAAxB;;AAEA,IAAIM,WAAW,GAAGJ,sBAAsB,CAACG,UAAD,CAAxC;;AAEA,IAAIE,MAAM,GAAGP,OAAO,CAAC,kBAAD,CAApB;;AAEA,IAAIQ,OAAO,GAAGN,sBAAsB,CAACK,MAAD,CAApC;;AAEA,SAASL,sBAAT,CAAgCO,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEZ,IAAAA,OAAO,EAAEY;AAAX,GAArC;AAAwD;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,SAASX,OAAT,CAAiBa,KAAjB,EAAwBC,QAAxB,EAAkC;AAC9B,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,MAAJ;AACAF,EAAAA,QAAQ,GAAGA,QAAQ,IAAIX,MAAM,CAACJ,OAA9B;AACA,GAAC,GAAGO,YAAY,CAACP,OAAjB,EAA0Bc,KAA1B,EAAiC,UAAUI,IAAV,EAAgBH,QAAhB,EAA0B;AACvD,KAAC,GAAGN,WAAW,CAACT,OAAhB,EAAyBkB,IAAzB,EAA+B,UAAUC,GAAV,EAAeC;AAAI;AAAnB,MAAkC;AAC7D,UAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACtBL,QAAAA,MAAM,GAAG,CAAC,GAAGN,OAAO,CAACX,OAAZ,EAAqBqB,SAArB,EAAgC,CAAhC,CAAT;AACH,OAFD,MAEO;AACHJ,QAAAA,MAAM,GAAGG,GAAT;AACH;;AACDJ,MAAAA,KAAK,GAAGG,GAAR;AACAJ,MAAAA,QAAQ,CAAC,CAACI,GAAF,CAAR;AACH,KARD;AASH,GAVD,EAUG,YAAY;AACXJ,IAAAA,QAAQ,CAACC,KAAD,EAAQC,MAAR,CAAR;AACH,GAZD;AAaH;;AACDM,MAAM,CAACzB,OAAP,GAAiBA,OAAO,CAAC,SAAD,CAAxB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = tryEach;\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _eachSeries = require('./eachSeries');\n\nvar _eachSeries2 = _interopRequireDefault(_eachSeries);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _slice = require('./internal/slice');\n\nvar _slice2 = _interopRequireDefault(_slice);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    callback = callback || _noop2.default;\n    (0, _eachSeries2.default)(tasks, function (task, callback) {\n        (0, _wrapAsync2.default)(task)(function (err, res /*, ...args*/) {\n            if (arguments.length > 2) {\n                result = (0, _slice2.default)(arguments, 1);\n            } else {\n                result = res;\n            }\n            error = err;\n            callback(!err);\n        });\n    }, function () {\n        callback(error, result);\n    });\n}\nmodule.exports = exports['default'];"]},"metadata":{},"sourceType":"script"}