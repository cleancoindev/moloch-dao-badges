{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = debug('ipfs:mfs-preload');\nlog.error = debug('ipfs:mfs-preload:error');\n\nmodule.exports = self => {\n  const options = self._options.preload || {};\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n    return {\n      start: async () => {},\n      stop: async () => {}\n    };\n  }\n\n  let rootCid;\n  let timeoutId;\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await self.files.stat('/');\n\n      if (rootCid !== stats.hash) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.hash}`);\n        await self._preload(stats.hash);\n        rootCid = stats.hash;\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err);\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    }\n  };\n\n  return {\n    async start() {\n      const stats = await self.files.stat('/');\n      rootCid = stats.hash;\n      log(`monitoring MFS root ${rootCid}`);\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    },\n\n    stop() {\n      clearTimeout(timeoutId);\n    }\n\n  };\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs/src/core/mfs-preload.js"],"names":["debug","require","log","error","module","exports","self","options","_options","preload","interval","enabled","start","stop","rootCid","timeoutId","preloadMfs","stats","files","stat","hash","_preload","err","setTimeout","clearTimeout"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGF,KAAK,CAAC,kBAAD,CAAjB;AACAE,GAAG,CAACC,KAAJ,GAAYH,KAAK,CAAC,wBAAD,CAAjB;;AAEAI,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,QAAMC,OAAO,GAAGD,IAAI,CAACE,QAAL,CAAcC,OAAd,IAAyB,EAAzC;AACAF,EAAAA,OAAO,CAACG,QAAR,GAAmBH,OAAO,CAACG,QAAR,IAAoB,KAAK,IAA5C;;AAEA,MAAI,CAACH,OAAO,CAACI,OAAb,EAAsB;AACpBT,IAAAA,GAAG,CAAC,sBAAD,CAAH;AACA,WAAO;AACLU,MAAAA,KAAK,EAAE,YAAY,CAAE,CADhB;AAELC,MAAAA,IAAI,EAAE,YAAY,CAAE;AAFf,KAAP;AAID;;AAED,MAAIC,OAAJ;AACA,MAAIC,SAAJ;;AAEA,QAAMC,UAAU,GAAG,YAAY;AAC7B,QAAI;AACF,YAAMC,KAAK,GAAG,MAAMX,IAAI,CAACY,KAAL,CAAWC,IAAX,CAAgB,GAAhB,CAApB;;AAEA,UAAIL,OAAO,KAAKG,KAAK,CAACG,IAAtB,EAA4B;AAC1BlB,QAAAA,GAAG,CAAE,+BAA8BY,OAAQ,OAAMG,KAAK,CAACG,IAAK,EAAzD,CAAH;AACA,cAAMd,IAAI,CAACe,QAAL,CAAcJ,KAAK,CAACG,IAApB,CAAN;AACAN,QAAAA,OAAO,GAAGG,KAAK,CAACG,IAAhB;AACD;AACF,KARD,CAQE,OAAOE,GAAP,EAAY;AACZpB,MAAAA,GAAG,CAACC,KAAJ,CAAU,4BAAV,EAAwCmB,GAAxC;AACD,KAVD,SAUU;AACRP,MAAAA,SAAS,GAAGQ,UAAU,CAACP,UAAD,EAAaT,OAAO,CAACG,QAArB,CAAtB;AACD;AACF,GAdD;;AAgBA,SAAO;AACL,UAAME,KAAN,GAAe;AACb,YAAMK,KAAK,GAAG,MAAMX,IAAI,CAACY,KAAL,CAAWC,IAAX,CAAgB,GAAhB,CAApB;AACAL,MAAAA,OAAO,GAAGG,KAAK,CAACG,IAAhB;AACAlB,MAAAA,GAAG,CAAE,uBAAsBY,OAAQ,EAAhC,CAAH;AACAC,MAAAA,SAAS,GAAGQ,UAAU,CAACP,UAAD,EAAaT,OAAO,CAACG,QAArB,CAAtB;AACD,KANI;;AAOLG,IAAAA,IAAI,GAAI;AACNW,MAAAA,YAAY,CAACT,SAAD,CAAZ;AACD;;AATI,GAAP;AAWD,CA1CD","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = debug('ipfs:mfs-preload')\nlog.error = debug('ipfs:mfs-preload:error')\n\nmodule.exports = (self) => {\n  const options = self._options.preload || {}\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    return {\n      start: async () => {},\n      stop: async () => {}\n    }\n  }\n\n  let rootCid\n  let timeoutId\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await self.files.stat('/')\n\n      if (rootCid !== stats.hash) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.hash}`)\n        await self._preload(stats.hash)\n        rootCid = stats.hash\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err)\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    }\n  }\n\n  return {\n    async start () {\n      const stats = await self.files.stat('/')\n      rootCid = stats.hash\n      log(`monitoring MFS root ${rootCid}`)\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    },\n    stop () {\n      clearTimeout(timeoutId)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}