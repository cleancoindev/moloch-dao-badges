{"ast":null,"code":"'use strict';\n\nconst connect = require('pull-ws/client');\n\nconst mafmt = require('mafmt');\n\nconst withIs = require('class-is');\n\nconst Connection = require('interface-connection').Connection;\n\nconst toUri = require('multiaddr-to-uri');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:websockets:dialer');\n\nconst createListener = require('./listener');\n\nclass WebSockets {\n  dial(ma, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    callback = callback || function () {};\n\n    const url = toUri(ma);\n    log('dialing %s', url);\n    const socket = connect(url, {\n      binary: true,\n      onConnect: err => {\n        callback(err);\n      }\n    });\n    const conn = new Connection(socket);\n\n    conn.getObservedAddrs = cb => cb(null, [ma]);\n\n    conn.close = cb => socket.close(cb);\n\n    return conn;\n  }\n\n  createListener(options, handler) {\n    if (typeof options === 'function') {\n      handler = options;\n      options = {};\n    }\n\n    return createListener(options, handler);\n  }\n\n  filter(multiaddrs) {\n    if (!Array.isArray(multiaddrs)) {\n      multiaddrs = [multiaddrs];\n    }\n\n    return multiaddrs.filter(ma => {\n      if (ma.protoNames().includes('p2p-circuit')) {\n        return false;\n      }\n\n      if (typeof ma.decapsulateCode === 'function') {\n        ma = ma.decapsulateCode(421); // multiaddr 7\n      } else if (ma.protoNames().includes('ipfs')) {\n        ma = ma.decapsulate('ipfs');\n      }\n\n      return mafmt.WebSockets.matches(ma) || mafmt.WebSocketsSecure.matches(ma);\n    });\n  }\n\n}\n\nmodule.exports = withIs(WebSockets, {\n  className: 'WebSockets',\n  symbolName: '@libp2p/js-libp2p-websockets/websockets'\n});","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/libp2p-websockets/src/index.js"],"names":["connect","require","mafmt","withIs","Connection","toUri","debug","log","createListener","WebSockets","dial","ma","options","callback","url","socket","binary","onConnect","err","conn","getObservedAddrs","cb","close","handler","filter","multiaddrs","Array","isArray","protoNames","includes","decapsulateCode","decapsulate","matches","WebSocketsSecure","module","exports","className","symbolName"],"mappings":"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","sourcesContent":["'use strict'\n\nconst connect = require('pull-ws/client')\nconst mafmt = require('mafmt')\nconst withIs = require('class-is')\nconst Connection = require('interface-connection').Connection\n\nconst toUri = require('multiaddr-to-uri')\nconst debug = require('debug')\nconst log = debug('libp2p:websockets:dialer')\n\nconst createListener = require('./listener')\n\nclass WebSockets {\n  dial (ma, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    callback = callback || function () { }\n\n    const url = toUri(ma)\n    log('dialing %s', url)\n    const socket = connect(url, {\n      binary: true,\n      onConnect: (err) => {\n        callback(err)\n      }\n    })\n\n    const conn = new Connection(socket)\n    conn.getObservedAddrs = (cb) => cb(null, [ma])\n    conn.close = (cb) => socket.close(cb)\n\n    return conn\n  }\n\n  createListener (options, handler) {\n    if (typeof options === 'function') {\n      handler = options\n      options = {}\n    }\n\n    return createListener(options, handler)\n  }\n\n  filter (multiaddrs) {\n    if (!Array.isArray(multiaddrs)) {\n      multiaddrs = [multiaddrs]\n    }\n\n    return multiaddrs.filter((ma) => {\n      if (ma.protoNames().includes('p2p-circuit')) {\n        return false\n      }\n\n      if (typeof ma.decapsulateCode === 'function') {\n        ma = ma.decapsulateCode(421) // multiaddr 7\n      } else if (ma.protoNames().includes('ipfs')) {\n        ma = ma.decapsulate('ipfs')\n      }\n\n      return mafmt.WebSockets.matches(ma) ||\n        mafmt.WebSocketsSecure.matches(ma)\n    })\n  }\n}\n\nmodule.exports = withIs(WebSockets, { className: 'WebSockets', symbolName: '@libp2p/js-libp2p-websockets/websockets' })\n"]},"metadata":{},"sourceType":"script"}