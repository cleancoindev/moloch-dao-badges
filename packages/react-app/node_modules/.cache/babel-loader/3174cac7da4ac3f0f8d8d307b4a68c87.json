{"ast":null,"code":"'use strict';\n\nconst {\n  superstruct\n} = require('superstruct');\n\nconst dagBuilder = require('./dag-builder');\n\nconst treeBuilder = require('./tree-builder');\n\nconst mh = require('multihashes');\n\nconst struct = superstruct({\n  types: {\n    codec: v => ['dag-pb', 'dag-cbor', 'raw'].includes(v),\n    hashAlg: v => Object.keys(mh.names).includes(v),\n    leafType: v => ['file', 'raw'].includes(v)\n  }\n});\nconst ChunkerOptions = struct({\n  minChunkSize: 'number?',\n  maxChunkSize: 'number?',\n  avgChunkSize: 'number?',\n  window: 'number?',\n  polynomial: 'number?'\n}, {\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  polynomial: 17437180132763653 // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n\n});\nconst BuilderOptions = struct({\n  maxChildrenPerNode: 'number?',\n  layerRepeat: 'number?'\n}, {\n  maxChildrenPerNode: 174,\n  layerRepeat: 4\n});\nconst Options = struct({\n  chunker: struct.enum(['fixed', 'rabin']),\n  rawLeaves: 'boolean?',\n  hashOnly: 'boolean?',\n  strategy: struct.enum(['balanced', 'flat', 'trickle']),\n  reduceSingleLeafToSelf: 'boolean?',\n  codec: 'codec?',\n  format: 'codec?',\n  hashAlg: 'hashAlg?',\n  leafType: 'leafType?',\n  cidVersion: 'number?',\n  progress: 'function?',\n  wrapWithDirectory: 'boolean?',\n  shardSplitThreshold: 'number?',\n  onlyHash: 'boolean?',\n  chunkerOptions: ChunkerOptions,\n  builderOptions: BuilderOptions,\n  wrap: 'boolean?',\n  pin: 'boolean?',\n  recursive: 'boolean?',\n  ignore: 'array?',\n  hidden: 'boolean?',\n  preload: 'boolean?'\n}, {\n  chunker: 'fixed',\n  strategy: 'balanced',\n  rawLeaves: false,\n  reduceSingleLeafToSelf: true,\n  codec: 'dag-pb',\n  hashAlg: 'sha2-256',\n  leafType: 'file',\n  cidVersion: 0,\n  progress: () => () => {},\n  shardSplitThreshold: 1000\n});\n\nmodule.exports = async function* (source, ipld, options = {}) {\n  const opts = Options(options);\n\n  if (options.cidVersion > 0 && options.rawLeaves === undefined) {\n    // if the cid version is 1 or above, use raw leaves as this is\n    // what go does.\n    opts.rawLeaves = true;\n  }\n\n  if (options.hashAlg !== undefined && options.rawLeaves === undefined) {\n    // if a non-default hash alg has been specified, use raw leaves as this is\n    // what go does.\n    opts.rawLeaves = true;\n  } // go-ifps trickle dag defaults to unixfs raw leaves, balanced dag defaults to file leaves\n\n\n  if (options.strategy === 'trickle') {\n    opts.leafType = 'raw';\n    opts.reduceSingleLeafToSelf = false;\n  }\n\n  if (options.format) {\n    options.codec = options.format;\n  }\n\n  for await (const entry of treeBuilder(dagBuilder(source, ipld, opts), ipld, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    };\n  }\n};","map":{"version":3,"sources":["/home/samkuhlmann/Documents/ody/moloch/moloch-dao-badges/node_modules/ipfs-unixfs-importer/src/index.js"],"names":["superstruct","require","dagBuilder","treeBuilder","mh","struct","types","codec","v","includes","hashAlg","Object","keys","names","leafType","ChunkerOptions","minChunkSize","maxChunkSize","avgChunkSize","window","polynomial","BuilderOptions","maxChildrenPerNode","layerRepeat","Options","chunker","enum","rawLeaves","hashOnly","strategy","reduceSingleLeafToSelf","format","cidVersion","progress","wrapWithDirectory","shardSplitThreshold","onlyHash","chunkerOptions","builderOptions","wrap","pin","recursive","ignore","hidden","preload","module","exports","source","ipld","options","opts","undefined","entry","cid","path","unixfs","size"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { superstruct } = require('superstruct')\nconst dagBuilder = require('./dag-builder')\nconst treeBuilder = require('./tree-builder')\nconst mh = require('multihashes')\n\nconst struct = superstruct({\n  types: {\n    codec: v => ['dag-pb', 'dag-cbor', 'raw'].includes(v),\n    hashAlg: v => Object.keys(mh.names).includes(v),\n    leafType: v => ['file', 'raw'].includes(v)\n  }\n})\n\nconst ChunkerOptions = struct({\n  minChunkSize: 'number?',\n  maxChunkSize: 'number?',\n  avgChunkSize: 'number?',\n  window: 'number?',\n  polynomial: 'number?'\n}, {\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  polynomial: 17437180132763653 // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n})\n\nconst BuilderOptions = struct({\n  maxChildrenPerNode: 'number?',\n  layerRepeat: 'number?'\n}, {\n  maxChildrenPerNode: 174,\n  layerRepeat: 4\n})\n\nconst Options = struct({\n  chunker: struct.enum(['fixed', 'rabin']),\n  rawLeaves: 'boolean?',\n  hashOnly: 'boolean?',\n  strategy: struct.enum(['balanced', 'flat', 'trickle']),\n  reduceSingleLeafToSelf: 'boolean?',\n  codec: 'codec?',\n  format: 'codec?',\n  hashAlg: 'hashAlg?',\n  leafType: 'leafType?',\n  cidVersion: 'number?',\n  progress: 'function?',\n  wrapWithDirectory: 'boolean?',\n  shardSplitThreshold: 'number?',\n  onlyHash: 'boolean?',\n  chunkerOptions: ChunkerOptions,\n  builderOptions: BuilderOptions,\n\n  wrap: 'boolean?',\n  pin: 'boolean?',\n  recursive: 'boolean?',\n  ignore: 'array?',\n  hidden: 'boolean?',\n  preload: 'boolean?'\n}, {\n  chunker: 'fixed',\n  strategy: 'balanced',\n  rawLeaves: false,\n  reduceSingleLeafToSelf: true,\n  codec: 'dag-pb',\n  hashAlg: 'sha2-256',\n  leafType: 'file',\n  cidVersion: 0,\n  progress: () => () => {},\n  shardSplitThreshold: 1000\n})\n\nmodule.exports = async function * (source, ipld, options = {}) {\n  const opts = Options(options)\n\n  if (options.cidVersion > 0 && options.rawLeaves === undefined) {\n    // if the cid version is 1 or above, use raw leaves as this is\n    // what go does.\n    opts.rawLeaves = true\n  }\n\n  if (options.hashAlg !== undefined && options.rawLeaves === undefined) {\n    // if a non-default hash alg has been specified, use raw leaves as this is\n    // what go does.\n    opts.rawLeaves = true\n  }\n\n  // go-ifps trickle dag defaults to unixfs raw leaves, balanced dag defaults to file leaves\n  if (options.strategy === 'trickle') {\n    opts.leafType = 'raw'\n    opts.reduceSingleLeafToSelf = false\n  }\n\n  if (options.format) {\n    options.codec = options.format\n  }\n\n  for await (const entry of treeBuilder(dagBuilder(source, ipld, opts), ipld, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}