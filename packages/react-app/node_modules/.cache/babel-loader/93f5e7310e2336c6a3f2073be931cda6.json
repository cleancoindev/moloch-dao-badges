{"ast":null,"code":"'use strict';\n\nconst pull = require('pull-stream/pull');\n\nconst values = require('pull-stream/sources/values');\n\nconst lp = require('pull-length-prefixed');\n\nconst msg = require('./message');\n\nmodule.exports = (conn, pInfoSelf) => {\n  // send what I see from the other + my Info\n  conn.getObservedAddrs((err, observedAddrs) => {\n    if (err) {\n      return;\n    }\n\n    observedAddrs = observedAddrs[0];\n    let publicKey = Buffer.alloc(0);\n\n    if (pInfoSelf.id.pubKey) {\n      publicKey = pInfoSelf.id.pubKey.bytes;\n    }\n\n    const msgSend = msg.encode({\n      protocolVersion: 'ipfs/0.1.0',\n      agentVersion: 'na',\n      publicKey: publicKey,\n      listenAddrs: pInfoSelf.multiaddrs.toArray().map(ma => ma.buffer),\n      observedAddr: observedAddrs ? observedAddrs.buffer : Buffer.from(''),\n      protocols: Array.from(pInfoSelf.protocols)\n    });\n    pull(values([msgSend]), lp.encode(), conn);\n  });\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/libp2p/src/identify/listener.js"],"names":["pull","require","values","lp","msg","module","exports","conn","pInfoSelf","getObservedAddrs","err","observedAddrs","publicKey","Buffer","alloc","id","pubKey","bytes","msgSend","encode","protocolVersion","agentVersion","listenAddrs","multiaddrs","toArray","map","ma","buffer","observedAddr","from","protocols","Array"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,4BAAD,CAAtB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,sBAAD,CAAlB;;AAEA,MAAMG,GAAG,GAAGH,OAAO,CAAC,WAAD,CAAnB;;AAEAI,MAAM,CAACC,OAAP,GAAiB,CAACC,IAAD,EAAOC,SAAP,KAAqB;AACpC;AACAD,EAAAA,IAAI,CAACE,gBAAL,CAAsB,CAACC,GAAD,EAAMC,aAAN,KAAwB;AAC5C,QAAID,GAAJ,EAAS;AAAE;AAAQ;;AACnBC,IAAAA,aAAa,GAAGA,aAAa,CAAC,CAAD,CAA7B;AAEA,QAAIC,SAAS,GAAGC,MAAM,CAACC,KAAP,CAAa,CAAb,CAAhB;;AACA,QAAIN,SAAS,CAACO,EAAV,CAAaC,MAAjB,EAAyB;AACvBJ,MAAAA,SAAS,GAAGJ,SAAS,CAACO,EAAV,CAAaC,MAAb,CAAoBC,KAAhC;AACD;;AAED,UAAMC,OAAO,GAAGd,GAAG,CAACe,MAAJ,CAAW;AACzBC,MAAAA,eAAe,EAAE,YADQ;AAEzBC,MAAAA,YAAY,EAAE,IAFW;AAGzBT,MAAAA,SAAS,EAAEA,SAHc;AAIzBU,MAAAA,WAAW,EAAEd,SAAS,CAACe,UAAV,CAAqBC,OAArB,GAA+BC,GAA/B,CAAoCC,EAAD,IAAQA,EAAE,CAACC,MAA9C,CAJY;AAKzBC,MAAAA,YAAY,EAAEjB,aAAa,GAAGA,aAAa,CAACgB,MAAjB,GAA0Bd,MAAM,CAACgB,IAAP,CAAY,EAAZ,CAL5B;AAMzBC,MAAAA,SAAS,EAAEC,KAAK,CAACF,IAAN,CAAWrB,SAAS,CAACsB,SAArB;AANc,KAAX,CAAhB;AASA9B,IAAAA,IAAI,CACFE,MAAM,CAAC,CAACgB,OAAD,CAAD,CADJ,EAEFf,EAAE,CAACgB,MAAH,EAFE,EAGFZ,IAHE,CAAJ;AAKD,GAvBD;AAwBD,CA1BD","sourcesContent":["'use strict'\n\nconst pull = require('pull-stream/pull')\nconst values = require('pull-stream/sources/values')\nconst lp = require('pull-length-prefixed')\n\nconst msg = require('./message')\n\nmodule.exports = (conn, pInfoSelf) => {\n  // send what I see from the other + my Info\n  conn.getObservedAddrs((err, observedAddrs) => {\n    if (err) { return }\n    observedAddrs = observedAddrs[0]\n\n    let publicKey = Buffer.alloc(0)\n    if (pInfoSelf.id.pubKey) {\n      publicKey = pInfoSelf.id.pubKey.bytes\n    }\n\n    const msgSend = msg.encode({\n      protocolVersion: 'ipfs/0.1.0',\n      agentVersion: 'na',\n      publicKey: publicKey,\n      listenAddrs: pInfoSelf.multiaddrs.toArray().map((ma) => ma.buffer),\n      observedAddr: observedAddrs ? observedAddrs.buffer : Buffer.from(''),\n      protocols: Array.from(pInfoSelf.protocols)\n    })\n\n    pull(\n      values([msgSend]),\n      lp.encode(),\n      conn\n    )\n  })\n}\n"]},"metadata":{},"sourceType":"script"}