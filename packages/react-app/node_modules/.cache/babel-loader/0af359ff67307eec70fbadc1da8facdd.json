{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst pull = require('pull-stream/pull');\n\nconst empty = require('pull-stream/sources/empty');\n\nconst handshake = require('pull-handshake');\n\nconst constants = require('./constants');\n\nconst util = require('./util');\n\nconst rnd = util.rnd;\n\nconst debug = require('debug');\n\nconst log = debug('libp2p-ping');\nlog.error = debug('libp2p-ping:error');\nconst PROTOCOL = constants.PROTOCOL;\nconst PING_LENGTH = constants.PING_LENGTH;\n\nclass Ping extends EventEmitter {\n  constructor(swarm, peer) {\n    super();\n    this._stopped = false;\n    this.peer = peer;\n    this.swarm = swarm;\n  }\n\n  start() {\n    log('dialing %s to %s', PROTOCOL, this.peer.id.toB58String());\n    this.swarm.dial(this.peer, PROTOCOL, (err, conn) => {\n      if (err) {\n        return this.emit('error', err);\n      }\n\n      const stream = handshake({\n        timeout: 0\n      });\n      this.shake = stream.handshake;\n      pull(stream, conn, stream); // write and wait to see ping back\n\n      const self = this;\n\n      function next() {\n        const start = new Date();\n        const buf = rnd(PING_LENGTH);\n        self.shake.write(buf);\n        self.shake.read(PING_LENGTH, (err, bufBack) => {\n          const end = new Date();\n\n          if (err || !buf.equals(bufBack)) {\n            const err = new Error('Received wrong ping ack');\n            return self.emit('error', err);\n          }\n\n          self.emit('ping', end - start);\n\n          if (self._stopped) {\n            return;\n          }\n\n          next();\n        });\n      }\n\n      next();\n    });\n  }\n\n  stop() {\n    if (this._stopped || !this.shake) {\n      return;\n    }\n\n    this._stopped = true;\n    pull(empty(), this.shake.rest());\n  }\n\n}\n\nmodule.exports = Ping;","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/libp2p/src/ping/ping.js"],"names":["EventEmitter","require","pull","empty","handshake","constants","util","rnd","debug","log","error","PROTOCOL","PING_LENGTH","Ping","constructor","swarm","peer","_stopped","start","id","toB58String","dial","err","conn","emit","stream","timeout","shake","self","next","Date","buf","write","read","bufBack","end","equals","Error","stop","rest","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events').EventEmitter\nconst pull = require('pull-stream/pull')\nconst empty = require('pull-stream/sources/empty')\nconst handshake = require('pull-handshake')\nconst constants = require('./constants')\nconst util = require('./util')\nconst rnd = util.rnd\nconst debug = require('debug')\nconst log = debug('libp2p-ping')\nlog.error = debug('libp2p-ping:error')\n\nconst PROTOCOL = constants.PROTOCOL\nconst PING_LENGTH = constants.PING_LENGTH\n\nclass Ping extends EventEmitter {\n  constructor (swarm, peer) {\n    super()\n\n    this._stopped = false\n    this.peer = peer\n    this.swarm = swarm\n  }\n\n  start () {\n    log('dialing %s to %s', PROTOCOL, this.peer.id.toB58String())\n\n    this.swarm.dial(this.peer, PROTOCOL, (err, conn) => {\n      if (err) {\n        return this.emit('error', err)\n      }\n\n      const stream = handshake({ timeout: 0 })\n      this.shake = stream.handshake\n\n      pull(\n        stream,\n        conn,\n        stream\n      )\n\n      // write and wait to see ping back\n      const self = this\n      function next () {\n        const start = new Date()\n        const buf = rnd(PING_LENGTH)\n        self.shake.write(buf)\n        self.shake.read(PING_LENGTH, (err, bufBack) => {\n          const end = new Date()\n          if (err || !buf.equals(bufBack)) {\n            const err = new Error('Received wrong ping ack')\n            return self.emit('error', err)\n          }\n\n          self.emit('ping', end - start)\n\n          if (self._stopped) {\n            return\n          }\n          next()\n        })\n      }\n\n      next()\n    })\n  }\n\n  stop () {\n    if (this._stopped || !this.shake) {\n      return\n    }\n\n    this._stopped = true\n\n    pull(\n      empty(),\n      this.shake.rest()\n    )\n  }\n}\n\nmodule.exports = Ping\n"]},"metadata":{},"sourceType":"script"}