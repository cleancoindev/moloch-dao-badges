{"ast":null,"code":"'use strict';\n\nconst applyDefaultOptions = require('./utils/apply-default-options');\n\nconst toSources = require('./utils/to-sources');\n\nconst cp = require('./cp');\n\nconst rm = require('./rm');\n\nconst defaultOptions = {\n  parents: false,\n  recursive: false,\n  flush: true,\n  format: 'dag-pb',\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n};\n\nmodule.exports = context => {\n  return async function mfsMv(...args) {\n    if (Array.isArray(args[0])) {\n      args = args[0].concat(args.slice(1));\n    }\n\n    const {\n      sources\n    } = await toSources(context, args);\n    const options = applyDefaultOptions(args, defaultOptions);\n    const cpArgs = sources.map(source => source.path).concat(options); // remove the last source as it'll be the destination\n\n    const rmArgs = sources.slice(0, -1).map(source => source.path).concat(Object.assign(options, {\n      recursive: true\n    }));\n    await cp(context).apply(null, cpArgs);\n    await rm(context).apply(null, rmArgs);\n  };\n};","map":{"version":3,"sources":["/home/dekan/Projects/raid-guild/dao-badges-web/node_modules/ipfs-mfs/src/core/mv.js"],"names":["applyDefaultOptions","require","toSources","cp","rm","defaultOptions","parents","recursive","flush","format","hashAlg","shardSplitThreshold","module","exports","context","mfsMv","args","Array","isArray","concat","slice","sources","options","cpArgs","map","source","path","rmArgs","Object","assign","apply"],"mappings":"AAAA;;AAEA,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,+BAAD,CAAnC;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,oBAAD,CAAzB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAMG,EAAE,GAAGH,OAAO,CAAC,MAAD,CAAlB;;AAEA,MAAMI,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE,KADY;AAErBC,EAAAA,SAAS,EAAE,KAFU;AAGrBC,EAAAA,KAAK,EAAE,IAHc;AAIrBC,EAAAA,MAAM,EAAE,QAJa;AAKrBC,EAAAA,OAAO,EAAE,UALY;AAMrBC,EAAAA,mBAAmB,EAAE;AANA,CAAvB;;AASAC,MAAM,CAACC,OAAP,GAAkBC,OAAD,IAAa;AAC5B,SAAO,eAAeC,KAAf,CAAsB,GAAGC,IAAzB,EAA+B;AACpC,QAAIC,KAAK,CAACC,OAAN,CAAcF,IAAI,CAAC,CAAD,CAAlB,CAAJ,EAA4B;AAC1BA,MAAAA,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAJ,CAAQG,MAAR,CAAeH,IAAI,CAACI,KAAL,CAAW,CAAX,CAAf,CAAP;AACD;;AAED,UAAM;AACJC,MAAAA;AADI,QAEF,MAAMnB,SAAS,CAACY,OAAD,EAAUE,IAAV,CAFnB;AAGA,UAAMM,OAAO,GAAGtB,mBAAmB,CAACgB,IAAD,EAAOX,cAAP,CAAnC;AAEA,UAAMkB,MAAM,GAAGF,OAAO,CACnBG,GADY,CACRC,MAAM,IAAIA,MAAM,CAACC,IADT,EACeP,MADf,CACsBG,OADtB,CAAf,CAVoC,CAapC;;AACA,UAAMK,MAAM,GAAGN,OAAO,CACnBD,KADY,CACN,CADM,EACH,CAAC,CADE,EAEZI,GAFY,CAERC,MAAM,IAAIA,MAAM,CAACC,IAFT,EAGZP,MAHY,CAGLS,MAAM,CAACC,MAAP,CAAcP,OAAd,EAAuB;AAC7Bf,MAAAA,SAAS,EAAE;AADkB,KAAvB,CAHK,CAAf;AAOA,UAAMJ,EAAE,CAACW,OAAD,CAAF,CAAYgB,KAAZ,CAAkB,IAAlB,EAAwBP,MAAxB,CAAN;AACA,UAAMnB,EAAE,CAACU,OAAD,CAAF,CAAYgB,KAAZ,CAAkB,IAAlB,EAAwBH,MAAxB,CAAN;AACD,GAvBD;AAwBD,CAzBD","sourcesContent":["'use strict'\n\nconst applyDefaultOptions = require('./utils/apply-default-options')\nconst toSources = require('./utils/to-sources')\nconst cp = require('./cp')\nconst rm = require('./rm')\n\nconst defaultOptions = {\n  parents: false,\n  recursive: false,\n  flush: true,\n  format: 'dag-pb',\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n}\n\nmodule.exports = (context) => {\n  return async function mfsMv (...args) {\n    if (Array.isArray(args[0])) {\n      args = args[0].concat(args.slice(1))\n    }\n\n    const {\n      sources\n    } = await toSources(context, args)\n    const options = applyDefaultOptions(args, defaultOptions)\n\n    const cpArgs = sources\n      .map(source => source.path).concat(options)\n\n    // remove the last source as it'll be the destination\n    const rmArgs = sources\n      .slice(0, -1)\n      .map(source => source.path)\n      .concat(Object.assign(options, {\n        recursive: true\n      }))\n\n    await cp(context).apply(null, cpArgs)\n    await rm(context).apply(null, rmArgs)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}